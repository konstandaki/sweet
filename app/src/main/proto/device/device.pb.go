// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: device/device.proto

package device

import (
	application "gitlab.sweet.tv/proto/application"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceInfo_Platform int32

const (
	DeviceInfo_Undefined DeviceInfo_Platform = 0
	DeviceInfo_Web       DeviceInfo_Platform = 1
	DeviceInfo_Mobile    DeviceInfo_Platform = 2
	DeviceInfo_SmartTV   DeviceInfo_Platform = 3
)

// Enum value maps for DeviceInfo_Platform.
var (
	DeviceInfo_Platform_name = map[int32]string{
		0: "Undefined",
		1: "Web",
		2: "Mobile",
		3: "SmartTV",
	}
	DeviceInfo_Platform_value = map[string]int32{
		"Undefined": 0,
		"Web":       1,
		"Mobile":    2,
		"SmartTV":   3,
	}
)

func (x DeviceInfo_Platform) Enum() *DeviceInfo_Platform {
	p := new(DeviceInfo_Platform)
	*p = x
	return p
}

func (x DeviceInfo_Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceInfo_Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_device_device_proto_enumTypes[0].Descriptor()
}

func (DeviceInfo_Platform) Type() protoreflect.EnumType {
	return &file_device_device_proto_enumTypes[0]
}

func (x DeviceInfo_Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeviceInfo_Platform) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeviceInfo_Platform(num)
	return nil
}

// Deprecated: Use DeviceInfo_Platform.Descriptor instead.
func (DeviceInfo_Platform) EnumDescriptor() ([]byte, []int) {
	return file_device_device_proto_rawDescGZIP(), []int{0, 0}
}

type DeviceInfo_DeviceType int32

const (
	DeviceInfo_DT_Unknown        DeviceInfo_DeviceType = 0
	DeviceInfo_DT_DIB_120        DeviceInfo_DeviceType = 1
	DeviceInfo_DT_IPTV_Player    DeviceInfo_DeviceType = 2
	DeviceInfo_DT_MAG200         DeviceInfo_DeviceType = 7
	DeviceInfo_DT_MAG250_Micro   DeviceInfo_DeviceType = 8
	DeviceInfo_DT_MAG250_Mini    DeviceInfo_DeviceType = 9
	DeviceInfo_DT_Himedia_HD600A DeviceInfo_DeviceType = 10
	DeviceInfo_DT_Android_Player DeviceInfo_DeviceType = 11
	DeviceInfo_DT_STB_Emul       DeviceInfo_DeviceType = 12
	DeviceInfo_DT_SmartTV        DeviceInfo_DeviceType = 13
	DeviceInfo_DT_iNext          DeviceInfo_DeviceType = 14
	DeviceInfo_DT_M3U            DeviceInfo_DeviceType = 15
	DeviceInfo_DT_AndroidTV      DeviceInfo_DeviceType = 16
	DeviceInfo_DT_IOS_Player     DeviceInfo_DeviceType = 17
	DeviceInfo_DT_MacOS_Player   DeviceInfo_DeviceType = 18
	DeviceInfo_DT_Kivi_TV        DeviceInfo_DeviceType = 19
	DeviceInfo_DT_GX_STB         DeviceInfo_DeviceType = 20
	DeviceInfo_DT_NOMI_TV        DeviceInfo_DeviceType = 21
	DeviceInfo_DT_Web_Browser    DeviceInfo_DeviceType = 22
	DeviceInfo_DT_ERGO_TV        DeviceInfo_DeviceType = 23
	DeviceInfo_DT_AppleTV        DeviceInfo_DeviceType = 24
	DeviceInfo_DT_Xbox           DeviceInfo_DeviceType = 25
)

// Enum value maps for DeviceInfo_DeviceType.
var (
	DeviceInfo_DeviceType_name = map[int32]string{
		0:  "DT_Unknown",
		1:  "DT_DIB_120",
		2:  "DT_IPTV_Player",
		7:  "DT_MAG200",
		8:  "DT_MAG250_Micro",
		9:  "DT_MAG250_Mini",
		10: "DT_Himedia_HD600A",
		11: "DT_Android_Player",
		12: "DT_STB_Emul",
		13: "DT_SmartTV",
		14: "DT_iNext",
		15: "DT_M3U",
		16: "DT_AndroidTV",
		17: "DT_IOS_Player",
		18: "DT_MacOS_Player",
		19: "DT_Kivi_TV",
		20: "DT_GX_STB",
		21: "DT_NOMI_TV",
		22: "DT_Web_Browser",
		23: "DT_ERGO_TV",
		24: "DT_AppleTV",
		25: "DT_Xbox",
	}
	DeviceInfo_DeviceType_value = map[string]int32{
		"DT_Unknown":        0,
		"DT_DIB_120":        1,
		"DT_IPTV_Player":    2,
		"DT_MAG200":         7,
		"DT_MAG250_Micro":   8,
		"DT_MAG250_Mini":    9,
		"DT_Himedia_HD600A": 10,
		"DT_Android_Player": 11,
		"DT_STB_Emul":       12,
		"DT_SmartTV":        13,
		"DT_iNext":          14,
		"DT_M3U":            15,
		"DT_AndroidTV":      16,
		"DT_IOS_Player":     17,
		"DT_MacOS_Player":   18,
		"DT_Kivi_TV":        19,
		"DT_GX_STB":         20,
		"DT_NOMI_TV":        21,
		"DT_Web_Browser":    22,
		"DT_ERGO_TV":        23,
		"DT_AppleTV":        24,
		"DT_Xbox":           25,
	}
)

func (x DeviceInfo_DeviceType) Enum() *DeviceInfo_DeviceType {
	p := new(DeviceInfo_DeviceType)
	*p = x
	return p
}

func (x DeviceInfo_DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceInfo_DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_device_device_proto_enumTypes[1].Descriptor()
}

func (DeviceInfo_DeviceType) Type() protoreflect.EnumType {
	return &file_device_device_proto_enumTypes[1]
}

func (x DeviceInfo_DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeviceInfo_DeviceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeviceInfo_DeviceType(num)
	return nil
}

// Deprecated: Use DeviceInfo_DeviceType.Descriptor instead.
func (DeviceInfo_DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_device_device_proto_rawDescGZIP(), []int{0, 1}
}

type DeviceInfo_DeviceSubType int32

const (
	DeviceInfo_DST_Unknown        DeviceInfo_DeviceSubType = 0
	DeviceInfo_DST_LG             DeviceInfo_DeviceSubType = 1
	DeviceInfo_DST_SAMSUNG        DeviceInfo_DeviceSubType = 2
	DeviceInfo_DST_PHILIPS        DeviceInfo_DeviceSubType = 3
	DeviceInfo_DST_TOSHIBA        DeviceInfo_DeviceSubType = 4
	DeviceInfo_DST_INEXT          DeviceInfo_DeviceSubType = 5
	DeviceInfo_DST_INFOMIR        DeviceInfo_DeviceSubType = 6
	DeviceInfo_DST_KIVI           DeviceInfo_DeviceSubType = 7
	DeviceInfo_DST_NOMI           DeviceInfo_DeviceSubType = 8
	DeviceInfo_DST_ERGO           DeviceInfo_DeviceSubType = 9
	DeviceInfo_DST_VESTEL         DeviceInfo_DeviceSubType = 10
	DeviceInfo_DST_VEWD           DeviceInfo_DeviceSubType = 11
	DeviceInfo_DST_FOXXUM         DeviceInfo_DeviceSubType = 12
	DeviceInfo_DST_ZEASN          DeviceInfo_DeviceSubType = 13
	DeviceInfo_DST_SONY           DeviceInfo_DeviceSubType = 14
	DeviceInfo_DST_ROMSAT         DeviceInfo_DeviceSubType = 15
	DeviceInfo_DST_SAMSUNG_MOBILE DeviceInfo_DeviceSubType = 16
	DeviceInfo_DST_AIWA           DeviceInfo_DeviceSubType = 17
	DeviceInfo_DST_LIBERTON       DeviceInfo_DeviceSubType = 18
	DeviceInfo_DST_HUAWEI_MOBILE  DeviceInfo_DeviceSubType = 19
	DeviceInfo_DST_PRESET_APP     DeviceInfo_DeviceSubType = 20
	DeviceInfo_DST_COMFY_STORE    DeviceInfo_DeviceSubType = 21
	DeviceInfo_DST_PANASONIC      DeviceInfo_DeviceSubType = 22
	DeviceInfo_DST_ARCELIK        DeviceInfo_DeviceSubType = 23
	DeviceInfo_DST_HISENSE        DeviceInfo_DeviceSubType = 24
	DeviceInfo_DST_OZONE_HD       DeviceInfo_DeviceSubType = 25
	DeviceInfo_DST_FIRE_TV        DeviceInfo_DeviceSubType = 26
	DeviceInfo_DST_REALME         DeviceInfo_DeviceSubType = 27
	DeviceInfo_DST_GAZER          DeviceInfo_DeviceSubType = 28
	DeviceInfo_DST_TLC            DeviceInfo_DeviceSubType = 29
	DeviceInfo_DST_TCL            DeviceInfo_DeviceSubType = 30
	DeviceInfo_DST_ORSAY          DeviceInfo_DeviceSubType = 31
)

// Enum value maps for DeviceInfo_DeviceSubType.
var (
	DeviceInfo_DeviceSubType_name = map[int32]string{
		0:  "DST_Unknown",
		1:  "DST_LG",
		2:  "DST_SAMSUNG",
		3:  "DST_PHILIPS",
		4:  "DST_TOSHIBA",
		5:  "DST_INEXT",
		6:  "DST_INFOMIR",
		7:  "DST_KIVI",
		8:  "DST_NOMI",
		9:  "DST_ERGO",
		10: "DST_VESTEL",
		11: "DST_VEWD",
		12: "DST_FOXXUM",
		13: "DST_ZEASN",
		14: "DST_SONY",
		15: "DST_ROMSAT",
		16: "DST_SAMSUNG_MOBILE",
		17: "DST_AIWA",
		18: "DST_LIBERTON",
		19: "DST_HUAWEI_MOBILE",
		20: "DST_PRESET_APP",
		21: "DST_COMFY_STORE",
		22: "DST_PANASONIC",
		23: "DST_ARCELIK",
		24: "DST_HISENSE",
		25: "DST_OZONE_HD",
		26: "DST_FIRE_TV",
		27: "DST_REALME",
		28: "DST_GAZER",
		29: "DST_TLC",
		30: "DST_TCL",
		31: "DST_ORSAY",
	}
	DeviceInfo_DeviceSubType_value = map[string]int32{
		"DST_Unknown":        0,
		"DST_LG":             1,
		"DST_SAMSUNG":        2,
		"DST_PHILIPS":        3,
		"DST_TOSHIBA":        4,
		"DST_INEXT":          5,
		"DST_INFOMIR":        6,
		"DST_KIVI":           7,
		"DST_NOMI":           8,
		"DST_ERGO":           9,
		"DST_VESTEL":         10,
		"DST_VEWD":           11,
		"DST_FOXXUM":         12,
		"DST_ZEASN":          13,
		"DST_SONY":           14,
		"DST_ROMSAT":         15,
		"DST_SAMSUNG_MOBILE": 16,
		"DST_AIWA":           17,
		"DST_LIBERTON":       18,
		"DST_HUAWEI_MOBILE":  19,
		"DST_PRESET_APP":     20,
		"DST_COMFY_STORE":    21,
		"DST_PANASONIC":      22,
		"DST_ARCELIK":        23,
		"DST_HISENSE":        24,
		"DST_OZONE_HD":       25,
		"DST_FIRE_TV":        26,
		"DST_REALME":         27,
		"DST_GAZER":          28,
		"DST_TLC":            29,
		"DST_TCL":            30,
		"DST_ORSAY":          31,
	}
)

func (x DeviceInfo_DeviceSubType) Enum() *DeviceInfo_DeviceSubType {
	p := new(DeviceInfo_DeviceSubType)
	*p = x
	return p
}

func (x DeviceInfo_DeviceSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceInfo_DeviceSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_device_device_proto_enumTypes[2].Descriptor()
}

func (DeviceInfo_DeviceSubType) Type() protoreflect.EnumType {
	return &file_device_device_proto_enumTypes[2]
}

func (x DeviceInfo_DeviceSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeviceInfo_DeviceSubType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeviceInfo_DeviceSubType(num)
	return nil
}

// Deprecated: Use DeviceInfo_DeviceSubType.Descriptor instead.
func (DeviceInfo_DeviceSubType) EnumDescriptor() ([]byte, []int) {
	return file_device_device_proto_rawDescGZIP(), []int{0, 2}
}

type DeviceInfo_AspectRatio int32

const (
	DeviceInfo_AR_Unknown DeviceInfo_AspectRatio = 0
	DeviceInfo_AR_16_9    DeviceInfo_AspectRatio = 1
	DeviceInfo_AR_4_3     DeviceInfo_AspectRatio = 2
	DeviceInfo_AR_18_9    DeviceInfo_AspectRatio = 3
	DeviceInfo_AR_21_9    DeviceInfo_AspectRatio = 4
	DeviceInfo_AR_39_18   DeviceInfo_AspectRatio = 5
)

// Enum value maps for DeviceInfo_AspectRatio.
var (
	DeviceInfo_AspectRatio_name = map[int32]string{
		0: "AR_Unknown",
		1: "AR_16_9",
		2: "AR_4_3",
		3: "AR_18_9",
		4: "AR_21_9",
		5: "AR_39_18",
	}
	DeviceInfo_AspectRatio_value = map[string]int32{
		"AR_Unknown": 0,
		"AR_16_9":    1,
		"AR_4_3":     2,
		"AR_18_9":    3,
		"AR_21_9":    4,
		"AR_39_18":   5,
	}
)

func (x DeviceInfo_AspectRatio) Enum() *DeviceInfo_AspectRatio {
	p := new(DeviceInfo_AspectRatio)
	*p = x
	return p
}

func (x DeviceInfo_AspectRatio) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceInfo_AspectRatio) Descriptor() protoreflect.EnumDescriptor {
	return file_device_device_proto_enumTypes[3].Descriptor()
}

func (DeviceInfo_AspectRatio) Type() protoreflect.EnumType {
	return &file_device_device_proto_enumTypes[3]
}

func (x DeviceInfo_AspectRatio) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeviceInfo_AspectRatio) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeviceInfo_AspectRatio(num)
	return nil
}

// Deprecated: Use DeviceInfo_AspectRatio.Descriptor instead.
func (DeviceInfo_AspectRatio) EnumDescriptor() ([]byte, []int) {
	return file_device_device_proto_rawDescGZIP(), []int{0, 3}
}

type DeviceInfo_NetworkConnectionType int32

const (
	DeviceInfo_NCT_Unknown  DeviceInfo_NetworkConnectionType = 0
	DeviceInfo_NCT_Ethernet DeviceInfo_NetworkConnectionType = 1
	DeviceInfo_NCT_WiFi     DeviceInfo_NetworkConnectionType = 2
	DeviceInfo_NCT_Cellular DeviceInfo_NetworkConnectionType = 3
)

// Enum value maps for DeviceInfo_NetworkConnectionType.
var (
	DeviceInfo_NetworkConnectionType_name = map[int32]string{
		0: "NCT_Unknown",
		1: "NCT_Ethernet",
		2: "NCT_WiFi",
		3: "NCT_Cellular",
	}
	DeviceInfo_NetworkConnectionType_value = map[string]int32{
		"NCT_Unknown":  0,
		"NCT_Ethernet": 1,
		"NCT_WiFi":     2,
		"NCT_Cellular": 3,
	}
)

func (x DeviceInfo_NetworkConnectionType) Enum() *DeviceInfo_NetworkConnectionType {
	p := new(DeviceInfo_NetworkConnectionType)
	*p = x
	return p
}

func (x DeviceInfo_NetworkConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceInfo_NetworkConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_device_device_proto_enumTypes[4].Descriptor()
}

func (DeviceInfo_NetworkConnectionType) Type() protoreflect.EnumType {
	return &file_device_device_proto_enumTypes[4]
}

func (x DeviceInfo_NetworkConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeviceInfo_NetworkConnectionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeviceInfo_NetworkConnectionType(num)
	return nil
}

// Deprecated: Use DeviceInfo_NetworkConnectionType.Descriptor instead.
func (DeviceInfo_NetworkConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_device_device_proto_rawDescGZIP(), []int{0, 4}
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         *DeviceInfo_DeviceType       `protobuf:"varint,1,req,name=type,enum=device.DeviceInfo_DeviceType" json:"type,omitempty"`
	Mac          *string                      `protobuf:"bytes,2,opt,name=mac" json:"mac,omitempty"`
	Firmware     *DeviceInfo_FirmwareInfo     `protobuf:"bytes,3,opt,name=firmware" json:"firmware,omitempty"`
	SubType      *DeviceInfo_DeviceSubType    `protobuf:"varint,4,opt,name=sub_type,json=subType,enum=device.DeviceInfo_DeviceSubType" json:"sub_type,omitempty"`
	Model        *string                      `protobuf:"bytes,5,opt,name=model" json:"model,omitempty"`
	Uuid         *string                      `protobuf:"bytes,6,opt,name=uuid" json:"uuid,omitempty"`
	ScreenInfo   *DeviceInfo_DeviceScreenInfo `protobuf:"bytes,7,opt,name=screen_info,json=screenInfo" json:"screen_info,omitempty"`
	Application  *application.ApplicationInfo `protobuf:"bytes,8,opt,name=application" json:"application,omitempty"`
	Vendor       *string                      `protobuf:"bytes,9,opt,name=vendor" json:"vendor,omitempty"`
	SupportedDrm *DeviceInfo_SupportedDRM     `protobuf:"bytes,10,opt,name=supported_drm,json=supportedDrm" json:"supported_drm,omitempty"`
	Guid         *string                      `protobuf:"bytes,11,opt,name=guid" json:"guid,omitempty"`
	System       *string                      `protobuf:"bytes,12,opt,name=system" json:"system,omitempty"`
	SystemInfo   *DeviceInfo_SystemInfo       `protobuf:"bytes,13,opt,name=system_info,json=systemInfo" json:"system_info,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_device_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_device_device_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceInfo) GetType() DeviceInfo_DeviceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DeviceInfo_DT_Unknown
}

func (x *DeviceInfo) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *DeviceInfo) GetFirmware() *DeviceInfo_FirmwareInfo {
	if x != nil {
		return x.Firmware
	}
	return nil
}

func (x *DeviceInfo) GetSubType() DeviceInfo_DeviceSubType {
	if x != nil && x.SubType != nil {
		return *x.SubType
	}
	return DeviceInfo_DST_Unknown
}

func (x *DeviceInfo) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *DeviceInfo) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *DeviceInfo) GetScreenInfo() *DeviceInfo_DeviceScreenInfo {
	if x != nil {
		return x.ScreenInfo
	}
	return nil
}

func (x *DeviceInfo) GetApplication() *application.ApplicationInfo {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *DeviceInfo) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

func (x *DeviceInfo) GetSupportedDrm() *DeviceInfo_SupportedDRM {
	if x != nil {
		return x.SupportedDrm
	}
	return nil
}

func (x *DeviceInfo) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *DeviceInfo) GetSystem() string {
	if x != nil && x.System != nil {
		return *x.System
	}
	return ""
}

func (x *DeviceInfo) GetSystemInfo() *DeviceInfo_SystemInfo {
	if x != nil {
		return x.SystemInfo
	}
	return nil
}

type DeviceInfo_DeviceScreenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width       *int32                  `protobuf:"varint,1,req,name=width" json:"width,omitempty"`
	Height      *int32                  `protobuf:"varint,2,req,name=height" json:"height,omitempty"`
	AspectRatio *DeviceInfo_AspectRatio `protobuf:"varint,3,opt,name=aspectRatio,enum=device.DeviceInfo_AspectRatio" json:"aspectRatio,omitempty"`
}

func (x *DeviceInfo_DeviceScreenInfo) Reset() {
	*x = DeviceInfo_DeviceScreenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo_DeviceScreenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo_DeviceScreenInfo) ProtoMessage() {}

func (x *DeviceInfo_DeviceScreenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_device_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo_DeviceScreenInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo_DeviceScreenInfo) Descriptor() ([]byte, []int) {
	return file_device_device_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DeviceInfo_DeviceScreenInfo) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *DeviceInfo_DeviceScreenInfo) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *DeviceInfo_DeviceScreenInfo) GetAspectRatio() DeviceInfo_AspectRatio {
	if x != nil && x.AspectRatio != nil {
		return *x.AspectRatio
	}
	return DeviceInfo_AR_Unknown
}

type DeviceInfo_FirmwareModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	VersionCode *int32  `protobuf:"varint,2,req,name=versionCode" json:"versionCode,omitempty"`
}

func (x *DeviceInfo_FirmwareModule) Reset() {
	*x = DeviceInfo_FirmwareModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo_FirmwareModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo_FirmwareModule) ProtoMessage() {}

func (x *DeviceInfo_FirmwareModule) ProtoReflect() protoreflect.Message {
	mi := &file_device_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo_FirmwareModule.ProtoReflect.Descriptor instead.
func (*DeviceInfo_FirmwareModule) Descriptor() ([]byte, []int) {
	return file_device_device_proto_rawDescGZIP(), []int{0, 1}
}

func (x *DeviceInfo_FirmwareModule) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DeviceInfo_FirmwareModule) GetVersionCode() int32 {
	if x != nil && x.VersionCode != nil {
		return *x.VersionCode
	}
	return 0
}

type DeviceInfo_FirmwareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionCode   *int32                       `protobuf:"varint,1,req,name=versionCode" json:"versionCode,omitempty"`
	VersionString *string                      `protobuf:"bytes,2,req,name=versionString" json:"versionString,omitempty"`
	Modules       []*DeviceInfo_FirmwareModule `protobuf:"bytes,3,rep,name=modules" json:"modules,omitempty"`
}

func (x *DeviceInfo_FirmwareInfo) Reset() {
	*x = DeviceInfo_FirmwareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo_FirmwareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo_FirmwareInfo) ProtoMessage() {}

func (x *DeviceInfo_FirmwareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_device_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo_FirmwareInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo_FirmwareInfo) Descriptor() ([]byte, []int) {
	return file_device_device_proto_rawDescGZIP(), []int{0, 2}
}

func (x *DeviceInfo_FirmwareInfo) GetVersionCode() int32 {
	if x != nil && x.VersionCode != nil {
		return *x.VersionCode
	}
	return 0
}

func (x *DeviceInfo_FirmwareInfo) GetVersionString() string {
	if x != nil && x.VersionString != nil {
		return *x.VersionString
	}
	return ""
}

func (x *DeviceInfo_FirmwareInfo) GetModules() []*DeviceInfo_FirmwareModule {
	if x != nil {
		return x.Modules
	}
	return nil
}

type DeviceInfo_SupportedDRM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aes_128         *bool `protobuf:"varint,1,opt,name=aes_128,json=aes128" json:"aes_128,omitempty"`
	WidevineModular *bool `protobuf:"varint,2,opt,name=widevine_modular,json=widevineModular" json:"widevine_modular,omitempty"`
	WidevineClassic *bool `protobuf:"varint,3,opt,name=widevine_classic,json=widevineClassic" json:"widevine_classic,omitempty"`
	PlayReady       *bool `protobuf:"varint,4,opt,name=play_ready,json=playReady" json:"play_ready,omitempty"`
	FairPlay        *bool `protobuf:"varint,5,opt,name=fair_play,json=fairPlay" json:"fair_play,omitempty"`
}

func (x *DeviceInfo_SupportedDRM) Reset() {
	*x = DeviceInfo_SupportedDRM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo_SupportedDRM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo_SupportedDRM) ProtoMessage() {}

func (x *DeviceInfo_SupportedDRM) ProtoReflect() protoreflect.Message {
	mi := &file_device_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo_SupportedDRM.ProtoReflect.Descriptor instead.
func (*DeviceInfo_SupportedDRM) Descriptor() ([]byte, []int) {
	return file_device_device_proto_rawDescGZIP(), []int{0, 3}
}

func (x *DeviceInfo_SupportedDRM) GetAes_128() bool {
	if x != nil && x.Aes_128 != nil {
		return *x.Aes_128
	}
	return false
}

func (x *DeviceInfo_SupportedDRM) GetWidevineModular() bool {
	if x != nil && x.WidevineModular != nil {
		return *x.WidevineModular
	}
	return false
}

func (x *DeviceInfo_SupportedDRM) GetWidevineClassic() bool {
	if x != nil && x.WidevineClassic != nil {
		return *x.WidevineClassic
	}
	return false
}

func (x *DeviceInfo_SupportedDRM) GetPlayReady() bool {
	if x != nil && x.PlayReady != nil {
		return *x.PlayReady
	}
	return false
}

func (x *DeviceInfo_SupportedDRM) GetFairPlay() bool {
	if x != nil && x.FairPlay != nil {
		return *x.FairPlay
	}
	return false
}

type DeviceInfo_SystemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkConnectionType *DeviceInfo_NetworkConnectionType `protobuf:"varint,1,opt,name=network_connection_type,json=networkConnectionType,enum=device.DeviceInfo_NetworkConnectionType" json:"network_connection_type,omitempty"`
	OsVersion             *string                           `protobuf:"bytes,2,opt,name=os_version,json=osVersion" json:"os_version,omitempty"`
	TotalMemory           *int32                            `protobuf:"varint,3,opt,name=total_memory,json=totalMemory" json:"total_memory,omitempty"`
	Hardware              *string                           `protobuf:"bytes,4,opt,name=hardware" json:"hardware,omitempty"`
}

func (x *DeviceInfo_SystemInfo) Reset() {
	*x = DeviceInfo_SystemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo_SystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo_SystemInfo) ProtoMessage() {}

func (x *DeviceInfo_SystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_device_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo_SystemInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo_SystemInfo) Descriptor() ([]byte, []int) {
	return file_device_device_proto_rawDescGZIP(), []int{0, 4}
}

func (x *DeviceInfo_SystemInfo) GetNetworkConnectionType() DeviceInfo_NetworkConnectionType {
	if x != nil && x.NetworkConnectionType != nil {
		return *x.NetworkConnectionType
	}
	return DeviceInfo_NCT_Unknown
}

func (x *DeviceInfo_SystemInfo) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

func (x *DeviceInfo_SystemInfo) GetTotalMemory() int32 {
	if x != nil && x.TotalMemory != nil {
		return *x.TotalMemory
	}
	return 0
}

func (x *DeviceInfo_SystemInfo) GetHardware() string {
	if x != nil && x.Hardware != nil {
		return *x.Hardware
	}
	return ""
}

var File_device_device_proto protoreflect.FileDescriptor

var file_device_device_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x13, 0x0a,
	0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63,
	0x12, 0x3b, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x3b, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x52, 0x4d, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x82, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x0b, 0x61, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x1a, 0x46, 0x0a, 0x0e, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x1a, 0x93, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x07, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0xb9, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x52, 0x4d, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x65, 0x73, 0x5f,
	0x31, 0x32, 0x38, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x65, 0x73, 0x31, 0x32,
	0x38, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x69, 0x64,
	0x65, 0x76, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x10,
	0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x72, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x69, 0x72, 0x50,
	0x6c, 0x61, 0x79, 0x1a, 0xcc, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x22, 0x3b, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x57, 0x65, 0x62, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x54, 0x56, 0x10, 0x03, 0x22,
	0x8b, 0x03, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x54, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x54, 0x5f, 0x44, 0x49, 0x42, 0x5f, 0x31, 0x32, 0x30, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x44, 0x54, 0x5f, 0x49, 0x50, 0x54, 0x56, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x54, 0x5f, 0x4d, 0x41, 0x47, 0x32, 0x30, 0x30, 0x10,
	0x07, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x54, 0x5f, 0x4d, 0x41, 0x47, 0x32, 0x35, 0x30, 0x5f, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x54, 0x5f, 0x4d, 0x41, 0x47,
	0x32, 0x35, 0x30, 0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x54,
	0x5f, 0x48, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x48, 0x44, 0x36, 0x30, 0x30, 0x41, 0x10,
	0x0a, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x54, 0x5f, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x5f, 0x53,
	0x54, 0x42, 0x5f, 0x45, 0x6d, 0x75, 0x6c, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x54, 0x5f,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x54, 0x56, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x54, 0x5f,
	0x69, 0x4e, 0x65, 0x78, 0x74, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x54, 0x5f, 0x4d, 0x33,
	0x55, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x54, 0x5f, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x54, 0x56, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x54, 0x5f, 0x49, 0x4f, 0x53, 0x5f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x54, 0x5f, 0x4d,
	0x61, 0x63, 0x4f, 0x53, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x12, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x54, 0x5f, 0x4b, 0x69, 0x76, 0x69, 0x5f, 0x54, 0x56, 0x10, 0x13, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x54, 0x5f, 0x47, 0x58, 0x5f, 0x53, 0x54, 0x42, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x54, 0x5f, 0x4e, 0x4f, 0x4d, 0x49, 0x5f, 0x54, 0x56, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e,
	0x44, 0x54, 0x5f, 0x57, 0x65, 0x62, 0x5f, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x10, 0x16,
	0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x54, 0x5f, 0x45, 0x52, 0x47, 0x4f, 0x5f, 0x54, 0x56, 0x10, 0x17,
	0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x54, 0x5f, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x54, 0x56, 0x10, 0x18,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x54, 0x5f, 0x58, 0x62, 0x6f, 0x78, 0x10, 0x19, 0x22, 0x9c, 0x04,
	0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x44, 0x53, 0x54, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x53, 0x54, 0x5f, 0x4c, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x44, 0x53, 0x54, 0x5f, 0x53, 0x41, 0x4d, 0x53, 0x55, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x49, 0x4c, 0x49, 0x50, 0x53, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x53, 0x48, 0x49, 0x42, 0x41, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x45, 0x58, 0x54, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x4d, 0x49, 0x52, 0x10, 0x06, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x53, 0x54, 0x5f, 0x4b, 0x49, 0x56, 0x49, 0x10, 0x07, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x4d, 0x49, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x53, 0x54, 0x5f, 0x45, 0x52, 0x47, 0x4f, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x53, 0x54,
	0x5f, 0x56, 0x45, 0x53, 0x54, 0x45, 0x4c, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x53, 0x54,
	0x5f, 0x56, 0x45, 0x57, 0x44, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x53, 0x54, 0x5f, 0x46,
	0x4f, 0x58, 0x58, 0x55, 0x4d, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x53, 0x54, 0x5f, 0x5a,
	0x45, 0x41, 0x53, 0x4e, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x53, 0x54, 0x5f, 0x53, 0x4f,
	0x4e, 0x59, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x4d, 0x53,
	0x41, 0x54, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x53, 0x54, 0x5f, 0x53, 0x41, 0x4d, 0x53,
	0x55, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x53, 0x54, 0x5f, 0x41, 0x49, 0x57, 0x41, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x53,
	0x54, 0x5f, 0x4c, 0x49, 0x42, 0x45, 0x52, 0x54, 0x4f, 0x4e, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x53, 0x54, 0x5f, 0x48, 0x55, 0x41, 0x57, 0x45, 0x49, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c,
	0x45, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x53, 0x54, 0x5f, 0x43,
	0x4f, 0x4d, 0x46, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d,
	0x44, 0x53, 0x54, 0x5f, 0x50, 0x41, 0x4e, 0x41, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x10, 0x16, 0x12,
	0x0f, 0x0a, 0x0b, 0x44, 0x53, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x45, 0x4c, 0x49, 0x4b, 0x10, 0x17,
	0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x53, 0x54, 0x5f, 0x48, 0x49, 0x53, 0x45, 0x4e, 0x53, 0x45, 0x10,
	0x18, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x53, 0x54, 0x5f, 0x4f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x48,
	0x44, 0x10, 0x19, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f,
	0x54, 0x56, 0x10, 0x1a, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x4c,
	0x4d, 0x45, 0x10, 0x1b, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x53, 0x54, 0x5f, 0x47, 0x41, 0x5a, 0x45,
	0x52, 0x10, 0x1c, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x53, 0x54, 0x5f, 0x54, 0x4c, 0x43, 0x10, 0x1d,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x53, 0x54, 0x5f, 0x54, 0x43, 0x4c, 0x10, 0x1e, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x53, 0x41, 0x59, 0x10, 0x1f, 0x22, 0x5e, 0x0a, 0x0b,
	0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x52, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x52, 0x5f, 0x31, 0x36, 0x5f, 0x39, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x52, 0x5f, 0x34,
	0x5f, 0x33, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x5f, 0x31, 0x38, 0x5f, 0x39, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x5f, 0x32, 0x31, 0x5f, 0x39, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x52, 0x5f, 0x33, 0x39, 0x5f, 0x31, 0x38, 0x10, 0x05, 0x22, 0x5a, 0x0a, 0x15,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x43, 0x54, 0x5f, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x43, 0x54, 0x5f, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x43, 0x54, 0x5f,
	0x57, 0x69, 0x46, 0x69, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x43, 0x54, 0x5f, 0x43, 0x65,
	0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x10, 0x03, 0x42, 0x40, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e,
	0x75, 0x61, 0x2e, 0x6d, 0x79, 0x74, 0x72, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x76, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x1c, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x74, 0x76, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
}

var (
	file_device_device_proto_rawDescOnce sync.Once
	file_device_device_proto_rawDescData = file_device_device_proto_rawDesc
)

func file_device_device_proto_rawDescGZIP() []byte {
	file_device_device_proto_rawDescOnce.Do(func() {
		file_device_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_device_device_proto_rawDescData)
	})
	return file_device_device_proto_rawDescData
}

var file_device_device_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_device_device_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_device_device_proto_goTypes = []interface{}{
	(DeviceInfo_Platform)(0),              // 0: device.DeviceInfo.Platform
	(DeviceInfo_DeviceType)(0),            // 1: device.DeviceInfo.DeviceType
	(DeviceInfo_DeviceSubType)(0),         // 2: device.DeviceInfo.DeviceSubType
	(DeviceInfo_AspectRatio)(0),           // 3: device.DeviceInfo.AspectRatio
	(DeviceInfo_NetworkConnectionType)(0), // 4: device.DeviceInfo.NetworkConnectionType
	(*DeviceInfo)(nil),                    // 5: device.DeviceInfo
	(*DeviceInfo_DeviceScreenInfo)(nil),   // 6: device.DeviceInfo.DeviceScreenInfo
	(*DeviceInfo_FirmwareModule)(nil),     // 7: device.DeviceInfo.FirmwareModule
	(*DeviceInfo_FirmwareInfo)(nil),       // 8: device.DeviceInfo.FirmwareInfo
	(*DeviceInfo_SupportedDRM)(nil),       // 9: device.DeviceInfo.SupportedDRM
	(*DeviceInfo_SystemInfo)(nil),         // 10: device.DeviceInfo.SystemInfo
	(*application.ApplicationInfo)(nil),   // 11: application.ApplicationInfo
}
var file_device_device_proto_depIdxs = []int32{
	1,  // 0: device.DeviceInfo.type:type_name -> device.DeviceInfo.DeviceType
	8,  // 1: device.DeviceInfo.firmware:type_name -> device.DeviceInfo.FirmwareInfo
	2,  // 2: device.DeviceInfo.sub_type:type_name -> device.DeviceInfo.DeviceSubType
	6,  // 3: device.DeviceInfo.screen_info:type_name -> device.DeviceInfo.DeviceScreenInfo
	11, // 4: device.DeviceInfo.application:type_name -> application.ApplicationInfo
	9,  // 5: device.DeviceInfo.supported_drm:type_name -> device.DeviceInfo.SupportedDRM
	10, // 6: device.DeviceInfo.system_info:type_name -> device.DeviceInfo.SystemInfo
	3,  // 7: device.DeviceInfo.DeviceScreenInfo.aspectRatio:type_name -> device.DeviceInfo.AspectRatio
	7,  // 8: device.DeviceInfo.FirmwareInfo.modules:type_name -> device.DeviceInfo.FirmwareModule
	4,  // 9: device.DeviceInfo.SystemInfo.network_connection_type:type_name -> device.DeviceInfo.NetworkConnectionType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_device_device_proto_init() }
func file_device_device_proto_init() {
	if File_device_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_device_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo_DeviceScreenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo_FirmwareModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo_FirmwareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo_SupportedDRM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo_SystemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_device_device_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_device_device_proto_goTypes,
		DependencyIndexes: file_device_device_proto_depIdxs,
		EnumInfos:         file_device_device_proto_enumTypes,
		MessageInfos:      file_device_device_proto_msgTypes,
	}.Build()
	File_device_device_proto = out.File
	file_device_device_proto_rawDesc = nil
	file_device_device_proto_goTypes = nil
	file_device_device_proto_depIdxs = nil
}
