// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: authentication_service_v2/authentication_service.proto

package authentication_service_v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationServiceClient is the client API for AuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationServiceClient interface {
	GetAvailableMethods(ctx context.Context, in *GetAvailableMethodsRequest, opts ...grpc.CallOption) (*GetAvailableMethodsResponse, error)
	Issue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*IssueResponse, error)
	Revoke(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*RevokeResponse, error)
	Exchange(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeResponse, error)
	CreateOneTimeToken(ctx context.Context, in *CreateOneTimeTokenRequest, opts ...grpc.CallOption) (*CreateOneTimeTokenResponse, error)
	// ExchangeOneTimeToken is designed to be used internally
	ExchangeOneTimeToken(ctx context.Context, in *ExchangeOneTimeTokenRequest, opts ...grpc.CallOption) (*ExchangeOneTimeTokenResponse, error)
	Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServiceClient(cc grpc.ClientConnInterface) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) GetAvailableMethods(ctx context.Context, in *GetAvailableMethodsRequest, opts ...grpc.CallOption) (*GetAvailableMethodsResponse, error) {
	out := new(GetAvailableMethodsResponse)
	err := c.cc.Invoke(ctx, "/authentication_service_v2.AuthenticationService/GetAvailableMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) Issue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*IssueResponse, error) {
	out := new(IssueResponse)
	err := c.cc.Invoke(ctx, "/authentication_service_v2.AuthenticationService/Issue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) Revoke(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*RevokeResponse, error) {
	out := new(RevokeResponse)
	err := c.cc.Invoke(ctx, "/authentication_service_v2.AuthenticationService/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) Exchange(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeResponse, error) {
	out := new(ExchangeResponse)
	err := c.cc.Invoke(ctx, "/authentication_service_v2.AuthenticationService/Exchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) CreateOneTimeToken(ctx context.Context, in *CreateOneTimeTokenRequest, opts ...grpc.CallOption) (*CreateOneTimeTokenResponse, error) {
	out := new(CreateOneTimeTokenResponse)
	err := c.cc.Invoke(ctx, "/authentication_service_v2.AuthenticationService/CreateOneTimeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) ExchangeOneTimeToken(ctx context.Context, in *ExchangeOneTimeTokenRequest, opts ...grpc.CallOption) (*ExchangeOneTimeTokenResponse, error) {
	out := new(ExchangeOneTimeTokenResponse)
	err := c.cc.Invoke(ctx, "/authentication_service_v2.AuthenticationService/ExchangeOneTimeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/authentication_service_v2.AuthenticationService/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/authentication_service_v2.AuthenticationService/UpdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServiceServer is the server API for AuthenticationService service.
// All implementations must embed UnimplementedAuthenticationServiceServer
// for forward compatibility
type AuthenticationServiceServer interface {
	GetAvailableMethods(context.Context, *GetAvailableMethodsRequest) (*GetAvailableMethodsResponse, error)
	Issue(context.Context, *IssueRequest) (*IssueResponse, error)
	Revoke(context.Context, *RevokeRequest) (*RevokeResponse, error)
	Exchange(context.Context, *ExchangeRequest) (*ExchangeResponse, error)
	CreateOneTimeToken(context.Context, *CreateOneTimeTokenRequest) (*CreateOneTimeTokenResponse, error)
	// ExchangeOneTimeToken is designed to be used internally
	ExchangeOneTimeToken(context.Context, *ExchangeOneTimeTokenRequest) (*ExchangeOneTimeTokenResponse, error)
	Token(context.Context, *TokenRequest) (*TokenResponse, error)
	UpdateToken(context.Context, *UpdateTokenRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAuthenticationServiceServer()
}

// UnimplementedAuthenticationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServiceServer struct {
}

func (UnimplementedAuthenticationServiceServer) GetAvailableMethods(context.Context, *GetAvailableMethodsRequest) (*GetAvailableMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableMethods not implemented")
}
func (UnimplementedAuthenticationServiceServer) Issue(context.Context, *IssueRequest) (*IssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Issue not implemented")
}
func (UnimplementedAuthenticationServiceServer) Revoke(context.Context, *RevokeRequest) (*RevokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (UnimplementedAuthenticationServiceServer) Exchange(context.Context, *ExchangeRequest) (*ExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedAuthenticationServiceServer) CreateOneTimeToken(context.Context, *CreateOneTimeTokenRequest) (*CreateOneTimeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneTimeToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) ExchangeOneTimeToken(context.Context, *ExchangeOneTimeTokenRequest) (*ExchangeOneTimeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeOneTimeToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) Token(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedAuthenticationServiceServer) UpdateToken(context.Context, *UpdateTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) mustEmbedUnimplementedAuthenticationServiceServer() {}

// UnsafeAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServiceServer will
// result in compilation errors.
type UnsafeAuthenticationServiceServer interface {
	mustEmbedUnimplementedAuthenticationServiceServer()
}

func RegisterAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AuthenticationServiceServer) {
	s.RegisterService(&AuthenticationService_ServiceDesc, srv)
}

func _AuthenticationService_GetAvailableMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetAvailableMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication_service_v2.AuthenticationService/GetAvailableMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetAvailableMethods(ctx, req.(*GetAvailableMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_Issue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Issue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication_service_v2.AuthenticationService/Issue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Issue(ctx, req.(*IssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication_service_v2.AuthenticationService/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Revoke(ctx, req.(*RevokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_Exchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Exchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication_service_v2.AuthenticationService/Exchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Exchange(ctx, req.(*ExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_CreateOneTimeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneTimeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).CreateOneTimeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication_service_v2.AuthenticationService/CreateOneTimeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).CreateOneTimeToken(ctx, req.(*CreateOneTimeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_ExchangeOneTimeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeOneTimeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).ExchangeOneTimeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication_service_v2.AuthenticationService/ExchangeOneTimeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).ExchangeOneTimeToken(ctx, req.(*ExchangeOneTimeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication_service_v2.AuthenticationService/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Token(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication_service_v2.AuthenticationService/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).UpdateToken(ctx, req.(*UpdateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationService_ServiceDesc is the grpc.ServiceDesc for AuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authentication_service_v2.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableMethods",
			Handler:    _AuthenticationService_GetAvailableMethods_Handler,
		},
		{
			MethodName: "Issue",
			Handler:    _AuthenticationService_Issue_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _AuthenticationService_Revoke_Handler,
		},
		{
			MethodName: "Exchange",
			Handler:    _AuthenticationService_Exchange_Handler,
		},
		{
			MethodName: "CreateOneTimeToken",
			Handler:    _AuthenticationService_CreateOneTimeToken_Handler,
		},
		{
			MethodName: "ExchangeOneTimeToken",
			Handler:    _AuthenticationService_ExchangeOneTimeToken_Handler,
		},
		{
			MethodName: "Token",
			Handler:    _AuthenticationService_Token_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _AuthenticationService_UpdateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authentication_service_v2/authentication_service.proto",
}
