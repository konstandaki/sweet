// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: movie_service/movie_service.proto

package movie_service

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LinkType int32

const (
	LinkType_HLS  LinkType = 0
	LinkType_DASH LinkType = 1
	LinkType_MSS  LinkType = 2
)

// Enum value maps for LinkType.
var (
	LinkType_name = map[int32]string{
		0: "HLS",
		1: "DASH",
		2: "MSS",
	}
	LinkType_value = map[string]int32{
		"HLS":  0,
		"DASH": 1,
		"MSS":  2,
	}
)

func (x LinkType) Enum() *LinkType {
	p := new(LinkType)
	*p = x
	return p
}

func (x LinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[0].Descriptor()
}

func (LinkType) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[0]
}

func (x LinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LinkType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LinkType(num)
	return nil
}

// Deprecated: Use LinkType.Descriptor instead.
func (LinkType) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{0}
}

type Page int32

const (
	Page_HOME     Page = 0
	Page_MOVIE    Page = 1
	Page_PREMIERE Page = 2
	Page_SERIES   Page = 3
	Page_CARTOON  Page = 4
)

// Enum value maps for Page.
var (
	Page_name = map[int32]string{
		0: "HOME",
		1: "MOVIE",
		2: "PREMIERE",
		3: "SERIES",
		4: "CARTOON",
	}
	Page_value = map[string]int32{
		"HOME":     0,
		"MOVIE":    1,
		"PREMIERE": 2,
		"SERIES":   3,
		"CARTOON":  4,
	}
)

func (x Page) Enum() *Page {
	p := new(Page)
	*p = x
	return p
}

func (x Page) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Page) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[1].Descriptor()
}

func (Page) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[1]
}

func (x Page) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Page) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Page(num)
	return nil
}

// Deprecated: Use Page.Descriptor instead.
func (Page) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{1}
}

type PromoBannerAction int32

const (
	PromoBannerAction_SHOW_CHANNEL          PromoBannerAction = 0
	PromoBannerAction_SHOW_MOVIE            PromoBannerAction = 1
	PromoBannerAction_SHOW_PREMIERE         PromoBannerAction = 2
	PromoBannerAction_SHOW_COLLECTION       PromoBannerAction = 3
	PromoBannerAction_PROPOSE_TARIFF        PromoBannerAction = 4
	PromoBannerAction_PROPOSE_SUBSCRIPTION  PromoBannerAction = 5
	PromoBannerAction_PROPOSE_SERVICE       PromoBannerAction = 6
	PromoBannerAction_PROPOSE_PAYMENT       PromoBannerAction = 7
	PromoBannerAction_ENTER_PROMOCODE       PromoBannerAction = 8
	PromoBannerAction_ENTER_MOVIE_PROMOCODE PromoBannerAction = 9
	PromoBannerAction_OPEN_WEB_SITE         PromoBannerAction = 10
	PromoBannerAction_RATE_APPLICATION      PromoBannerAction = 11
	PromoBannerAction_INVITE_FRIEND         PromoBannerAction = 12
	PromoBannerAction_BIND_NEW_DEVICE       PromoBannerAction = 13
	PromoBannerAction_OPEN_CHATBOT          PromoBannerAction = 14
	PromoBannerAction_FILL_USER_DATA        PromoBannerAction = 15
	PromoBannerAction_SHOW_INFO             PromoBannerAction = 16
	PromoBannerAction_SHOW_PROMOTIONS       PromoBannerAction = 17
	PromoBannerAction_SIGNUP_USER           PromoBannerAction = 18
	PromoBannerAction_START_TUTORIAL        PromoBannerAction = 19
)

// Enum value maps for PromoBannerAction.
var (
	PromoBannerAction_name = map[int32]string{
		0:  "SHOW_CHANNEL",
		1:  "SHOW_MOVIE",
		2:  "SHOW_PREMIERE",
		3:  "SHOW_COLLECTION",
		4:  "PROPOSE_TARIFF",
		5:  "PROPOSE_SUBSCRIPTION",
		6:  "PROPOSE_SERVICE",
		7:  "PROPOSE_PAYMENT",
		8:  "ENTER_PROMOCODE",
		9:  "ENTER_MOVIE_PROMOCODE",
		10: "OPEN_WEB_SITE",
		11: "RATE_APPLICATION",
		12: "INVITE_FRIEND",
		13: "BIND_NEW_DEVICE",
		14: "OPEN_CHATBOT",
		15: "FILL_USER_DATA",
		16: "SHOW_INFO",
		17: "SHOW_PROMOTIONS",
		18: "SIGNUP_USER",
		19: "START_TUTORIAL",
	}
	PromoBannerAction_value = map[string]int32{
		"SHOW_CHANNEL":          0,
		"SHOW_MOVIE":            1,
		"SHOW_PREMIERE":         2,
		"SHOW_COLLECTION":       3,
		"PROPOSE_TARIFF":        4,
		"PROPOSE_SUBSCRIPTION":  5,
		"PROPOSE_SERVICE":       6,
		"PROPOSE_PAYMENT":       7,
		"ENTER_PROMOCODE":       8,
		"ENTER_MOVIE_PROMOCODE": 9,
		"OPEN_WEB_SITE":         10,
		"RATE_APPLICATION":      11,
		"INVITE_FRIEND":         12,
		"BIND_NEW_DEVICE":       13,
		"OPEN_CHATBOT":          14,
		"FILL_USER_DATA":        15,
		"SHOW_INFO":             16,
		"SHOW_PROMOTIONS":       17,
		"SIGNUP_USER":           18,
		"START_TUTORIAL":        19,
	}
)

func (x PromoBannerAction) Enum() *PromoBannerAction {
	p := new(PromoBannerAction)
	*p = x
	return p
}

func (x PromoBannerAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PromoBannerAction) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[2].Descriptor()
}

func (PromoBannerAction) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[2]
}

func (x PromoBannerAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PromoBannerAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PromoBannerAction(num)
	return nil
}

// Deprecated: Use PromoBannerAction.Descriptor instead.
func (PromoBannerAction) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{2}
}

type Rating int32

const (
	Rating_None    Rating = 0
	Rating_Like    Rating = 1
	Rating_Dislike Rating = 2
)

// Enum value maps for Rating.
var (
	Rating_name = map[int32]string{
		0: "None",
		1: "Like",
		2: "Dislike",
	}
	Rating_value = map[string]int32{
		"None":    0,
		"Like":    1,
		"Dislike": 2,
	}
)

func (x Rating) Enum() *Rating {
	p := new(Rating)
	*p = x
	return p
}

func (x Rating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rating) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[3].Descriptor()
}

func (Rating) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[3]
}

func (x Rating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Rating) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Rating(num)
	return nil
}

// Deprecated: Use Rating.Descriptor instead.
func (Rating) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{3}
}

type Section_Type int32

const (
	Section_MAIN      Section_Type = 0
	Section_TV        Section_Type = 1
	Section_CINEMA    Section_Type = 2
	Section_PREMIERES Section_Type = 3
	Section_SERIES    Section_Type = 4
	Section_CARTOONS  Section_Type = 5
	Section_PROFILE   Section_Type = 6
	Section_CATALOG   Section_Type = 7
	Section_MY_VIDEOS Section_Type = 8
)

// Enum value maps for Section_Type.
var (
	Section_Type_name = map[int32]string{
		0: "MAIN",
		1: "TV",
		2: "CINEMA",
		3: "PREMIERES",
		4: "SERIES",
		5: "CARTOONS",
		6: "PROFILE",
		7: "CATALOG",
		8: "MY_VIDEOS",
	}
	Section_Type_value = map[string]int32{
		"MAIN":      0,
		"TV":        1,
		"CINEMA":    2,
		"PREMIERES": 3,
		"SERIES":    4,
		"CARTOONS":  5,
		"PROFILE":   6,
		"CATALOG":   7,
		"MY_VIDEOS": 8,
	}
)

func (x Section_Type) Enum() *Section_Type {
	p := new(Section_Type)
	*p = x
	return p
}

func (x Section_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Section_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[4].Descriptor()
}

func (Section_Type) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[4]
}

func (x Section_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Section_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Section_Type(num)
	return nil
}

// Deprecated: Use Section_Type.Descriptor instead.
func (Section_Type) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{5, 0}
}

type CabSectionItem_Type int32

const (
	// PersonalData
	CabSectionItem_BalanceTopUpButton CabSectionItem_Type = 0
	CabSectionItem_BalanceInfo        CabSectionItem_Type = 1
	CabSectionItem_UserIDInfo         CabSectionItem_Type = 2
	CabSectionItem_PaymentInfo        CabSectionItem_Type = 3
	CabSectionItem_TariffInfo         CabSectionItem_Type = 4
	CabSectionItem_StatusInfo         CabSectionItem_Type = 5
	CabSectionItem_ServicesInfo       CabSectionItem_Type = 6
	// Promo
	CabSectionItem_Promotions        CabSectionItem_Type = 7
	CabSectionItem_PromoCodes        CabSectionItem_Type = 8
	CabSectionItem_InviteFriend      CabSectionItem_Type = 9
	CabSectionItem_PurchaseSetTopBox CabSectionItem_Type = 10
	// Settings
	CabSectionItem_SubscriptionSettings   CabSectionItem_Type = 11
	CabSectionItem_PayAccountUUIDSettings CabSectionItem_Type = 12
	// PersonalData
	CabSectionItem_PayYourTariffButton CabSectionItem_Type = 13
)

// Enum value maps for CabSectionItem_Type.
var (
	CabSectionItem_Type_name = map[int32]string{
		0:  "BalanceTopUpButton",
		1:  "BalanceInfo",
		2:  "UserIDInfo",
		3:  "PaymentInfo",
		4:  "TariffInfo",
		5:  "StatusInfo",
		6:  "ServicesInfo",
		7:  "Promotions",
		8:  "PromoCodes",
		9:  "InviteFriend",
		10: "PurchaseSetTopBox",
		11: "SubscriptionSettings",
		12: "PayAccountUUIDSettings",
		13: "PayYourTariffButton",
	}
	CabSectionItem_Type_value = map[string]int32{
		"BalanceTopUpButton":     0,
		"BalanceInfo":            1,
		"UserIDInfo":             2,
		"PaymentInfo":            3,
		"TariffInfo":             4,
		"StatusInfo":             5,
		"ServicesInfo":           6,
		"Promotions":             7,
		"PromoCodes":             8,
		"InviteFriend":           9,
		"PurchaseSetTopBox":      10,
		"SubscriptionSettings":   11,
		"PayAccountUUIDSettings": 12,
		"PayYourTariffButton":    13,
	}
)

func (x CabSectionItem_Type) Enum() *CabSectionItem_Type {
	p := new(CabSectionItem_Type)
	*p = x
	return p
}

func (x CabSectionItem_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CabSectionItem_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[5].Descriptor()
}

func (CabSectionItem_Type) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[5]
}

func (x CabSectionItem_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CabSectionItem_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CabSectionItem_Type(num)
	return nil
}

// Deprecated: Use CabSectionItem_Type.Descriptor instead.
func (CabSectionItem_Type) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{7, 0}
}

type CabSection_Type int32

const (
	CabSection_PersonalData    CabSection_Type = 0
	CabSection_Promo           CabSection_Type = 1
	CabSection_Tariffs         CabSection_Type = 2
	CabSection_Services        CabSection_Type = 3
	CabSection_ParentalControl CabSection_Type = 4
	CabSection_Settings        CabSection_Type = 5
)

// Enum value maps for CabSection_Type.
var (
	CabSection_Type_name = map[int32]string{
		0: "PersonalData",
		1: "Promo",
		2: "Tariffs",
		3: "Services",
		4: "ParentalControl",
		5: "Settings",
	}
	CabSection_Type_value = map[string]int32{
		"PersonalData":    0,
		"Promo":           1,
		"Tariffs":         2,
		"Services":        3,
		"ParentalControl": 4,
		"Settings":        5,
	}
)

func (x CabSection_Type) Enum() *CabSection_Type {
	p := new(CabSection_Type)
	*p = x
	return p
}

func (x CabSection_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CabSection_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[6].Descriptor()
}

func (CabSection_Type) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[6]
}

func (x CabSection_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CabSection_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CabSection_Type(num)
	return nil
}

// Deprecated: Use CabSection_Type.Descriptor instead.
func (CabSection_Type) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{8, 0}
}

type Poster_Orientation int32

const (
	Poster_Horizontal Poster_Orientation = 0
	Poster_Vertical   Poster_Orientation = 1
)

// Enum value maps for Poster_Orientation.
var (
	Poster_Orientation_name = map[int32]string{
		0: "Horizontal",
		1: "Vertical",
	}
	Poster_Orientation_value = map[string]int32{
		"Horizontal": 0,
		"Vertical":   1,
	}
)

func (x Poster_Orientation) Enum() *Poster_Orientation {
	p := new(Poster_Orientation)
	*p = x
	return p
}

func (x Poster_Orientation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Poster_Orientation) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[7].Descriptor()
}

func (Poster_Orientation) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[7]
}

func (x Poster_Orientation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Poster_Orientation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Poster_Orientation(num)
	return nil
}

// Deprecated: Use Poster_Orientation.Descriptor instead.
func (Poster_Orientation) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{9, 0}
}

type Collection_Type int32

const (
	Collection_Movie      Collection_Type = 0
	Collection_Channel    Collection_Type = 1
	Collection_Genre      Collection_Type = 2
	Collection_Subgenre   Collection_Type = 3
	Collection_Epg        Collection_Type = 4
	Collection_Collection Collection_Type = 5
	Collection_Banner     Collection_Type = 6
	Collection_Person     Collection_Type = 7
	Collection_TvShow     Collection_Type = 8
)

// Enum value maps for Collection_Type.
var (
	Collection_Type_name = map[int32]string{
		0: "Movie",
		1: "Channel",
		2: "Genre",
		3: "Subgenre",
		4: "Epg",
		5: "Collection",
		6: "Banner",
		7: "Person",
		8: "TvShow",
	}
	Collection_Type_value = map[string]int32{
		"Movie":      0,
		"Channel":    1,
		"Genre":      2,
		"Subgenre":   3,
		"Epg":        4,
		"Collection": 5,
		"Banner":     6,
		"Person":     7,
		"TvShow":     8,
	}
)

func (x Collection_Type) Enum() *Collection_Type {
	p := new(Collection_Type)
	*p = x
	return p
}

func (x Collection_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Collection_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[8].Descriptor()
}

func (Collection_Type) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[8]
}

func (x Collection_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Collection_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Collection_Type(num)
	return nil
}

// Deprecated: Use Collection_Type.Descriptor instead.
func (Collection_Type) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{14, 0}
}

type MovieOffer_OfferType int32

const (
	MovieOffer_Buy  MovieOffer_OfferType = 0
	MovieOffer_Rent MovieOffer_OfferType = 1
)

// Enum value maps for MovieOffer_OfferType.
var (
	MovieOffer_OfferType_name = map[int32]string{
		0: "Buy",
		1: "Rent",
	}
	MovieOffer_OfferType_value = map[string]int32{
		"Buy":  0,
		"Rent": 1,
	}
)

func (x MovieOffer_OfferType) Enum() *MovieOffer_OfferType {
	p := new(MovieOffer_OfferType)
	*p = x
	return p
}

func (x MovieOffer_OfferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MovieOffer_OfferType) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[9].Descriptor()
}

func (MovieOffer_OfferType) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[9]
}

func (x MovieOffer_OfferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MovieOffer_OfferType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MovieOffer_OfferType(num)
	return nil
}

// Deprecated: Use MovieOffer_OfferType.Descriptor instead.
func (MovieOffer_OfferType) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{21, 0}
}

type Owner_Id int32

const (
	Owner_Undefined              Owner_Id = 0
	Owner_MEGOGO                 Owner_Id = 1
	Owner_Amedia                 Owner_Id = 2
	Owner_Sonar                  Owner_Id = 3
	Owner_IPMedia                Owner_Id = 4
	Owner_ContinentTV            Owner_Id = 5
	Owner_UTS                    Owner_Id = 6
	Owner_Viasat                 Owner_Id = 7
	Owner_ViasatPremium          Owner_Id = 8
	Owner_BitMediaCom            Owner_Id = 9
	Owner_StarLight              Owner_Id = 10
	Owner_DigitalScreens         Owner_Id = 11
	Owner_MostVideo              Owner_Id = 12
	Owner_SweetTVPremiere        Owner_Id = 1000
	Owner_SweetTVMoldovaPremiere Owner_Id = 1001
)

// Enum value maps for Owner_Id.
var (
	Owner_Id_name = map[int32]string{
		0:    "Undefined",
		1:    "MEGOGO",
		2:    "Amedia",
		3:    "Sonar",
		4:    "IPMedia",
		5:    "ContinentTV",
		6:    "UTS",
		7:    "Viasat",
		8:    "ViasatPremium",
		9:    "BitMediaCom",
		10:   "StarLight",
		11:   "DigitalScreens",
		12:   "MostVideo",
		1000: "SweetTVPremiere",
		1001: "SweetTVMoldovaPremiere",
	}
	Owner_Id_value = map[string]int32{
		"Undefined":              0,
		"MEGOGO":                 1,
		"Amedia":                 2,
		"Sonar":                  3,
		"IPMedia":                4,
		"ContinentTV":            5,
		"UTS":                    6,
		"Viasat":                 7,
		"ViasatPremium":          8,
		"BitMediaCom":            9,
		"StarLight":              10,
		"DigitalScreens":         11,
		"MostVideo":              12,
		"SweetTVPremiere":        1000,
		"SweetTVMoldovaPremiere": 1001,
	}
)

func (x Owner_Id) Enum() *Owner_Id {
	p := new(Owner_Id)
	*p = x
	return p
}

func (x Owner_Id) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Owner_Id) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[10].Descriptor()
}

func (Owner_Id) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[10]
}

func (x Owner_Id) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Owner_Id) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Owner_Id(num)
	return nil
}

// Deprecated: Use Owner_Id.Descriptor instead.
func (Owner_Id) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{26, 0}
}

type Recommendation_RecommendationType int32

const (
	Recommendation_Channel Recommendation_RecommendationType = 1
	Recommendation_Movie   Recommendation_RecommendationType = 2
)

// Enum value maps for Recommendation_RecommendationType.
var (
	Recommendation_RecommendationType_name = map[int32]string{
		1: "Channel",
		2: "Movie",
	}
	Recommendation_RecommendationType_value = map[string]int32{
		"Channel": 1,
		"Movie":   2,
	}
)

func (x Recommendation_RecommendationType) Enum() *Recommendation_RecommendationType {
	p := new(Recommendation_RecommendationType)
	*p = x
	return p
}

func (x Recommendation_RecommendationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Recommendation_RecommendationType) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[11].Descriptor()
}

func (Recommendation_RecommendationType) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[11]
}

func (x Recommendation_RecommendationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Recommendation_RecommendationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Recommendation_RecommendationType(num)
	return nil
}

// Deprecated: Use Recommendation_RecommendationType.Descriptor instead.
func (Recommendation_RecommendationType) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{29, 0}
}

type GetGenreMoviesResponse_Result int32

const (
	GetGenreMoviesResponse_OK     GetGenreMoviesResponse_Result = 0
	GetGenreMoviesResponse_NoAuth GetGenreMoviesResponse_Result = 1
)

// Enum value maps for GetGenreMoviesResponse_Result.
var (
	GetGenreMoviesResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetGenreMoviesResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetGenreMoviesResponse_Result) Enum() *GetGenreMoviesResponse_Result {
	p := new(GetGenreMoviesResponse_Result)
	*p = x
	return p
}

func (x GetGenreMoviesResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetGenreMoviesResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[12].Descriptor()
}

func (GetGenreMoviesResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[12]
}

func (x GetGenreMoviesResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetGenreMoviesResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetGenreMoviesResponse_Result(num)
	return nil
}

// Deprecated: Use GetGenreMoviesResponse_Result.Descriptor instead.
func (GetGenreMoviesResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{31, 0}
}

type GetSubgenreMoviesResponse_Result int32

const (
	GetSubgenreMoviesResponse_OK     GetSubgenreMoviesResponse_Result = 0
	GetSubgenreMoviesResponse_NoAuth GetSubgenreMoviesResponse_Result = 1
)

// Enum value maps for GetSubgenreMoviesResponse_Result.
var (
	GetSubgenreMoviesResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetSubgenreMoviesResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetSubgenreMoviesResponse_Result) Enum() *GetSubgenreMoviesResponse_Result {
	p := new(GetSubgenreMoviesResponse_Result)
	*p = x
	return p
}

func (x GetSubgenreMoviesResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSubgenreMoviesResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[13].Descriptor()
}

func (GetSubgenreMoviesResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[13]
}

func (x GetSubgenreMoviesResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetSubgenreMoviesResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetSubgenreMoviesResponse_Result(num)
	return nil
}

// Deprecated: Use GetSubgenreMoviesResponse_Result.Descriptor instead.
func (GetSubgenreMoviesResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{33, 0}
}

type GetMovieInfoResponse_Result int32

const (
	GetMovieInfoResponse_OK     GetMovieInfoResponse_Result = 0
	GetMovieInfoResponse_NoAuth GetMovieInfoResponse_Result = 1
)

// Enum value maps for GetMovieInfoResponse_Result.
var (
	GetMovieInfoResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetMovieInfoResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetMovieInfoResponse_Result) Enum() *GetMovieInfoResponse_Result {
	p := new(GetMovieInfoResponse_Result)
	*p = x
	return p
}

func (x GetMovieInfoResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMovieInfoResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[14].Descriptor()
}

func (GetMovieInfoResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[14]
}

func (x GetMovieInfoResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetMovieInfoResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetMovieInfoResponse_Result(num)
	return nil
}

// Deprecated: Use GetMovieInfoResponse_Result.Descriptor instead.
func (GetMovieInfoResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{35, 0}
}

type GetConfigurationResponse_Result int32

const (
	GetConfigurationResponse_OK     GetConfigurationResponse_Result = 0
	GetConfigurationResponse_NoAuth GetConfigurationResponse_Result = 1
)

// Enum value maps for GetConfigurationResponse_Result.
var (
	GetConfigurationResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetConfigurationResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetConfigurationResponse_Result) Enum() *GetConfigurationResponse_Result {
	p := new(GetConfigurationResponse_Result)
	*p = x
	return p
}

func (x GetConfigurationResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetConfigurationResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[15].Descriptor()
}

func (GetConfigurationResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[15]
}

func (x GetConfigurationResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetConfigurationResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetConfigurationResponse_Result(num)
	return nil
}

// Deprecated: Use GetConfigurationResponse_Result.Descriptor instead.
func (GetConfigurationResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{37, 0}
}

type GetRecommendedMoviesResponse_Result int32

const (
	GetRecommendedMoviesResponse_OK     GetRecommendedMoviesResponse_Result = 0
	GetRecommendedMoviesResponse_NoAuth GetRecommendedMoviesResponse_Result = 1
)

// Enum value maps for GetRecommendedMoviesResponse_Result.
var (
	GetRecommendedMoviesResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetRecommendedMoviesResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetRecommendedMoviesResponse_Result) Enum() *GetRecommendedMoviesResponse_Result {
	p := new(GetRecommendedMoviesResponse_Result)
	*p = x
	return p
}

func (x GetRecommendedMoviesResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetRecommendedMoviesResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[16].Descriptor()
}

func (GetRecommendedMoviesResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[16]
}

func (x GetRecommendedMoviesResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetRecommendedMoviesResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetRecommendedMoviesResponse_Result(num)
	return nil
}

// Deprecated: Use GetRecommendedMoviesResponse_Result.Descriptor instead.
func (GetRecommendedMoviesResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{39, 0}
}

type GetLinkResponse_Result int32

const (
	GetLinkResponse_OK            GetLinkResponse_Result = 0
	GetLinkResponse_NoAuth        GetLinkResponse_Result = 1
	GetLinkResponse_ExternalError GetLinkResponse_Result = 2
	GetLinkResponse_NotFound      GetLinkResponse_Result = 3
	GetLinkResponse_NeedDRM       GetLinkResponse_Result = 4
	GetLinkResponse_CodeInvalid   GetLinkResponse_Result = 5
)

// Enum value maps for GetLinkResponse_Result.
var (
	GetLinkResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
		2: "ExternalError",
		3: "NotFound",
		4: "NeedDRM",
		5: "CodeInvalid",
	}
	GetLinkResponse_Result_value = map[string]int32{
		"OK":            0,
		"NoAuth":        1,
		"ExternalError": 2,
		"NotFound":      3,
		"NeedDRM":       4,
		"CodeInvalid":   5,
	}
)

func (x GetLinkResponse_Result) Enum() *GetLinkResponse_Result {
	p := new(GetLinkResponse_Result)
	*p = x
	return p
}

func (x GetLinkResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetLinkResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[17].Descriptor()
}

func (GetLinkResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[17]
}

func (x GetLinkResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetLinkResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetLinkResponse_Result(num)
	return nil
}

// Deprecated: Use GetLinkResponse_Result.Descriptor instead.
func (GetLinkResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{41, 0}
}

type GetCollectionMoviesResponse_Result int32

const (
	GetCollectionMoviesResponse_OK     GetCollectionMoviesResponse_Result = 0
	GetCollectionMoviesResponse_NoAuth GetCollectionMoviesResponse_Result = 1
)

// Enum value maps for GetCollectionMoviesResponse_Result.
var (
	GetCollectionMoviesResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetCollectionMoviesResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetCollectionMoviesResponse_Result) Enum() *GetCollectionMoviesResponse_Result {
	p := new(GetCollectionMoviesResponse_Result)
	*p = x
	return p
}

func (x GetCollectionMoviesResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetCollectionMoviesResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[18].Descriptor()
}

func (GetCollectionMoviesResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[18]
}

func (x GetCollectionMoviesResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetCollectionMoviesResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetCollectionMoviesResponse_Result(num)
	return nil
}

// Deprecated: Use GetCollectionMoviesResponse_Result.Descriptor instead.
func (GetCollectionMoviesResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{44, 0}
}

type GetPremiereMoviesResponse_Result int32

const (
	GetPremiereMoviesResponse_OK     GetPremiereMoviesResponse_Result = 0
	GetPremiereMoviesResponse_NoAuth GetPremiereMoviesResponse_Result = 1
)

// Enum value maps for GetPremiereMoviesResponse_Result.
var (
	GetPremiereMoviesResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetPremiereMoviesResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetPremiereMoviesResponse_Result) Enum() *GetPremiereMoviesResponse_Result {
	p := new(GetPremiereMoviesResponse_Result)
	*p = x
	return p
}

func (x GetPremiereMoviesResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPremiereMoviesResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[19].Descriptor()
}

func (GetPremiereMoviesResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[19]
}

func (x GetPremiereMoviesResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetPremiereMoviesResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetPremiereMoviesResponse_Result(num)
	return nil
}

// Deprecated: Use GetPremiereMoviesResponse_Result.Descriptor instead.
func (GetPremiereMoviesResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{47, 0}
}

type GetWatchListResponse_Result int32

const (
	GetWatchListResponse_OK     GetWatchListResponse_Result = 0
	GetWatchListResponse_NoAuth GetWatchListResponse_Result = 1
)

// Enum value maps for GetWatchListResponse_Result.
var (
	GetWatchListResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetWatchListResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetWatchListResponse_Result) Enum() *GetWatchListResponse_Result {
	p := new(GetWatchListResponse_Result)
	*p = x
	return p
}

func (x GetWatchListResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetWatchListResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[20].Descriptor()
}

func (GetWatchListResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[20]
}

func (x GetWatchListResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetWatchListResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetWatchListResponse_Result(num)
	return nil
}

// Deprecated: Use GetWatchListResponse_Result.Descriptor instead.
func (GetWatchListResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{49, 0}
}

type SetWatchInfoResponse_Result int32

const (
	SetWatchInfoResponse_OK     SetWatchInfoResponse_Result = 0
	SetWatchInfoResponse_NoAuth SetWatchInfoResponse_Result = 1
)

// Enum value maps for SetWatchInfoResponse_Result.
var (
	SetWatchInfoResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	SetWatchInfoResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x SetWatchInfoResponse_Result) Enum() *SetWatchInfoResponse_Result {
	p := new(SetWatchInfoResponse_Result)
	*p = x
	return p
}

func (x SetWatchInfoResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetWatchInfoResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[21].Descriptor()
}

func (SetWatchInfoResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[21]
}

func (x SetWatchInfoResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SetWatchInfoResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SetWatchInfoResponse_Result(num)
	return nil
}

// Deprecated: Use SetWatchInfoResponse_Result.Descriptor instead.
func (SetWatchInfoResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{51, 0}
}

type ClearWatchInfoResponse_Result int32

const (
	ClearWatchInfoResponse_OK ClearWatchInfoResponse_Result = 0
)

// Enum value maps for ClearWatchInfoResponse_Result.
var (
	ClearWatchInfoResponse_Result_name = map[int32]string{
		0: "OK",
	}
	ClearWatchInfoResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x ClearWatchInfoResponse_Result) Enum() *ClearWatchInfoResponse_Result {
	p := new(ClearWatchInfoResponse_Result)
	*p = x
	return p
}

func (x ClearWatchInfoResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClearWatchInfoResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[22].Descriptor()
}

func (ClearWatchInfoResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[22]
}

func (x ClearWatchInfoResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClearWatchInfoResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClearWatchInfoResponse_Result(num)
	return nil
}

// Deprecated: Use ClearWatchInfoResponse_Result.Descriptor instead.
func (ClearWatchInfoResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{53, 0}
}

type GetFavoriteMoviesResponse_Result int32

const (
	GetFavoriteMoviesResponse_OK     GetFavoriteMoviesResponse_Result = 0
	GetFavoriteMoviesResponse_NoAuth GetFavoriteMoviesResponse_Result = 1
)

// Enum value maps for GetFavoriteMoviesResponse_Result.
var (
	GetFavoriteMoviesResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetFavoriteMoviesResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetFavoriteMoviesResponse_Result) Enum() *GetFavoriteMoviesResponse_Result {
	p := new(GetFavoriteMoviesResponse_Result)
	*p = x
	return p
}

func (x GetFavoriteMoviesResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetFavoriteMoviesResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[23].Descriptor()
}

func (GetFavoriteMoviesResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[23]
}

func (x GetFavoriteMoviesResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetFavoriteMoviesResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetFavoriteMoviesResponse_Result(num)
	return nil
}

// Deprecated: Use GetFavoriteMoviesResponse_Result.Descriptor instead.
func (GetFavoriteMoviesResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{55, 0}
}

type AddFavoriteMovieResponse_Result int32

const (
	AddFavoriteMovieResponse_OK     AddFavoriteMovieResponse_Result = 0
	AddFavoriteMovieResponse_NoAuth AddFavoriteMovieResponse_Result = 1
)

// Enum value maps for AddFavoriteMovieResponse_Result.
var (
	AddFavoriteMovieResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	AddFavoriteMovieResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x AddFavoriteMovieResponse_Result) Enum() *AddFavoriteMovieResponse_Result {
	p := new(AddFavoriteMovieResponse_Result)
	*p = x
	return p
}

func (x AddFavoriteMovieResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddFavoriteMovieResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[24].Descriptor()
}

func (AddFavoriteMovieResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[24]
}

func (x AddFavoriteMovieResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AddFavoriteMovieResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AddFavoriteMovieResponse_Result(num)
	return nil
}

// Deprecated: Use AddFavoriteMovieResponse_Result.Descriptor instead.
func (AddFavoriteMovieResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{57, 0}
}

type RemoveFavoriteMovieResponse_Result int32

const (
	RemoveFavoriteMovieResponse_OK     RemoveFavoriteMovieResponse_Result = 0
	RemoveFavoriteMovieResponse_NoAuth RemoveFavoriteMovieResponse_Result = 1
)

// Enum value maps for RemoveFavoriteMovieResponse_Result.
var (
	RemoveFavoriteMovieResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	RemoveFavoriteMovieResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x RemoveFavoriteMovieResponse_Result) Enum() *RemoveFavoriteMovieResponse_Result {
	p := new(RemoveFavoriteMovieResponse_Result)
	*p = x
	return p
}

func (x RemoveFavoriteMovieResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveFavoriteMovieResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[25].Descriptor()
}

func (RemoveFavoriteMovieResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[25]
}

func (x RemoveFavoriteMovieResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RemoveFavoriteMovieResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RemoveFavoriteMovieResponse_Result(num)
	return nil
}

// Deprecated: Use RemoveFavoriteMovieResponse_Result.Descriptor instead.
func (RemoveFavoriteMovieResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{59, 0}
}

type GetPremiereBannersResponse_Result int32

const (
	GetPremiereBannersResponse_OK     GetPremiereBannersResponse_Result = 0
	GetPremiereBannersResponse_NoAuth GetPremiereBannersResponse_Result = 1
)

// Enum value maps for GetPremiereBannersResponse_Result.
var (
	GetPremiereBannersResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetPremiereBannersResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetPremiereBannersResponse_Result) Enum() *GetPremiereBannersResponse_Result {
	p := new(GetPremiereBannersResponse_Result)
	*p = x
	return p
}

func (x GetPremiereBannersResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPremiereBannersResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[26].Descriptor()
}

func (GetPremiereBannersResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[26]
}

func (x GetPremiereBannersResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetPremiereBannersResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetPremiereBannersResponse_Result(num)
	return nil
}

// Deprecated: Use GetPremiereBannersResponse_Result.Descriptor instead.
func (GetPremiereBannersResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{61, 0}
}

type PromoBanner_ContentType int32

const (
	PromoBanner_MOVIE   PromoBanner_ContentType = 0
	PromoBanner_CHANNEL PromoBanner_ContentType = 1
)

// Enum value maps for PromoBanner_ContentType.
var (
	PromoBanner_ContentType_name = map[int32]string{
		0: "MOVIE",
		1: "CHANNEL",
	}
	PromoBanner_ContentType_value = map[string]int32{
		"MOVIE":   0,
		"CHANNEL": 1,
	}
)

func (x PromoBanner_ContentType) Enum() *PromoBanner_ContentType {
	p := new(PromoBanner_ContentType)
	*p = x
	return p
}

func (x PromoBanner_ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PromoBanner_ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[27].Descriptor()
}

func (PromoBanner_ContentType) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[27]
}

func (x PromoBanner_ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PromoBanner_ContentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PromoBanner_ContentType(num)
	return nil
}

// Deprecated: Use PromoBanner_ContentType.Descriptor instead.
func (PromoBanner_ContentType) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{64, 0}
}

type GetPromoBannersResponse_Result int32

const (
	GetPromoBannersResponse_OK     GetPromoBannersResponse_Result = 0
	GetPromoBannersResponse_NoAuth GetPromoBannersResponse_Result = 1
)

// Enum value maps for GetPromoBannersResponse_Result.
var (
	GetPromoBannersResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetPromoBannersResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetPromoBannersResponse_Result) Enum() *GetPromoBannersResponse_Result {
	p := new(GetPromoBannersResponse_Result)
	*p = x
	return p
}

func (x GetPromoBannersResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPromoBannersResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[28].Descriptor()
}

func (GetPromoBannersResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[28]
}

func (x GetPromoBannersResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetPromoBannersResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetPromoBannersResponse_Result(num)
	return nil
}

// Deprecated: Use GetPromoBannersResponse_Result.Descriptor instead.
func (GetPromoBannersResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{66, 0}
}

type GetPurchasedMoviesResponse_Result int32

const (
	GetPurchasedMoviesResponse_OK     GetPurchasedMoviesResponse_Result = 0
	GetPurchasedMoviesResponse_NoAuth GetPurchasedMoviesResponse_Result = 1
)

// Enum value maps for GetPurchasedMoviesResponse_Result.
var (
	GetPurchasedMoviesResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetPurchasedMoviesResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetPurchasedMoviesResponse_Result) Enum() *GetPurchasedMoviesResponse_Result {
	p := new(GetPurchasedMoviesResponse_Result)
	*p = x
	return p
}

func (x GetPurchasedMoviesResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPurchasedMoviesResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[29].Descriptor()
}

func (GetPurchasedMoviesResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[29]
}

func (x GetPurchasedMoviesResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetPurchasedMoviesResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetPurchasedMoviesResponse_Result(num)
	return nil
}

// Deprecated: Use GetPurchasedMoviesResponse_Result.Descriptor instead.
func (GetPurchasedMoviesResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{67, 0}
}

type GetPersonInfoResponse_Result int32

const (
	GetPersonInfoResponse_OK     GetPersonInfoResponse_Result = 0
	GetPersonInfoResponse_NoAuth GetPersonInfoResponse_Result = 1
)

// Enum value maps for GetPersonInfoResponse_Result.
var (
	GetPersonInfoResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetPersonInfoResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetPersonInfoResponse_Result) Enum() *GetPersonInfoResponse_Result {
	p := new(GetPersonInfoResponse_Result)
	*p = x
	return p
}

func (x GetPersonInfoResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPersonInfoResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[30].Descriptor()
}

func (GetPersonInfoResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[30]
}

func (x GetPersonInfoResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetPersonInfoResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetPersonInfoResponse_Result(num)
	return nil
}

// Deprecated: Use GetPersonInfoResponse_Result.Descriptor instead.
func (GetPersonInfoResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{69, 0}
}

type GetPersonsInfoResponse_Result int32

const (
	GetPersonsInfoResponse_OK     GetPersonsInfoResponse_Result = 0
	GetPersonsInfoResponse_NoAuth GetPersonsInfoResponse_Result = 1
)

// Enum value maps for GetPersonsInfoResponse_Result.
var (
	GetPersonsInfoResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetPersonsInfoResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetPersonsInfoResponse_Result) Enum() *GetPersonsInfoResponse_Result {
	p := new(GetPersonsInfoResponse_Result)
	*p = x
	return p
}

func (x GetPersonsInfoResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPersonsInfoResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[31].Descriptor()
}

func (GetPersonsInfoResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[31]
}

func (x GetPersonsInfoResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetPersonsInfoResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetPersonsInfoResponse_Result(num)
	return nil
}

// Deprecated: Use GetPersonsInfoResponse_Result.Descriptor instead.
func (GetPersonsInfoResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{71, 0}
}

type GetDownloadableMoviesResponse_Result int32

const (
	GetDownloadableMoviesResponse_OK     GetDownloadableMoviesResponse_Result = 0
	GetDownloadableMoviesResponse_NoAuth GetDownloadableMoviesResponse_Result = 1
)

// Enum value maps for GetDownloadableMoviesResponse_Result.
var (
	GetDownloadableMoviesResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetDownloadableMoviesResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetDownloadableMoviesResponse_Result) Enum() *GetDownloadableMoviesResponse_Result {
	p := new(GetDownloadableMoviesResponse_Result)
	*p = x
	return p
}

func (x GetDownloadableMoviesResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetDownloadableMoviesResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[32].Descriptor()
}

func (GetDownloadableMoviesResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[32]
}

func (x GetDownloadableMoviesResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetDownloadableMoviesResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetDownloadableMoviesResponse_Result(num)
	return nil
}

// Deprecated: Use GetDownloadableMoviesResponse_Result.Descriptor instead.
func (GetDownloadableMoviesResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{73, 0}
}

type RateResponse_Result int32

const (
	RateResponse_OK     RateResponse_Result = 0
	RateResponse_NoAuth RateResponse_Result = 1
)

// Enum value maps for RateResponse_Result.
var (
	RateResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	RateResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x RateResponse_Result) Enum() *RateResponse_Result {
	p := new(RateResponse_Result)
	*p = x
	return p
}

func (x RateResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[33].Descriptor()
}

func (RateResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[33]
}

func (x RateResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RateResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RateResponse_Result(num)
	return nil
}

// Deprecated: Use RateResponse_Result.Descriptor instead.
func (RateResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{75, 0}
}

type GetCollectionsRequest_Type int32

const (
	GetCollectionsRequest_HOME     GetCollectionsRequest_Type = 0
	GetCollectionsRequest_MOVIE    GetCollectionsRequest_Type = 1
	GetCollectionsRequest_PREMIERE GetCollectionsRequest_Type = 2
	GetCollectionsRequest_SERIES   GetCollectionsRequest_Type = 3
	GetCollectionsRequest_CARTOON  GetCollectionsRequest_Type = 4
	GetCollectionsRequest_TV       GetCollectionsRequest_Type = 5
)

// Enum value maps for GetCollectionsRequest_Type.
var (
	GetCollectionsRequest_Type_name = map[int32]string{
		0: "HOME",
		1: "MOVIE",
		2: "PREMIERE",
		3: "SERIES",
		4: "CARTOON",
		5: "TV",
	}
	GetCollectionsRequest_Type_value = map[string]int32{
		"HOME":     0,
		"MOVIE":    1,
		"PREMIERE": 2,
		"SERIES":   3,
		"CARTOON":  4,
		"TV":       5,
	}
)

func (x GetCollectionsRequest_Type) Enum() *GetCollectionsRequest_Type {
	p := new(GetCollectionsRequest_Type)
	*p = x
	return p
}

func (x GetCollectionsRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetCollectionsRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[34].Descriptor()
}

func (GetCollectionsRequest_Type) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[34]
}

func (x GetCollectionsRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetCollectionsRequest_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetCollectionsRequest_Type(num)
	return nil
}

// Deprecated: Use GetCollectionsRequest_Type.Descriptor instead.
func (GetCollectionsRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{76, 0}
}

type GetCollectionsResponse_Result int32

const (
	GetCollectionsResponse_OK     GetCollectionsResponse_Result = 0
	GetCollectionsResponse_NoAuth GetCollectionsResponse_Result = 1
)

// Enum value maps for GetCollectionsResponse_Result.
var (
	GetCollectionsResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetCollectionsResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetCollectionsResponse_Result) Enum() *GetCollectionsResponse_Result {
	p := new(GetCollectionsResponse_Result)
	*p = x
	return p
}

func (x GetCollectionsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetCollectionsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[35].Descriptor()
}

func (GetCollectionsResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[35]
}

func (x GetCollectionsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetCollectionsResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetCollectionsResponse_Result(num)
	return nil
}

// Deprecated: Use GetCollectionsResponse_Result.Descriptor instead.
func (GetCollectionsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{77, 0}
}

type PostCommentResponse_Result int32

const (
	PostCommentResponse_OK     PostCommentResponse_Result = 0
	PostCommentResponse_NoAuth PostCommentResponse_Result = 1
	PostCommentResponse_Error  PostCommentResponse_Result = 2
)

// Enum value maps for PostCommentResponse_Result.
var (
	PostCommentResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
		2: "Error",
	}
	PostCommentResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
		"Error":  2,
	}
)

func (x PostCommentResponse_Result) Enum() *PostCommentResponse_Result {
	p := new(PostCommentResponse_Result)
	*p = x
	return p
}

func (x PostCommentResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostCommentResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[36].Descriptor()
}

func (PostCommentResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[36]
}

func (x PostCommentResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PostCommentResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PostCommentResponse_Result(num)
	return nil
}

// Deprecated: Use PostCommentResponse_Result.Descriptor instead.
func (PostCommentResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{79, 0}
}

type EditCommentResponse_Result int32

const (
	EditCommentResponse_OK     EditCommentResponse_Result = 0
	EditCommentResponse_NoAuth EditCommentResponse_Result = 1
	EditCommentResponse_Error  EditCommentResponse_Result = 2
)

// Enum value maps for EditCommentResponse_Result.
var (
	EditCommentResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
		2: "Error",
	}
	EditCommentResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
		"Error":  2,
	}
)

func (x EditCommentResponse_Result) Enum() *EditCommentResponse_Result {
	p := new(EditCommentResponse_Result)
	*p = x
	return p
}

func (x EditCommentResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EditCommentResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[37].Descriptor()
}

func (EditCommentResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[37]
}

func (x EditCommentResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EditCommentResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EditCommentResponse_Result(num)
	return nil
}

// Deprecated: Use EditCommentResponse_Result.Descriptor instead.
func (EditCommentResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{81, 0}
}

type DeleteCommentResponse_Result int32

const (
	DeleteCommentResponse_OK     DeleteCommentResponse_Result = 0
	DeleteCommentResponse_NoAuth DeleteCommentResponse_Result = 1
	DeleteCommentResponse_Error  DeleteCommentResponse_Result = 2
)

// Enum value maps for DeleteCommentResponse_Result.
var (
	DeleteCommentResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
		2: "Error",
	}
	DeleteCommentResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
		"Error":  2,
	}
)

func (x DeleteCommentResponse_Result) Enum() *DeleteCommentResponse_Result {
	p := new(DeleteCommentResponse_Result)
	*p = x
	return p
}

func (x DeleteCommentResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteCommentResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[38].Descriptor()
}

func (DeleteCommentResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[38]
}

func (x DeleteCommentResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeleteCommentResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeleteCommentResponse_Result(num)
	return nil
}

// Deprecated: Use DeleteCommentResponse_Result.Descriptor instead.
func (DeleteCommentResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{83, 0}
}

type InternalCommentMessage_Action int32

const (
	InternalCommentMessage_Post   InternalCommentMessage_Action = 0
	InternalCommentMessage_Edit   InternalCommentMessage_Action = 1
	InternalCommentMessage_Delete InternalCommentMessage_Action = 2
)

// Enum value maps for InternalCommentMessage_Action.
var (
	InternalCommentMessage_Action_name = map[int32]string{
		0: "Post",
		1: "Edit",
		2: "Delete",
	}
	InternalCommentMessage_Action_value = map[string]int32{
		"Post":   0,
		"Edit":   1,
		"Delete": 2,
	}
)

func (x InternalCommentMessage_Action) Enum() *InternalCommentMessage_Action {
	p := new(InternalCommentMessage_Action)
	*p = x
	return p
}

func (x InternalCommentMessage_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InternalCommentMessage_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[39].Descriptor()
}

func (InternalCommentMessage_Action) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[39]
}

func (x InternalCommentMessage_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InternalCommentMessage_Action) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InternalCommentMessage_Action(num)
	return nil
}

// Deprecated: Use InternalCommentMessage_Action.Descriptor instead.
func (InternalCommentMessage_Action) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{84, 0}
}

type Ad_MediaType int32

const (
	Ad_VIDEO Ad_MediaType = 0
	Ad_IMAGE Ad_MediaType = 1
)

// Enum value maps for Ad_MediaType.
var (
	Ad_MediaType_name = map[int32]string{
		0: "VIDEO",
		1: "IMAGE",
	}
	Ad_MediaType_value = map[string]int32{
		"VIDEO": 0,
		"IMAGE": 1,
	}
)

func (x Ad_MediaType) Enum() *Ad_MediaType {
	p := new(Ad_MediaType)
	*p = x
	return p
}

func (x Ad_MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ad_MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[40].Descriptor()
}

func (Ad_MediaType) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[40]
}

func (x Ad_MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ad_MediaType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ad_MediaType(num)
	return nil
}

// Deprecated: Use Ad_MediaType.Descriptor instead.
func (Ad_MediaType) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{85, 0}
}

type Ad_ContentType int32

const (
	Ad_Movie   Ad_ContentType = 0
	Ad_Channel Ad_ContentType = 1
	Ad_General Ad_ContentType = 2
)

// Enum value maps for Ad_ContentType.
var (
	Ad_ContentType_name = map[int32]string{
		0: "Movie",
		1: "Channel",
		2: "General",
	}
	Ad_ContentType_value = map[string]int32{
		"Movie":   0,
		"Channel": 1,
		"General": 2,
	}
)

func (x Ad_ContentType) Enum() *Ad_ContentType {
	p := new(Ad_ContentType)
	*p = x
	return p
}

func (x Ad_ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ad_ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[41].Descriptor()
}

func (Ad_ContentType) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[41]
}

func (x Ad_ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ad_ContentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ad_ContentType(num)
	return nil
}

// Deprecated: Use Ad_ContentType.Descriptor instead.
func (Ad_ContentType) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{85, 1}
}

type Ad_Type int32

const (
	Ad_PREROLL  Ad_Type = 0
	Ad_MIDROLL  Ad_Type = 1
	Ad_POSTROLL Ad_Type = 2
)

// Enum value maps for Ad_Type.
var (
	Ad_Type_name = map[int32]string{
		0: "PREROLL",
		1: "MIDROLL",
		2: "POSTROLL",
	}
	Ad_Type_value = map[string]int32{
		"PREROLL":  0,
		"MIDROLL":  1,
		"POSTROLL": 2,
	}
)

func (x Ad_Type) Enum() *Ad_Type {
	p := new(Ad_Type)
	*p = x
	return p
}

func (x Ad_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ad_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[42].Descriptor()
}

func (Ad_Type) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[42]
}

func (x Ad_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ad_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ad_Type(num)
	return nil
}

// Deprecated: Use Ad_Type.Descriptor instead.
func (Ad_Type) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{85, 2}
}

type FilterGroup_Type int32

const (
	FilterGroup_Genre        FilterGroup_Type = 0
	FilterGroup_Downloadable FilterGroup_Type = 1
	FilterGroup_Year         FilterGroup_Type = 2
	FilterGroup_Country      FilterGroup_Type = 3
	FilterGroup_Available    FilterGroup_Type = 4
	FilterGroup_Audiotrack   FilterGroup_Type = 5
	FilterGroup_Owner        FilterGroup_Type = 6
	FilterGroup_Category     FilterGroup_Type = 7
	FilterGroup_Subtitle     FilterGroup_Type = 8
)

// Enum value maps for FilterGroup_Type.
var (
	FilterGroup_Type_name = map[int32]string{
		0: "Genre",
		1: "Downloadable",
		2: "Year",
		3: "Country",
		4: "Available",
		5: "Audiotrack",
		6: "Owner",
		7: "Category",
		8: "Subtitle",
	}
	FilterGroup_Type_value = map[string]int32{
		"Genre":        0,
		"Downloadable": 1,
		"Year":         2,
		"Country":      3,
		"Available":    4,
		"Audiotrack":   5,
		"Owner":        6,
		"Category":     7,
		"Subtitle":     8,
	}
)

func (x FilterGroup_Type) Enum() *FilterGroup_Type {
	p := new(FilterGroup_Type)
	*p = x
	return p
}

func (x FilterGroup_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterGroup_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[43].Descriptor()
}

func (FilterGroup_Type) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[43]
}

func (x FilterGroup_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FilterGroup_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FilterGroup_Type(num)
	return nil
}

// Deprecated: Use FilterGroup_Type.Descriptor instead.
func (FilterGroup_Type) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{87, 0}
}

type GetFiltersResponse_Result int32

const (
	GetFiltersResponse_OK     GetFiltersResponse_Result = 0
	GetFiltersResponse_NoAuth GetFiltersResponse_Result = 1
)

// Enum value maps for GetFiltersResponse_Result.
var (
	GetFiltersResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetFiltersResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetFiltersResponse_Result) Enum() *GetFiltersResponse_Result {
	p := new(GetFiltersResponse_Result)
	*p = x
	return p
}

func (x GetFiltersResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetFiltersResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[44].Descriptor()
}

func (GetFiltersResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[44]
}

func (x GetFiltersResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetFiltersResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetFiltersResponse_Result(num)
	return nil
}

// Deprecated: Use GetFiltersResponse_Result.Descriptor instead.
func (GetFiltersResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{89, 0}
}

type GetFilteredMoviesResponse_Result int32

const (
	GetFilteredMoviesResponse_OK     GetFilteredMoviesResponse_Result = 0
	GetFilteredMoviesResponse_NoAuth GetFilteredMoviesResponse_Result = 1
)

// Enum value maps for GetFilteredMoviesResponse_Result.
var (
	GetFilteredMoviesResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetFilteredMoviesResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetFilteredMoviesResponse_Result) Enum() *GetFilteredMoviesResponse_Result {
	p := new(GetFilteredMoviesResponse_Result)
	*p = x
	return p
}

func (x GetFilteredMoviesResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetFilteredMoviesResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[45].Descriptor()
}

func (GetFilteredMoviesResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[45]
}

func (x GetFilteredMoviesResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetFilteredMoviesResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetFilteredMoviesResponse_Result(num)
	return nil
}

// Deprecated: Use GetFilteredMoviesResponse_Result.Descriptor instead.
func (GetFilteredMoviesResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{91, 0}
}

type GetFilterOptionResponse_Result int32

const (
	GetFilterOptionResponse_OK     GetFilterOptionResponse_Result = 0
	GetFilterOptionResponse_NoAuth GetFilterOptionResponse_Result = 1
)

// Enum value maps for GetFilterOptionResponse_Result.
var (
	GetFilterOptionResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetFilterOptionResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetFilterOptionResponse_Result) Enum() *GetFilterOptionResponse_Result {
	p := new(GetFilterOptionResponse_Result)
	*p = x
	return p
}

func (x GetFilterOptionResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetFilterOptionResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[46].Descriptor()
}

func (GetFilterOptionResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[46]
}

func (x GetFilterOptionResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetFilterOptionResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetFilterOptionResponse_Result(num)
	return nil
}

// Deprecated: Use GetFilterOptionResponse_Result.Descriptor instead.
func (GetFilterOptionResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{94, 0}
}

type NotifyMovieReleaseResponse_Result int32

const (
	NotifyMovieReleaseResponse_OK        NotifyMovieReleaseResponse_Result = 0
	NotifyMovieReleaseResponse_NeedEmail NotifyMovieReleaseResponse_Result = 1
)

// Enum value maps for NotifyMovieReleaseResponse_Result.
var (
	NotifyMovieReleaseResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NeedEmail",
	}
	NotifyMovieReleaseResponse_Result_value = map[string]int32{
		"OK":        0,
		"NeedEmail": 1,
	}
)

func (x NotifyMovieReleaseResponse_Result) Enum() *NotifyMovieReleaseResponse_Result {
	p := new(NotifyMovieReleaseResponse_Result)
	*p = x
	return p
}

func (x NotifyMovieReleaseResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyMovieReleaseResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_movie_service_proto_enumTypes[47].Descriptor()
}

func (NotifyMovieReleaseResponse_Result) Type() protoreflect.EnumType {
	return &file_movie_service_movie_service_proto_enumTypes[47]
}

func (x NotifyMovieReleaseResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NotifyMovieReleaseResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NotifyMovieReleaseResponse_Result(num)
	return nil
}

// Deprecated: Use NotifyMovieReleaseResponse_Result.Descriptor instead.
func (NotifyMovieReleaseResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{96, 0}
}

type Movie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *int32            `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	ExternalIdPairs       []*ExternalIdPair `protobuf:"bytes,2,rep,name=external_id_pairs,json=externalIdPairs" json:"external_id_pairs,omitempty"`
	Title                 *string           `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	TitleEn               *string           `protobuf:"bytes,4,opt,name=title_en,json=titleEn" json:"title_en,omitempty"`
	Description           *string           `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Year                  *int32            `protobuf:"varint,6,opt,name=year" json:"year,omitempty"`
	Duration              *int32            `protobuf:"varint,7,opt,name=duration" json:"duration,omitempty"`
	AgeLimit              *int32            `protobuf:"varint,8,opt,name=age_limit,json=ageLimit" json:"age_limit,omitempty"`
	PosterUrl             *string           `protobuf:"bytes,9,opt,name=poster_url,json=posterUrl" json:"poster_url,omitempty"`
	RatingImdb            *float32          `protobuf:"fixed32,10,opt,name=rating_imdb,json=ratingImdb" json:"rating_imdb,omitempty"`
	RatingKinopoisk       *float32          `protobuf:"fixed32,11,opt,name=rating_kinopoisk,json=ratingKinopoisk" json:"rating_kinopoisk,omitempty"`
	Categories            []int32           `protobuf:"varint,12,rep,name=categories" json:"categories,omitempty"`
	Countries             []int32           `protobuf:"varint,13,rep,name=countries" json:"countries,omitempty"`
	Genres                []int32           `protobuf:"varint,14,rep,name=genres" json:"genres,omitempty"`
	Owners                []int32           `protobuf:"varint,15,rep,name=owners" json:"owners,omitempty"`
	People                []*Person         `protobuf:"bytes,16,rep,name=people" json:"people,omitempty"`
	Seasons               []*Season         `protobuf:"bytes,17,rep,name=seasons" json:"seasons,omitempty"`
	Available             *bool             `protobuf:"varint,18,opt,name=available" json:"available,omitempty"`
	Tariffs               []int32           `protobuf:"varint,19,rep,name=tariffs" json:"tariffs,omitempty"`
	IsFavorite            *bool             `protobuf:"varint,20,opt,name=is_favorite,json=isFavorite" json:"is_favorite,omitempty"`
	WatchInfo             *WatchInfo        `protobuf:"bytes,21,opt,name=watch_info,json=watchInfo" json:"watch_info,omitempty"`
	Offers                []*MovieOffer     `protobuf:"bytes,22,rep,name=offers" json:"offers,omitempty"`
	Posters               []*Poster         `protobuf:"bytes,23,rep,name=posters" json:"posters,omitempty"`
	TrailerUrl            *string           `protobuf:"bytes,24,opt,name=trailer_url,json=trailerUrl" json:"trailer_url,omitempty"`
	Tagline               *string           `protobuf:"bytes,25,opt,name=tagline" json:"tagline,omitempty"`
	Slug                  *string           `protobuf:"bytes,26,opt,name=slug" json:"slug,omitempty"`
	Downloadable          *bool             `protobuf:"varint,27,opt,name=downloadable" json:"downloadable,omitempty"`
	RecommendedMovies     []int32           `protobuf:"varint,28,rep,name=recommended_movies,json=recommendedMovies" json:"recommended_movies,omitempty"`
	AudioTracks           []*AudioTrack     `protobuf:"bytes,29,rep,name=audio_tracks,json=audioTracks" json:"audio_tracks,omitempty"`
	Subtitles             []*Subtitle       `protobuf:"bytes,30,rep,name=subtitles" json:"subtitles,omitempty"`
	Statistics            *Statistics       `protobuf:"bytes,31,opt,name=statistics" json:"statistics,omitempty"`
	UserRating            *Rating           `protobuf:"varint,32,opt,name=user_rating,json=userRating,enum=movie_service.Rating" json:"user_rating,omitempty"`
	BannerUrl             *string           `protobuf:"bytes,33,opt,name=banner_url,json=bannerUrl" json:"banner_url,omitempty"`
	Comments              []*Comment        `protobuf:"bytes,34,rep,name=comments" json:"comments,omitempty"`
	ReleaseDate           *int64            `protobuf:"zigzag64,35,opt,name=release_date,json=releaseDate" json:"release_date,omitempty"`
	Released              *bool             `protobuf:"varint,36,opt,name=released" json:"released,omitempty"`
	BoughtPeriod          *int32            `protobuf:"varint,37,opt,name=bought_period,json=boughtPeriod" json:"bought_period,omitempty"`
	AvailabilityInfo      *string           `protobuf:"bytes,38,opt,name=availability_info,json=availabilityInfo" json:"availability_info,omitempty"`
	SimilarMovies         []int32           `protobuf:"varint,39,rep,name=similar_movies,json=similarMovies" json:"similar_movies,omitempty"`
	EndCredits            *int32            `protobuf:"varint,40,opt,name=end_credits,json=endCredits" json:"end_credits,omitempty"`
	RatingSweetTv         *float32          `protobuf:"fixed32,41,opt,name=rating_sweet_tv,json=ratingSweetTv" json:"rating_sweet_tv,omitempty"`
	FollowingMovies       []int32           `protobuf:"varint,42,rep,name=following_movies,json=followingMovies" json:"following_movies,omitempty"`
	VideoQuality          *int32            `protobuf:"varint,43,opt,name=video_quality,json=videoQuality" json:"video_quality,omitempty"`
	AvailabilityInfoColor *string           `protobuf:"bytes,44,opt,name=availability_info_color,json=availabilityInfoColor" json:"availability_info_color,omitempty"`
	ChannelId             *int32            `protobuf:"varint,45,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	EpgId                 *int32            `protobuf:"varint,46,opt,name=epg_id,json=epgId" json:"epg_id,omitempty"`
}

func (x *Movie) Reset() {
	*x = Movie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Movie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Movie) ProtoMessage() {}

func (x *Movie) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Movie.ProtoReflect.Descriptor instead.
func (*Movie) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{0}
}

func (x *Movie) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Movie) GetExternalIdPairs() []*ExternalIdPair {
	if x != nil {
		return x.ExternalIdPairs
	}
	return nil
}

func (x *Movie) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Movie) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *Movie) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Movie) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *Movie) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *Movie) GetAgeLimit() int32 {
	if x != nil && x.AgeLimit != nil {
		return *x.AgeLimit
	}
	return 0
}

func (x *Movie) GetPosterUrl() string {
	if x != nil && x.PosterUrl != nil {
		return *x.PosterUrl
	}
	return ""
}

func (x *Movie) GetRatingImdb() float32 {
	if x != nil && x.RatingImdb != nil {
		return *x.RatingImdb
	}
	return 0
}

func (x *Movie) GetRatingKinopoisk() float32 {
	if x != nil && x.RatingKinopoisk != nil {
		return *x.RatingKinopoisk
	}
	return 0
}

func (x *Movie) GetCategories() []int32 {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Movie) GetCountries() []int32 {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *Movie) GetGenres() []int32 {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *Movie) GetOwners() []int32 {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *Movie) GetPeople() []*Person {
	if x != nil {
		return x.People
	}
	return nil
}

func (x *Movie) GetSeasons() []*Season {
	if x != nil {
		return x.Seasons
	}
	return nil
}

func (x *Movie) GetAvailable() bool {
	if x != nil && x.Available != nil {
		return *x.Available
	}
	return false
}

func (x *Movie) GetTariffs() []int32 {
	if x != nil {
		return x.Tariffs
	}
	return nil
}

func (x *Movie) GetIsFavorite() bool {
	if x != nil && x.IsFavorite != nil {
		return *x.IsFavorite
	}
	return false
}

func (x *Movie) GetWatchInfo() *WatchInfo {
	if x != nil {
		return x.WatchInfo
	}
	return nil
}

func (x *Movie) GetOffers() []*MovieOffer {
	if x != nil {
		return x.Offers
	}
	return nil
}

func (x *Movie) GetPosters() []*Poster {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *Movie) GetTrailerUrl() string {
	if x != nil && x.TrailerUrl != nil {
		return *x.TrailerUrl
	}
	return ""
}

func (x *Movie) GetTagline() string {
	if x != nil && x.Tagline != nil {
		return *x.Tagline
	}
	return ""
}

func (x *Movie) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *Movie) GetDownloadable() bool {
	if x != nil && x.Downloadable != nil {
		return *x.Downloadable
	}
	return false
}

func (x *Movie) GetRecommendedMovies() []int32 {
	if x != nil {
		return x.RecommendedMovies
	}
	return nil
}

func (x *Movie) GetAudioTracks() []*AudioTrack {
	if x != nil {
		return x.AudioTracks
	}
	return nil
}

func (x *Movie) GetSubtitles() []*Subtitle {
	if x != nil {
		return x.Subtitles
	}
	return nil
}

func (x *Movie) GetStatistics() *Statistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Movie) GetUserRating() Rating {
	if x != nil && x.UserRating != nil {
		return *x.UserRating
	}
	return Rating_None
}

func (x *Movie) GetBannerUrl() string {
	if x != nil && x.BannerUrl != nil {
		return *x.BannerUrl
	}
	return ""
}

func (x *Movie) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Movie) GetReleaseDate() int64 {
	if x != nil && x.ReleaseDate != nil {
		return *x.ReleaseDate
	}
	return 0
}

func (x *Movie) GetReleased() bool {
	if x != nil && x.Released != nil {
		return *x.Released
	}
	return false
}

func (x *Movie) GetBoughtPeriod() int32 {
	if x != nil && x.BoughtPeriod != nil {
		return *x.BoughtPeriod
	}
	return 0
}

func (x *Movie) GetAvailabilityInfo() string {
	if x != nil && x.AvailabilityInfo != nil {
		return *x.AvailabilityInfo
	}
	return ""
}

func (x *Movie) GetSimilarMovies() []int32 {
	if x != nil {
		return x.SimilarMovies
	}
	return nil
}

func (x *Movie) GetEndCredits() int32 {
	if x != nil && x.EndCredits != nil {
		return *x.EndCredits
	}
	return 0
}

func (x *Movie) GetRatingSweetTv() float32 {
	if x != nil && x.RatingSweetTv != nil {
		return *x.RatingSweetTv
	}
	return 0
}

func (x *Movie) GetFollowingMovies() []int32 {
	if x != nil {
		return x.FollowingMovies
	}
	return nil
}

func (x *Movie) GetVideoQuality() int32 {
	if x != nil && x.VideoQuality != nil {
		return *x.VideoQuality
	}
	return 0
}

func (x *Movie) GetAvailabilityInfoColor() string {
	if x != nil && x.AvailabilityInfoColor != nil {
		return *x.AvailabilityInfoColor
	}
	return ""
}

func (x *Movie) GetChannelId() int32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *Movie) GetEpgId() int32 {
	if x != nil && x.EpgId != nil {
		return *x.EpgId
	}
	return 0
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Title *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{1}
}

func (x *Category) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Category) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type Genre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *int32  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Title     *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	IconUrl   *string `protobuf:"bytes,3,opt,name=icon_url,json=iconUrl" json:"icon_url,omitempty"`
	Slug      *string `protobuf:"bytes,4,opt,name=slug" json:"slug,omitempty"`
	BannerUrl *string `protobuf:"bytes,5,opt,name=banner_url,json=bannerUrl" json:"banner_url,omitempty"`
	IconV2Url *string `protobuf:"bytes,6,opt,name=icon_v2_url,json=iconV2Url" json:"icon_v2_url,omitempty"`
}

func (x *Genre) Reset() {
	*x = Genre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Genre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Genre) ProtoMessage() {}

func (x *Genre) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Genre.ProtoReflect.Descriptor instead.
func (*Genre) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{2}
}

func (x *Genre) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Genre) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Genre) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *Genre) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *Genre) GetBannerUrl() string {
	if x != nil && x.BannerUrl != nil {
		return *x.BannerUrl
	}
	return ""
}

func (x *Genre) GetIconV2Url() string {
	if x != nil && x.IconV2Url != nil {
		return *x.IconV2Url
	}
	return ""
}

type Subgenre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *int32  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Title     *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	IconUrl   *string `protobuf:"bytes,3,opt,name=icon_url,json=iconUrl" json:"icon_url,omitempty"`
	Slug      *string `protobuf:"bytes,4,opt,name=slug" json:"slug,omitempty"`
	BannerUrl *string `protobuf:"bytes,5,opt,name=banner_url,json=bannerUrl" json:"banner_url,omitempty"`
	IconV2Url *string `protobuf:"bytes,6,opt,name=icon_v2_url,json=iconV2Url" json:"icon_v2_url,omitempty"`
}

func (x *Subgenre) Reset() {
	*x = Subgenre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subgenre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subgenre) ProtoMessage() {}

func (x *Subgenre) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subgenre.ProtoReflect.Descriptor instead.
func (*Subgenre) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{3}
}

func (x *Subgenre) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Subgenre) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Subgenre) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *Subgenre) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *Subgenre) GetBannerUrl() string {
	if x != nil && x.BannerUrl != nil {
		return *x.BannerUrl
	}
	return ""
}

func (x *Subgenre) GetIconV2Url() string {
	if x != nil && x.IconV2Url != nil {
		return *x.IconV2Url
	}
	return ""
}

type Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Title *string `protobuf:"bytes,2,req,name=title" json:"title,omitempty"`
	Code  *string `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
	Slug  *string `protobuf:"bytes,4,opt,name=slug" json:"slug,omitempty"`
}

func (x *Country) Reset() {
	*x = Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{4}
}

func (x *Country) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Country) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Country) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *Country) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

type Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *int32        `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Type           *Section_Type `protobuf:"varint,2,opt,name=type,enum=movie_service.Section_Type" json:"type,omitempty"`
	Title          *string       `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	IconUrl        *string       `protobuf:"bytes,4,opt,name=icon_url,json=iconUrl" json:"icon_url,omitempty"`
	BannerPage     *int32        `protobuf:"varint,5,opt,name=banner_page,json=bannerPage" json:"banner_page,omitempty"`
	CollectionType *int32        `protobuf:"varint,6,opt,name=collection_type,json=collectionType" json:"collection_type,omitempty"`
}

func (x *Section) Reset() {
	*x = Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Section) ProtoMessage() {}

func (x *Section) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Section.ProtoReflect.Descriptor instead.
func (*Section) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{5}
}

func (x *Section) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Section) GetType() Section_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Section_MAIN
}

func (x *Section) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Section) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *Section) GetBannerPage() int32 {
	if x != nil && x.BannerPage != nil {
		return *x.BannerPage
	}
	return 0
}

func (x *Section) GetCollectionType() int32 {
	if x != nil && x.CollectionType != nil {
		return *x.CollectionType
	}
	return 0
}

type BannerResolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Width  *int32 `protobuf:"varint,2,req,name=width" json:"width,omitempty"`
	Height *int32 `protobuf:"varint,3,req,name=height" json:"height,omitempty"`
}

func (x *BannerResolution) Reset() {
	*x = BannerResolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerResolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerResolution) ProtoMessage() {}

func (x *BannerResolution) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerResolution.ProtoReflect.Descriptor instead.
func (*BannerResolution) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{6}
}

func (x *BannerResolution) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BannerResolution) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *BannerResolution) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type CabSectionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32               `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Type  *CabSectionItem_Type `protobuf:"varint,2,opt,name=type,enum=movie_service.CabSectionItem_Type" json:"type,omitempty"`
	Title *string              `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
}

func (x *CabSectionItem) Reset() {
	*x = CabSectionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CabSectionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CabSectionItem) ProtoMessage() {}

func (x *CabSectionItem) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CabSectionItem.ProtoReflect.Descriptor instead.
func (*CabSectionItem) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{7}
}

func (x *CabSectionItem) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CabSectionItem) GetType() CabSectionItem_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CabSectionItem_BalanceTopUpButton
}

func (x *CabSectionItem) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CabSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32            `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Type  *CabSection_Type  `protobuf:"varint,2,opt,name=type,enum=movie_service.CabSection_Type" json:"type,omitempty"`
	Items []*CabSectionItem `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	Title *string           `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
}

func (x *CabSection) Reset() {
	*x = CabSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CabSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CabSection) ProtoMessage() {}

func (x *CabSection) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CabSection.ProtoReflect.Descriptor instead.
func (*CabSection) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{8}
}

func (x *CabSection) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CabSection) GetType() CabSection_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CabSection_PersonalData
}

func (x *CabSection) GetItems() []*CabSectionItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CabSection) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type Poster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosterUrl   *string             `protobuf:"bytes,1,req,name=poster_url,json=posterUrl" json:"poster_url,omitempty"`
	Orientation *Poster_Orientation `protobuf:"varint,2,req,name=orientation,enum=movie_service.Poster_Orientation" json:"orientation,omitempty"`
	Dimensions  *Poster_Dimensions  `protobuf:"bytes,3,req,name=dimensions" json:"dimensions,omitempty"`
	Blur        *bool               `protobuf:"varint,4,opt,name=blur" json:"blur,omitempty"`
}

func (x *Poster) Reset() {
	*x = Poster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poster) ProtoMessage() {}

func (x *Poster) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poster.ProtoReflect.Descriptor instead.
func (*Poster) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{9}
}

func (x *Poster) GetPosterUrl() string {
	if x != nil && x.PosterUrl != nil {
		return *x.PosterUrl
	}
	return ""
}

func (x *Poster) GetOrientation() Poster_Orientation {
	if x != nil && x.Orientation != nil {
		return *x.Orientation
	}
	return Poster_Horizontal
}

func (x *Poster) GetDimensions() *Poster_Dimensions {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *Poster) GetBlur() bool {
	if x != nil && x.Blur != nil {
		return *x.Blur
	}
	return false
}

type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *int32  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Name         *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	NameOriginal *string `protobuf:"bytes,3,opt,name=name_original,json=nameOriginal" json:"name_original,omitempty"`
	Role         *Role   `protobuf:"bytes,4,opt,name=role" json:"role,omitempty"`
	ImageUrl     *string `protobuf:"bytes,5,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	Biography    *string `protobuf:"bytes,6,opt,name=biography" json:"biography,omitempty"`
	Roles        []*Role `protobuf:"bytes,7,rep,name=roles" json:"roles,omitempty"`
	Movies       []int32 `protobuf:"varint,8,rep,name=movies" json:"movies,omitempty"`
	BannerUrl    *string `protobuf:"bytes,9,opt,name=banner_url,json=bannerUrl" json:"banner_url,omitempty"`
	PlaceOfBirth *string `protobuf:"bytes,10,opt,name=place_of_birth,json=placeOfBirth" json:"place_of_birth,omitempty"`
	DateOfBirth  *int64  `protobuf:"zigzag64,11,opt,name=date_of_birth,json=dateOfBirth" json:"date_of_birth,omitempty"`
	Genres       []int32 `protobuf:"varint,12,rep,name=genres" json:"genres,omitempty"`
	Slug         *string `protobuf:"bytes,13,opt,name=slug" json:"slug,omitempty"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{10}
}

func (x *Person) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Person) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Person) GetNameOriginal() string {
	if x != nil && x.NameOriginal != nil {
		return *x.NameOriginal
	}
	return ""
}

func (x *Person) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Person) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *Person) GetBiography() string {
	if x != nil && x.Biography != nil {
		return *x.Biography
	}
	return ""
}

func (x *Person) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Person) GetMovies() []int32 {
	if x != nil {
		return x.Movies
	}
	return nil
}

func (x *Person) GetBannerUrl() string {
	if x != nil && x.BannerUrl != nil {
		return *x.BannerUrl
	}
	return ""
}

func (x *Person) GetPlaceOfBirth() string {
	if x != nil && x.PlaceOfBirth != nil {
		return *x.PlaceOfBirth
	}
	return ""
}

func (x *Person) GetDateOfBirth() int64 {
	if x != nil && x.DateOfBirth != nil {
		return *x.DateOfBirth
	}
	return 0
}

func (x *Person) GetGenres() []int32 {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *Person) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Title *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{11}
}

func (x *Role) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Role) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type Season struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *int32     `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Title      *string    `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Episodes   []*Episode `protobuf:"bytes,3,rep,name=episodes" json:"episodes,omitempty"`
	OwnerId    *int32     `protobuf:"varint,4,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	ExternalId *int32     `protobuf:"varint,5,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
}

func (x *Season) Reset() {
	*x = Season{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Season) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Season) ProtoMessage() {}

func (x *Season) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Season.ProtoReflect.Descriptor instead.
func (*Season) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{12}
}

func (x *Season) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Season) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Season) GetEpisodes() []*Episode {
	if x != nil {
		return x.Episodes
	}
	return nil
}

func (x *Season) GetOwnerId() int32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *Season) GetExternalId() int32 {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return 0
}

type Episode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *int32        `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Title              *string       `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Duration           *int32        `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	ExternalId         *int32        `protobuf:"varint,4,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	WatchInfo          *WatchInfo    `protobuf:"bytes,5,opt,name=watch_info,json=watchInfo" json:"watch_info,omitempty"`
	PreviewUrl         *string       `protobuf:"bytes,6,opt,name=preview_url,json=previewUrl" json:"preview_url,omitempty"`
	EndCredits         *int32        `protobuf:"varint,7,opt,name=end_credits,json=endCredits" json:"end_credits,omitempty"`
	AudioTracks        []*AudioTrack `protobuf:"bytes,8,rep,name=audio_tracks,json=audioTracks" json:"audio_tracks,omitempty"`
	Subtitles          []*Subtitle   `protobuf:"bytes,9,rep,name=subtitles" json:"subtitles,omitempty"`
	StartLoadingScreen *int32        `protobuf:"varint,10,opt,name=start_loading_screen,json=startLoadingScreen" json:"start_loading_screen,omitempty"`
	EndLoadingScreen   *int32        `protobuf:"varint,11,opt,name=end_loading_screen,json=endLoadingScreen" json:"end_loading_screen,omitempty"`
}

func (x *Episode) Reset() {
	*x = Episode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Episode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Episode) ProtoMessage() {}

func (x *Episode) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Episode.ProtoReflect.Descriptor instead.
func (*Episode) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{13}
}

func (x *Episode) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Episode) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Episode) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *Episode) GetExternalId() int32 {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return 0
}

func (x *Episode) GetWatchInfo() *WatchInfo {
	if x != nil {
		return x.WatchInfo
	}
	return nil
}

func (x *Episode) GetPreviewUrl() string {
	if x != nil && x.PreviewUrl != nil {
		return *x.PreviewUrl
	}
	return ""
}

func (x *Episode) GetEndCredits() int32 {
	if x != nil && x.EndCredits != nil {
		return *x.EndCredits
	}
	return 0
}

func (x *Episode) GetAudioTracks() []*AudioTrack {
	if x != nil {
		return x.AudioTracks
	}
	return nil
}

func (x *Episode) GetSubtitles() []*Subtitle {
	if x != nil {
		return x.Subtitles
	}
	return nil
}

func (x *Episode) GetStartLoadingScreen() int32 {
	if x != nil && x.StartLoadingScreen != nil {
		return *x.StartLoadingScreen
	}
	return 0
}

func (x *Episode) GetEndLoadingScreen() int32 {
	if x != nil && x.EndLoadingScreen != nil {
		return *x.EndLoadingScreen
	}
	return 0
}

type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *int32             `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Title             *string            `protobuf:"bytes,2,req,name=title" json:"title,omitempty"`
	Type              *Collection_Type   `protobuf:"varint,3,opt,name=type,enum=movie_service.Collection_Type" json:"type,omitempty"`
	IdList            []int32            `protobuf:"varint,4,rep,name=id_list,json=idList" json:"id_list,omitempty"`
	Slug              *string            `protobuf:"bytes,5,opt,name=slug" json:"slug,omitempty"`
	ItemList          []*CollectionItem  `protobuf:"bytes,6,rep,name=item_list,json=itemList" json:"item_list,omitempty"`
	CollectionList    []*Collection      `protobuf:"bytes,7,rep,name=collection_list,json=collectionList" json:"collection_list,omitempty"`
	ImageUrl          *string            `protobuf:"bytes,9,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	DarkThemeImageUrl *string            `protobuf:"bytes,10,opt,name=dark_theme_image_url,json=darkThemeImageUrl" json:"dark_theme_image_url,omitempty"`
	Action            *PromoBannerAction `protobuf:"varint,11,opt,name=action,enum=movie_service.PromoBannerAction" json:"action,omitempty"`
	Closable          *bool              `protobuf:"varint,12,opt,name=closable" json:"closable,omitempty"`
	SecondaryIdList   []int32            `protobuf:"varint,13,rep,name=secondary_id_list,json=secondaryIdList" json:"secondary_id_list,omitempty"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{14}
}

func (x *Collection) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Collection) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Collection) GetType() Collection_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Collection_Movie
}

func (x *Collection) GetIdList() []int32 {
	if x != nil {
		return x.IdList
	}
	return nil
}

func (x *Collection) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *Collection) GetItemList() []*CollectionItem {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *Collection) GetCollectionList() []*Collection {
	if x != nil {
		return x.CollectionList
	}
	return nil
}

func (x *Collection) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *Collection) GetDarkThemeImageUrl() string {
	if x != nil && x.DarkThemeImageUrl != nil {
		return *x.DarkThemeImageUrl
	}
	return ""
}

func (x *Collection) GetAction() PromoBannerAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return PromoBannerAction_SHOW_CHANNEL
}

func (x *Collection) GetClosable() bool {
	if x != nil && x.Closable != nil {
		return *x.Closable
	}
	return false
}

func (x *Collection) GetSecondaryIdList() []int32 {
	if x != nil {
		return x.SecondaryIdList
	}
	return nil
}

type CollectionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SecondaryId *int32  `protobuf:"varint,2,opt,name=secondary_id,json=secondaryId" json:"secondary_id,omitempty"`
	Title       *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Genres      *string `protobuf:"bytes,4,opt,name=genres" json:"genres,omitempty"`
	ImageUrl    *string `protobuf:"bytes,5,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	AvailableIn *string `protobuf:"bytes,6,opt,name=available_in,json=availableIn" json:"available_in,omitempty"`
}

func (x *CollectionItem) Reset() {
	*x = CollectionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionItem) ProtoMessage() {}

func (x *CollectionItem) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionItem.ProtoReflect.Descriptor instead.
func (*CollectionItem) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{15}
}

func (x *CollectionItem) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CollectionItem) GetSecondaryId() int32 {
	if x != nil && x.SecondaryId != nil {
		return *x.SecondaryId
	}
	return 0
}

func (x *CollectionItem) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CollectionItem) GetGenres() string {
	if x != nil && x.Genres != nil {
		return *x.Genres
	}
	return ""
}

func (x *CollectionItem) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *CollectionItem) GetAvailableIn() string {
	if x != nil && x.AvailableIn != nil {
		return *x.AvailableIn
	}
	return ""
}

type SortMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *int32  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Title   *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	IconUrl *string `protobuf:"bytes,3,opt,name=icon_url,json=iconUrl" json:"icon_url,omitempty"`
}

func (x *SortMode) Reset() {
	*x = SortMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortMode) ProtoMessage() {}

func (x *SortMode) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortMode.ProtoReflect.Descriptor instead.
func (*SortMode) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{16}
}

func (x *SortMode) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SortMode) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SortMode) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

type Period struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	RentHours  *int32 `protobuf:"varint,2,opt,name=rent_hours,json=rentHours" json:"rent_hours,omitempty"`
	WatchHours *int32 `protobuf:"varint,3,opt,name=watch_hours,json=watchHours" json:"watch_hours,omitempty"`
}

func (x *Period) Reset() {
	*x = Period{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Period) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Period) ProtoMessage() {}

func (x *Period) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Period.ProtoReflect.Descriptor instead.
func (*Period) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{17}
}

func (x *Period) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Period) GetRentHours() int32 {
	if x != nil && x.RentHours != nil {
		return *x.RentHours
	}
	return 0
}

func (x *Period) GetWatchHours() int32 {
	if x != nil && x.WatchHours != nil {
		return *x.WatchHours
	}
	return 0
}

type PremiereBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int32  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	ImageUrl *string `protobuf:"bytes,2,req,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	Title    *string `protobuf:"bytes,3,req,name=title" json:"title,omitempty"`
	MovieId  *int32  `protobuf:"varint,4,req,name=movie_id,json=movieId" json:"movie_id,omitempty"`
}

func (x *PremiereBanner) Reset() {
	*x = PremiereBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PremiereBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PremiereBanner) ProtoMessage() {}

func (x *PremiereBanner) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PremiereBanner.ProtoReflect.Descriptor instead.
func (*PremiereBanner) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{18}
}

func (x *PremiereBanner) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PremiereBanner) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *PremiereBanner) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PremiereBanner) GetMovieId() int32 {
	if x != nil && x.MovieId != nil {
		return *x.MovieId
	}
	return 0
}

type VideoQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Name        *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	IconUrl     *string `protobuf:"bytes,4,opt,name=icon_url,json=iconUrl" json:"icon_url,omitempty"`
}

func (x *VideoQuality) Reset() {
	*x = VideoQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoQuality) ProtoMessage() {}

func (x *VideoQuality) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoQuality.ProtoReflect.Descriptor instead.
func (*VideoQuality) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{19}
}

func (x *VideoQuality) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *VideoQuality) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VideoQuality) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *VideoQuality) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

type Language struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title   *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	IconUrl *string `protobuf:"bytes,3,opt,name=icon_url,json=iconUrl" json:"icon_url,omitempty"`
	IsoCode *string `protobuf:"bytes,4,opt,name=iso_code,json=isoCode" json:"iso_code,omitempty"`
	Slug    *string `protobuf:"bytes,5,opt,name=slug" json:"slug,omitempty"`
}

func (x *Language) Reset() {
	*x = Language{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Language) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Language) ProtoMessage() {}

func (x *Language) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Language.ProtoReflect.Descriptor instead.
func (*Language) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{20}
}

func (x *Language) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Language) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Language) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *Language) GetIsoCode() string {
	if x != nil && x.IsoCode != nil {
		return *x.IsoCode
	}
	return ""
}

func (x *Language) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

type MovieOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *int32                `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	OfferType     *MovieOffer_OfferType `protobuf:"varint,2,req,name=offer_type,json=offerType,enum=movie_service.MovieOffer_OfferType" json:"offer_type,omitempty"`
	VideoQuality  *VideoQuality         `protobuf:"bytes,3,req,name=video_quality,json=videoQuality" json:"video_quality,omitempty"`
	Title         *string               `protobuf:"bytes,4,req,name=title" json:"title,omitempty"`
	OfferIcon     *string               `protobuf:"bytes,5,req,name=offer_icon,json=offerIcon" json:"offer_icon,omitempty"`
	Period        *Period               `protobuf:"bytes,6,req,name=period" json:"period,omitempty"`
	Price         *int32                `protobuf:"varint,7,req,name=price" json:"price,omitempty"`
	ProductId     *string               `protobuf:"bytes,8,req,name=product_id,json=productId" json:"product_id,omitempty"`
	StoreId       *int32                `protobuf:"varint,9,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	StoreStatus   *int32                `protobuf:"varint,10,opt,name=store_status,json=storeStatus" json:"store_status,omitempty"`
	Discounted    *bool                 `protobuf:"varint,11,opt,name=discounted" json:"discounted,omitempty"`
	OriginalPrice *int32                `protobuf:"varint,12,opt,name=original_price,json=originalPrice" json:"original_price,omitempty"`
	TierId        *int32                `protobuf:"varint,13,opt,name=tier_id,json=tierId" json:"tier_id,omitempty"`
}

func (x *MovieOffer) Reset() {
	*x = MovieOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieOffer) ProtoMessage() {}

func (x *MovieOffer) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieOffer.ProtoReflect.Descriptor instead.
func (*MovieOffer) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{21}
}

func (x *MovieOffer) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MovieOffer) GetOfferType() MovieOffer_OfferType {
	if x != nil && x.OfferType != nil {
		return *x.OfferType
	}
	return MovieOffer_Buy
}

func (x *MovieOffer) GetVideoQuality() *VideoQuality {
	if x != nil {
		return x.VideoQuality
	}
	return nil
}

func (x *MovieOffer) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *MovieOffer) GetOfferIcon() string {
	if x != nil && x.OfferIcon != nil {
		return *x.OfferIcon
	}
	return ""
}

func (x *MovieOffer) GetPeriod() *Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *MovieOffer) GetPrice() int32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *MovieOffer) GetProductId() string {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return ""
}

func (x *MovieOffer) GetStoreId() int32 {
	if x != nil && x.StoreId != nil {
		return *x.StoreId
	}
	return 0
}

func (x *MovieOffer) GetStoreStatus() int32 {
	if x != nil && x.StoreStatus != nil {
		return *x.StoreStatus
	}
	return 0
}

func (x *MovieOffer) GetDiscounted() bool {
	if x != nil && x.Discounted != nil {
		return *x.Discounted
	}
	return false
}

func (x *MovieOffer) GetOriginalPrice() int32 {
	if x != nil && x.OriginalPrice != nil {
		return *x.OriginalPrice
	}
	return 0
}

func (x *MovieOffer) GetTierId() int32 {
	if x != nil && x.TierId != nil {
		return *x.TierId
	}
	return 0
}

type AudioTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       *int32  `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
	Language    *string `protobuf:"bytes,2,req,name=language" json:"language,omitempty"`
	SoundScheme *string `protobuf:"bytes,3,req,name=sound_scheme,json=soundScheme" json:"sound_scheme,omitempty"`
	IsoCode     *string `protobuf:"bytes,4,opt,name=iso_code,json=isoCode" json:"iso_code,omitempty"`
}

func (x *AudioTrack) Reset() {
	*x = AudioTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioTrack) ProtoMessage() {}

func (x *AudioTrack) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioTrack.ProtoReflect.Descriptor instead.
func (*AudioTrack) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{22}
}

func (x *AudioTrack) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *AudioTrack) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *AudioTrack) GetSoundScheme() string {
	if x != nil && x.SoundScheme != nil {
		return *x.SoundScheme
	}
	return ""
}

func (x *AudioTrack) GetIsoCode() string {
	if x != nil && x.IsoCode != nil {
		return *x.IsoCode
	}
	return ""
}

type Subtitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language *string `protobuf:"bytes,1,req,name=language" json:"language,omitempty"`
	IsoCode  *string `protobuf:"bytes,2,req,name=iso_code,json=isoCode" json:"iso_code,omitempty"`
	Url      *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Forced   *bool   `protobuf:"varint,4,opt,name=forced" json:"forced,omitempty"`
}

func (x *Subtitle) Reset() {
	*x = Subtitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subtitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subtitle) ProtoMessage() {}

func (x *Subtitle) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subtitle.ProtoReflect.Descriptor instead.
func (*Subtitle) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{23}
}

func (x *Subtitle) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *Subtitle) GetIsoCode() string {
	if x != nil && x.IsoCode != nil {
		return *x.IsoCode
	}
	return ""
}

func (x *Subtitle) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Subtitle) GetForced() bool {
	if x != nil && x.Forced != nil {
		return *x.Forced
	}
	return false
}

type Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LikeCount    *int32 `protobuf:"varint,1,opt,name=like_count,json=likeCount" json:"like_count,omitempty"`
	DislikeCount *int32 `protobuf:"varint,2,opt,name=dislike_count,json=dislikeCount" json:"dislike_count,omitempty"`
}

func (x *Statistics) Reset() {
	*x = Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistics) ProtoMessage() {}

func (x *Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistics.ProtoReflect.Descriptor instead.
func (*Statistics) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{24}
}

func (x *Statistics) GetLikeCount() int32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *Statistics) GetDislikeCount() int32 {
	if x != nil && x.DislikeCount != nil {
		return *x.DislikeCount
	}
	return 0
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *int32      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Author     *string     `protobuf:"bytes,2,opt,name=author" json:"author,omitempty"`
	Text       *string     `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	Editable   *bool       `protobuf:"varint,4,opt,name=editable" json:"editable,omitempty"`
	Delible    *bool       `protobuf:"varint,5,opt,name=delible" json:"delible,omitempty"`
	Statistics *Statistics `protobuf:"bytes,6,opt,name=statistics" json:"statistics,omitempty"`
	UserRating *Rating     `protobuf:"varint,7,opt,name=user_rating,json=userRating,enum=movie_service.Rating" json:"user_rating,omitempty"`
	Replies    []*Comment  `protobuf:"bytes,8,rep,name=replies" json:"replies,omitempty"`
	CreatedAt  *uint64     `protobuf:"varint,9,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt  *uint64     `protobuf:"varint,10,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	Rating     *float32    `protobuf:"fixed32,11,opt,name=rating" json:"rating,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{25}
}

func (x *Comment) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Comment) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *Comment) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Comment) GetEditable() bool {
	if x != nil && x.Editable != nil {
		return *x.Editable
	}
	return false
}

func (x *Comment) GetDelible() bool {
	if x != nil && x.Delible != nil {
		return *x.Delible
	}
	return false
}

func (x *Comment) GetStatistics() *Statistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Comment) GetUserRating() Rating {
	if x != nil && x.UserRating != nil {
		return *x.UserRating
	}
	return Rating_None
}

func (x *Comment) GetReplies() []*Comment {
	if x != nil {
		return x.Replies
	}
	return nil
}

func (x *Comment) GetCreatedAt() uint64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *Comment) GetUpdatedAt() uint64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *Comment) GetRating() float32 {
	if x != nil && x.Rating != nil {
		return *x.Rating
	}
	return 0
}

type Owner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Title *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (x *Owner) Reset() {
	*x = Owner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Owner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Owner) ProtoMessage() {}

func (x *Owner) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Owner.ProtoReflect.Descriptor instead.
func (*Owner) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{26}
}

func (x *Owner) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Owner) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type WatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastPos           *int32 `protobuf:"varint,1,opt,name=last_pos,json=lastPos" json:"last_pos,omitempty"`
	LastPosInPercents *int32 `protobuf:"varint,2,opt,name=last_pos_in_percents,json=lastPosInPercents" json:"last_pos_in_percents,omitempty"`
	LastEpisodeId     *int32 `protobuf:"varint,3,opt,name=last_episode_id,json=lastEpisodeId" json:"last_episode_id,omitempty"`
	LastTime          *int64 `protobuf:"varint,4,opt,name=last_time,json=lastTime" json:"last_time,omitempty"`
	ReferralMovieId   *int32 `protobuf:"varint,5,opt,name=referral_movie_id,json=referralMovieId" json:"referral_movie_id,omitempty"`
	MovieId           *int32 `protobuf:"varint,6,opt,name=movie_id,json=movieId" json:"movie_id,omitempty"`
	EpisodeId         *int32 `protobuf:"varint,7,opt,name=episode_id,json=episodeId" json:"episode_id,omitempty"`
}

func (x *WatchInfo) Reset() {
	*x = WatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInfo) ProtoMessage() {}

func (x *WatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInfo.ProtoReflect.Descriptor instead.
func (*WatchInfo) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{27}
}

func (x *WatchInfo) GetLastPos() int32 {
	if x != nil && x.LastPos != nil {
		return *x.LastPos
	}
	return 0
}

func (x *WatchInfo) GetLastPosInPercents() int32 {
	if x != nil && x.LastPosInPercents != nil {
		return *x.LastPosInPercents
	}
	return 0
}

func (x *WatchInfo) GetLastEpisodeId() int32 {
	if x != nil && x.LastEpisodeId != nil {
		return *x.LastEpisodeId
	}
	return 0
}

func (x *WatchInfo) GetLastTime() int64 {
	if x != nil && x.LastTime != nil {
		return *x.LastTime
	}
	return 0
}

func (x *WatchInfo) GetReferralMovieId() int32 {
	if x != nil && x.ReferralMovieId != nil {
		return *x.ReferralMovieId
	}
	return 0
}

func (x *WatchInfo) GetMovieId() int32 {
	if x != nil && x.MovieId != nil {
		return *x.MovieId
	}
	return 0
}

func (x *WatchInfo) GetEpisodeId() int32 {
	if x != nil && x.EpisodeId != nil {
		return *x.EpisodeId
	}
	return 0
}

type ExternalIdPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId    *int32 `protobuf:"varint,1,req,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	ExternalId *int32 `protobuf:"varint,2,req,name=external_id,json=externalId" json:"external_id,omitempty"`
	Preferred  *bool  `protobuf:"varint,3,opt,name=preferred,def=0" json:"preferred,omitempty"`
}

// Default values for ExternalIdPair fields.
const (
	Default_ExternalIdPair_Preferred = bool(false)
)

func (x *ExternalIdPair) Reset() {
	*x = ExternalIdPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalIdPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalIdPair) ProtoMessage() {}

func (x *ExternalIdPair) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalIdPair.ProtoReflect.Descriptor instead.
func (*ExternalIdPair) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{28}
}

func (x *ExternalIdPair) GetOwnerId() int32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *ExternalIdPair) GetExternalId() int32 {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return 0
}

func (x *ExternalIdPair) GetPreferred() bool {
	if x != nil && x.Preferred != nil {
		return *x.Preferred
	}
	return Default_ExternalIdPair_Preferred
}

type Recommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *Recommendation_RecommendationType `protobuf:"varint,1,req,name=type,enum=movie_service.Recommendation_RecommendationType" json:"type,omitempty"`
	ContentId   *int32                             `protobuf:"varint,2,req,name=content_id,json=contentId" json:"content_id,omitempty"`
	ImageUrl    *string                            `protobuf:"bytes,3,req,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	Title       *string                            `protobuf:"bytes,4,req,name=title" json:"title,omitempty"`
	Description *string                            `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	TrailerUrl  *string                            `protobuf:"bytes,6,opt,name=trailer_url,json=trailerUrl" json:"trailer_url,omitempty"`
	SecondaryId *int32                             `protobuf:"varint,7,opt,name=secondary_id,json=secondaryId" json:"secondary_id,omitempty"`
}

func (x *Recommendation) Reset() {
	*x = Recommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recommendation) ProtoMessage() {}

func (x *Recommendation) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recommendation.ProtoReflect.Descriptor instead.
func (*Recommendation) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{29}
}

func (x *Recommendation) GetType() Recommendation_RecommendationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Recommendation_Channel
}

func (x *Recommendation) GetContentId() int32 {
	if x != nil && x.ContentId != nil {
		return *x.ContentId
	}
	return 0
}

func (x *Recommendation) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *Recommendation) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Recommendation) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Recommendation) GetTrailerUrl() string {
	if x != nil && x.TrailerUrl != nil {
		return *x.TrailerUrl
	}
	return ""
}

func (x *Recommendation) GetSecondaryId() int32 {
	if x != nil && x.SecondaryId != nil {
		return *x.SecondaryId
	}
	return 0
}

type GetGenreMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	GenreId *int32  `protobuf:"varint,2,req,name=genre_id,json=genreId" json:"genre_id,omitempty"`
}

func (x *GetGenreMoviesRequest) Reset() {
	*x = GetGenreMoviesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGenreMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGenreMoviesRequest) ProtoMessage() {}

func (x *GetGenreMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGenreMoviesRequest.ProtoReflect.Descriptor instead.
func (*GetGenreMoviesRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{30}
}

func (x *GetGenreMoviesRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *GetGenreMoviesRequest) GetGenreId() int32 {
	if x != nil && x.GenreId != nil {
		return *x.GenreId
	}
	return 0
}

type GetGenreMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *GetGenreMoviesResponse_Result `protobuf:"varint,1,req,name=result,enum=movie_service.GetGenreMoviesResponse_Result" json:"result,omitempty"`
	Movies []int32                        `protobuf:"varint,2,rep,name=movies" json:"movies,omitempty"`
}

func (x *GetGenreMoviesResponse) Reset() {
	*x = GetGenreMoviesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGenreMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGenreMoviesResponse) ProtoMessage() {}

func (x *GetGenreMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGenreMoviesResponse.ProtoReflect.Descriptor instead.
func (*GetGenreMoviesResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{31}
}

func (x *GetGenreMoviesResponse) GetResult() GetGenreMoviesResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return GetGenreMoviesResponse_OK
}

func (x *GetGenreMoviesResponse) GetMovies() []int32 {
	if x != nil {
		return x.Movies
	}
	return nil
}

type GetSubgenreMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth       *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	SubgenreId *int32  `protobuf:"varint,2,req,name=subgenre_id,json=subgenreId" json:"subgenre_id,omitempty"`
}

func (x *GetSubgenreMoviesRequest) Reset() {
	*x = GetSubgenreMoviesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubgenreMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubgenreMoviesRequest) ProtoMessage() {}

func (x *GetSubgenreMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubgenreMoviesRequest.ProtoReflect.Descriptor instead.
func (*GetSubgenreMoviesRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{32}
}

func (x *GetSubgenreMoviesRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *GetSubgenreMoviesRequest) GetSubgenreId() int32 {
	if x != nil && x.SubgenreId != nil {
		return *x.SubgenreId
	}
	return 0
}

type GetSubgenreMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *GetSubgenreMoviesResponse_Result `protobuf:"varint,1,req,name=result,enum=movie_service.GetSubgenreMoviesResponse_Result" json:"result,omitempty"`
	Movies []int32                           `protobuf:"varint,2,rep,name=movies" json:"movies,omitempty"`
}

func (x *GetSubgenreMoviesResponse) Reset() {
	*x = GetSubgenreMoviesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubgenreMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubgenreMoviesResponse) ProtoMessage() {}

func (x *GetSubgenreMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubgenreMoviesResponse.ProtoReflect.Descriptor instead.
func (*GetSubgenreMoviesResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{33}
}

func (x *GetSubgenreMoviesResponse) GetResult() GetSubgenreMoviesResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return GetSubgenreMoviesResponse_OK
}

func (x *GetSubgenreMoviesResponse) GetMovies() []int32 {
	if x != nil {
		return x.Movies
	}
	return nil
}

type GetMovieInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth             *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Movies           []int32 `protobuf:"varint,2,rep,name=movies" json:"movies,omitempty"`
	Offset           *int32  `protobuf:"varint,3,opt,name=offset,def=0" json:"offset,omitempty"`
	Limit            *int32  `protobuf:"varint,4,opt,name=limit,def=0" json:"limit,omitempty"`
	NeedExtendedInfo *bool   `protobuf:"varint,5,opt,name=need_extended_info,json=needExtendedInfo,def=1" json:"need_extended_info,omitempty"`
	SortModeId       *int32  `protobuf:"varint,6,opt,name=sort_mode_id,json=sortModeId" json:"sort_mode_id,omitempty"`
	NeedBundleOffers *bool   `protobuf:"varint,7,opt,name=need_bundle_offers,json=needBundleOffers" json:"need_bundle_offers,omitempty"`
}

// Default values for GetMovieInfoRequest fields.
const (
	Default_GetMovieInfoRequest_Offset           = int32(0)
	Default_GetMovieInfoRequest_Limit            = int32(0)
	Default_GetMovieInfoRequest_NeedExtendedInfo = bool(true)
)

func (x *GetMovieInfoRequest) Reset() {
	*x = GetMovieInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMovieInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieInfoRequest) ProtoMessage() {}

func (x *GetMovieInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieInfoRequest.ProtoReflect.Descriptor instead.
func (*GetMovieInfoRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{34}
}

func (x *GetMovieInfoRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *GetMovieInfoRequest) GetMovies() []int32 {
	if x != nil {
		return x.Movies
	}
	return nil
}

func (x *GetMovieInfoRequest) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return Default_GetMovieInfoRequest_Offset
}

func (x *GetMovieInfoRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return Default_GetMovieInfoRequest_Limit
}

func (x *GetMovieInfoRequest) GetNeedExtendedInfo() bool {
	if x != nil && x.NeedExtendedInfo != nil {
		return *x.NeedExtendedInfo
	}
	return Default_GetMovieInfoRequest_NeedExtendedInfo
}

func (x *GetMovieInfoRequest) GetSortModeId() int32 {
	if x != nil && x.SortModeId != nil {
		return *x.SortModeId
	}
	return 0
}

func (x *GetMovieInfoRequest) GetNeedBundleOffers() bool {
	if x != nil && x.NeedBundleOffers != nil {
		return *x.NeedBundleOffers
	}
	return false
}

type GetMovieInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *GetMovieInfoResponse_Result `protobuf:"varint,1,req,name=result,enum=movie_service.GetMovieInfoResponse_Result" json:"result,omitempty"`
	Movies []*Movie                     `protobuf:"bytes,2,rep,name=movies" json:"movies,omitempty"`
}

func (x *GetMovieInfoResponse) Reset() {
	*x = GetMovieInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMovieInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieInfoResponse) ProtoMessage() {}

func (x *GetMovieInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieInfoResponse.ProtoReflect.Descriptor instead.
func (*GetMovieInfoResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{35}
}

func (x *GetMovieInfoResponse) GetResult() GetMovieInfoResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return GetMovieInfoResponse_OK
}

func (x *GetMovieInfoResponse) GetMovies() []*Movie {
	if x != nil {
		return x.Movies
	}
	return nil
}

type GetConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (x *GetConfigurationRequest) Reset() {
	*x = GetConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigurationRequest) ProtoMessage() {}

func (x *GetConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{36}
}

func (x *GetConfigurationRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

type GetConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result                *GetConfigurationResponse_Result `protobuf:"varint,1,req,name=result,enum=movie_service.GetConfigurationResponse_Result" json:"result,omitempty"`
	Categories            []*Category                      `protobuf:"bytes,2,rep,name=categories" json:"categories,omitempty"`
	Countries             []*Country                       `protobuf:"bytes,3,rep,name=countries" json:"countries,omitempty"`
	Genres                []*Genre                         `protobuf:"bytes,4,rep,name=genres" json:"genres,omitempty"`
	Owners                []*Owner                         `protobuf:"bytes,5,rep,name=owners" json:"owners,omitempty"`
	Roles                 []*Role                          `protobuf:"bytes,6,rep,name=roles" json:"roles,omitempty"`
	Collections           []*Collection                    `protobuf:"bytes,7,rep,name=collections" json:"collections,omitempty"`
	SortModes             []*SortMode                      `protobuf:"bytes,8,rep,name=sort_modes,json=sortModes" json:"sort_modes,omitempty"`
	Subgenres             []*Subgenre                      `protobuf:"bytes,9,rep,name=subgenres" json:"subgenres,omitempty"`
	VideoQualities        []*VideoQuality                  `protobuf:"bytes,10,rep,name=video_qualities,json=videoQualities" json:"video_qualities,omitempty"`
	Languages             []*Language                      `protobuf:"bytes,11,rep,name=languages" json:"languages,omitempty"`
	Sections              []*Section                       `protobuf:"bytes,12,rep,name=sections" json:"sections,omitempty"`
	BannerResolutions     []*BannerResolution              `protobuf:"bytes,13,rep,name=banner_resolutions,json=bannerResolutions" json:"banner_resolutions,omitempty"`
	ScreensaverAnimations []string                         `protobuf:"bytes,14,rep,name=screensaver_animations,json=screensaverAnimations" json:"screensaver_animations,omitempty"`
	CabSections           []*CabSection                    `protobuf:"bytes,15,rep,name=cab_sections,json=cabSections" json:"cab_sections,omitempty"`
}

func (x *GetConfigurationResponse) Reset() {
	*x = GetConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigurationResponse) ProtoMessage() {}

func (x *GetConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigurationResponse.ProtoReflect.Descriptor instead.
func (*GetConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{37}
}

func (x *GetConfigurationResponse) GetResult() GetConfigurationResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return GetConfigurationResponse_OK
}

func (x *GetConfigurationResponse) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *GetConfigurationResponse) GetCountries() []*Country {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *GetConfigurationResponse) GetGenres() []*Genre {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *GetConfigurationResponse) GetOwners() []*Owner {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *GetConfigurationResponse) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *GetConfigurationResponse) GetCollections() []*Collection {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *GetConfigurationResponse) GetSortModes() []*SortMode {
	if x != nil {
		return x.SortModes
	}
	return nil
}

func (x *GetConfigurationResponse) GetSubgenres() []*Subgenre {
	if x != nil {
		return x.Subgenres
	}
	return nil
}

func (x *GetConfigurationResponse) GetVideoQualities() []*VideoQuality {
	if x != nil {
		return x.VideoQualities
	}
	return nil
}

func (x *GetConfigurationResponse) GetLanguages() []*Language {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *GetConfigurationResponse) GetSections() []*Section {
	if x != nil {
		return x.Sections
	}
	return nil
}

func (x *GetConfigurationResponse) GetBannerResolutions() []*BannerResolution {
	if x != nil {
		return x.BannerResolutions
	}
	return nil
}

func (x *GetConfigurationResponse) GetScreensaverAnimations() []string {
	if x != nil {
		return x.ScreensaverAnimations
	}
	return nil
}

func (x *GetConfigurationResponse) GetCabSections() []*CabSection {
	if x != nil {
		return x.CabSections
	}
	return nil
}

type GetRecommendedMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (x *GetRecommendedMoviesRequest) Reset() {
	*x = GetRecommendedMoviesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendedMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendedMoviesRequest) ProtoMessage() {}

func (x *GetRecommendedMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendedMoviesRequest.ProtoReflect.Descriptor instead.
func (*GetRecommendedMoviesRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{38}
}

func (x *GetRecommendedMoviesRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

type GetRecommendedMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GetRecommendedMoviesResponse_Result `protobuf:"varint,1,req,name=status,enum=movie_service.GetRecommendedMoviesResponse_Result" json:"status,omitempty"`
	Movies []int32                              `protobuf:"varint,2,rep,name=movies" json:"movies,omitempty"`
}

func (x *GetRecommendedMoviesResponse) Reset() {
	*x = GetRecommendedMoviesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendedMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendedMoviesResponse) ProtoMessage() {}

func (x *GetRecommendedMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendedMoviesResponse.ProtoReflect.Descriptor instead.
func (*GetRecommendedMoviesResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{39}
}

func (x *GetRecommendedMoviesResponse) GetStatus() GetRecommendedMoviesResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetRecommendedMoviesResponse_OK
}

func (x *GetRecommendedMoviesResponse) GetMovies() []int32 {
	if x != nil {
		return x.Movies
	}
	return nil
}

type GetLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth              *string   `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	MovieId           *int32    `protobuf:"varint,2,req,name=movie_id,json=movieId" json:"movie_id,omitempty"`
	OwnerId           *int32    `protobuf:"varint,3,req,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	EpisodeId         *int32    `protobuf:"varint,4,opt,name=episode_id,json=episodeId" json:"episode_id,omitempty"`
	SessionId         *string   `protobuf:"bytes,5,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	AudioTrack        *int32    `protobuf:"varint,6,opt,name=audio_track,json=audioTrack" json:"audio_track,omitempty"`
	Subtitle          *string   `protobuf:"bytes,7,opt,name=subtitle" json:"subtitle,omitempty"`
	PreferredLinkType *LinkType `protobuf:"varint,8,opt,name=preferred_link_type,json=preferredLinkType,enum=movie_service.LinkType" json:"preferred_link_type,omitempty"`
	PreviewMode       *bool     `protobuf:"varint,9,opt,name=preview_mode,json=previewMode" json:"preview_mode,omitempty"`
	PinCode           *string   `protobuf:"bytes,10,opt,name=pin_code,json=pinCode" json:"pin_code,omitempty"`
}

func (x *GetLinkRequest) Reset() {
	*x = GetLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLinkRequest) ProtoMessage() {}

func (x *GetLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLinkRequest.ProtoReflect.Descriptor instead.
func (*GetLinkRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{40}
}

func (x *GetLinkRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *GetLinkRequest) GetMovieId() int32 {
	if x != nil && x.MovieId != nil {
		return *x.MovieId
	}
	return 0
}

func (x *GetLinkRequest) GetOwnerId() int32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *GetLinkRequest) GetEpisodeId() int32 {
	if x != nil && x.EpisodeId != nil {
		return *x.EpisodeId
	}
	return 0
}

func (x *GetLinkRequest) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetLinkRequest) GetAudioTrack() int32 {
	if x != nil && x.AudioTrack != nil {
		return *x.AudioTrack
	}
	return 0
}

func (x *GetLinkRequest) GetSubtitle() string {
	if x != nil && x.Subtitle != nil {
		return *x.Subtitle
	}
	return ""
}

func (x *GetLinkRequest) GetPreferredLinkType() LinkType {
	if x != nil && x.PreferredLinkType != nil {
		return *x.PreferredLinkType
	}
	return LinkType_HLS
}

func (x *GetLinkRequest) GetPreviewMode() bool {
	if x != nil && x.PreviewMode != nil {
		return *x.PreviewMode
	}
	return false
}

func (x *GetLinkRequest) GetPinCode() string {
	if x != nil && x.PinCode != nil {
		return *x.PinCode
	}
	return ""
}

type GetLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *GetLinkResponse_Result `protobuf:"varint,1,req,name=status,enum=movie_service.GetLinkResponse_Result" json:"status,omitempty"`
	Url              *string                 `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Ads              []*Ad                   `protobuf:"bytes,3,rep,name=ads" json:"ads,omitempty"`
	AdTagUrl         *string                 `protobuf:"bytes,4,opt,name=ad_tag_url,json=adTagUrl" json:"ad_tag_url,omitempty"`
	LinkType         *LinkType               `protobuf:"varint,5,opt,name=link_type,json=linkType,enum=movie_service.LinkType" json:"link_type,omitempty"`
	DrmType          *DRMType                `protobuf:"varint,6,opt,name=drm_type,json=drmType,enum=movie_service.DRMType" json:"drm_type,omitempty"`
	LicenseServerUrl *string                 `protobuf:"bytes,7,opt,name=license_server_url,json=licenseServerUrl" json:"license_server_url,omitempty"`
	Thumbnails       *Thumbnails             `protobuf:"bytes,8,opt,name=thumbnails" json:"thumbnails,omitempty"`
	Mesh             *bool                   `protobuf:"varint,9,opt,name=mesh" json:"mesh,omitempty"`
	ContentKey       *string                 `protobuf:"bytes,10,opt,name=content_key,json=contentKey" json:"content_key,omitempty"`
	Subtitles        []*Subtitle             `protobuf:"bytes,11,rep,name=subtitles" json:"subtitles,omitempty"`
}

func (x *GetLinkResponse) Reset() {
	*x = GetLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLinkResponse) ProtoMessage() {}

func (x *GetLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLinkResponse.ProtoReflect.Descriptor instead.
func (*GetLinkResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{41}
}

func (x *GetLinkResponse) GetStatus() GetLinkResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetLinkResponse_OK
}

func (x *GetLinkResponse) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *GetLinkResponse) GetAds() []*Ad {
	if x != nil {
		return x.Ads
	}
	return nil
}

func (x *GetLinkResponse) GetAdTagUrl() string {
	if x != nil && x.AdTagUrl != nil {
		return *x.AdTagUrl
	}
	return ""
}

func (x *GetLinkResponse) GetLinkType() LinkType {
	if x != nil && x.LinkType != nil {
		return *x.LinkType
	}
	return LinkType_HLS
}

func (x *GetLinkResponse) GetDrmType() DRMType {
	if x != nil && x.DrmType != nil {
		return *x.DrmType
	}
	return DRMType_DRM_NONE
}

func (x *GetLinkResponse) GetLicenseServerUrl() string {
	if x != nil && x.LicenseServerUrl != nil {
		return *x.LicenseServerUrl
	}
	return ""
}

func (x *GetLinkResponse) GetThumbnails() *Thumbnails {
	if x != nil {
		return x.Thumbnails
	}
	return nil
}

func (x *GetLinkResponse) GetMesh() bool {
	if x != nil && x.Mesh != nil {
		return *x.Mesh
	}
	return false
}

func (x *GetLinkResponse) GetContentKey() string {
	if x != nil && x.ContentKey != nil {
		return *x.ContentKey
	}
	return ""
}

func (x *GetLinkResponse) GetSubtitles() []*Subtitle {
	if x != nil {
		return x.Subtitles
	}
	return nil
}

type Thumbnails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl    *string `protobuf:"bytes,1,req,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	PlaylistUrl *string `protobuf:"bytes,2,opt,name=playlist_url,json=playlistUrl" json:"playlist_url,omitempty"`
	Interval    *int32  `protobuf:"varint,3,opt,name=interval" json:"interval,omitempty"`
	Cols        *int32  `protobuf:"varint,4,opt,name=cols" json:"cols,omitempty"`
	Rows        *int32  `protobuf:"varint,5,opt,name=rows" json:"rows,omitempty"`
}

func (x *Thumbnails) Reset() {
	*x = Thumbnails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thumbnails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thumbnails) ProtoMessage() {}

func (x *Thumbnails) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thumbnails.ProtoReflect.Descriptor instead.
func (*Thumbnails) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{42}
}

func (x *Thumbnails) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *Thumbnails) GetPlaylistUrl() string {
	if x != nil && x.PlaylistUrl != nil {
		return *x.PlaylistUrl
	}
	return ""
}

func (x *Thumbnails) GetInterval() int32 {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return 0
}

func (x *Thumbnails) GetCols() int32 {
	if x != nil && x.Cols != nil {
		return *x.Cols
	}
	return 0
}

func (x *Thumbnails) GetRows() int32 {
	if x != nil && x.Rows != nil {
		return *x.Rows
	}
	return 0
}

type GetCollectionMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth          *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	CollectionId  *int32  `protobuf:"varint,2,req,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	IncludeHidden *bool   `protobuf:"varint,3,opt,name=include_hidden,json=includeHidden" json:"include_hidden,omitempty"`
}

func (x *GetCollectionMoviesRequest) Reset() {
	*x = GetCollectionMoviesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionMoviesRequest) ProtoMessage() {}

func (x *GetCollectionMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionMoviesRequest.ProtoReflect.Descriptor instead.
func (*GetCollectionMoviesRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{43}
}

func (x *GetCollectionMoviesRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *GetCollectionMoviesRequest) GetCollectionId() int32 {
	if x != nil && x.CollectionId != nil {
		return *x.CollectionId
	}
	return 0
}

func (x *GetCollectionMoviesRequest) GetIncludeHidden() bool {
	if x != nil && x.IncludeHidden != nil {
		return *x.IncludeHidden
	}
	return false
}

type GetCollectionMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *GetCollectionMoviesResponse_Result `protobuf:"varint,1,req,name=result,enum=movie_service.GetCollectionMoviesResponse_Result" json:"result,omitempty"`
	Movies []int32                             `protobuf:"varint,2,rep,name=movies" json:"movies,omitempty"`
	Title  *string                             `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Slug   *string                             `protobuf:"bytes,4,opt,name=slug" json:"slug,omitempty"`
}

func (x *GetCollectionMoviesResponse) Reset() {
	*x = GetCollectionMoviesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionMoviesResponse) ProtoMessage() {}

func (x *GetCollectionMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionMoviesResponse.ProtoReflect.Descriptor instead.
func (*GetCollectionMoviesResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{44}
}

func (x *GetCollectionMoviesResponse) GetResult() GetCollectionMoviesResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return GetCollectionMoviesResponse_OK
}

func (x *GetCollectionMoviesResponse) GetMovies() []int32 {
	if x != nil {
		return x.Movies
	}
	return nil
}

func (x *GetCollectionMoviesResponse) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *GetCollectionMoviesResponse) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

type GetPremiereMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (x *GetPremiereMoviesRequest) Reset() {
	*x = GetPremiereMoviesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPremiereMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPremiereMoviesRequest) ProtoMessage() {}

func (x *GetPremiereMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPremiereMoviesRequest.ProtoReflect.Descriptor instead.
func (*GetPremiereMoviesRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{45}
}

func (x *GetPremiereMoviesRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

type PremieresCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *int32  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Title  *string `protobuf:"bytes,2,req,name=title" json:"title,omitempty"`
	Movies []int32 `protobuf:"varint,3,rep,name=movies" json:"movies,omitempty"`
}

func (x *PremieresCollection) Reset() {
	*x = PremieresCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PremieresCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PremieresCollection) ProtoMessage() {}

func (x *PremieresCollection) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PremieresCollection.ProtoReflect.Descriptor instead.
func (*PremieresCollection) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{46}
}

func (x *PremieresCollection) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PremieresCollection) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PremieresCollection) GetMovies() []int32 {
	if x != nil {
		return x.Movies
	}
	return nil
}

type GetPremiereMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *GetPremiereMoviesResponse_Result `protobuf:"varint,1,req,name=result,enum=movie_service.GetPremiereMoviesResponse_Result" json:"result,omitempty"`
	Collection []*PremieresCollection            `protobuf:"bytes,2,rep,name=collection" json:"collection,omitempty"`
}

func (x *GetPremiereMoviesResponse) Reset() {
	*x = GetPremiereMoviesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPremiereMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPremiereMoviesResponse) ProtoMessage() {}

func (x *GetPremiereMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPremiereMoviesResponse.ProtoReflect.Descriptor instead.
func (*GetPremiereMoviesResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{47}
}

func (x *GetPremiereMoviesResponse) GetResult() GetPremiereMoviesResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return GetPremiereMoviesResponse_OK
}

func (x *GetPremiereMoviesResponse) GetCollection() []*PremieresCollection {
	if x != nil {
		return x.Collection
	}
	return nil
}

type GetWatchListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Limit *int32  `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (x *GetWatchListRequest) Reset() {
	*x = GetWatchListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWatchListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWatchListRequest) ProtoMessage() {}

func (x *GetWatchListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWatchListRequest.ProtoReflect.Descriptor instead.
func (*GetWatchListRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{48}
}

func (x *GetWatchListRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *GetWatchListRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type GetWatchListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *GetWatchListResponse_Result `protobuf:"varint,1,req,name=result,enum=movie_service.GetWatchListResponse_Result" json:"result,omitempty"`
	Movies []int32                      `protobuf:"varint,2,rep,name=movies" json:"movies,omitempty"`
}

func (x *GetWatchListResponse) Reset() {
	*x = GetWatchListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWatchListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWatchListResponse) ProtoMessage() {}

func (x *GetWatchListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWatchListResponse.ProtoReflect.Descriptor instead.
func (*GetWatchListResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{49}
}

func (x *GetWatchListResponse) GetResult() GetWatchListResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return GetWatchListResponse_OK
}

func (x *GetWatchListResponse) GetMovies() []int32 {
	if x != nil {
		return x.Movies
	}
	return nil
}

type SetWatchInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *string    `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	MovieId   *int32     `protobuf:"varint,2,req,name=movie_id,json=movieId" json:"movie_id,omitempty"`
	EpisodeId *int32     `protobuf:"varint,3,opt,name=episode_id,json=episodeId" json:"episode_id,omitempty"`
	Info      *WatchInfo `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
	Position  *int32     `protobuf:"varint,5,opt,name=position" json:"position,omitempty"`
}

func (x *SetWatchInfoRequest) Reset() {
	*x = SetWatchInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWatchInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWatchInfoRequest) ProtoMessage() {}

func (x *SetWatchInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWatchInfoRequest.ProtoReflect.Descriptor instead.
func (*SetWatchInfoRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{50}
}

func (x *SetWatchInfoRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *SetWatchInfoRequest) GetMovieId() int32 {
	if x != nil && x.MovieId != nil {
		return *x.MovieId
	}
	return 0
}

func (x *SetWatchInfoRequest) GetEpisodeId() int32 {
	if x != nil && x.EpisodeId != nil {
		return *x.EpisodeId
	}
	return 0
}

func (x *SetWatchInfoRequest) GetInfo() *WatchInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SetWatchInfoRequest) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

type SetWatchInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *SetWatchInfoResponse_Result `protobuf:"varint,1,req,name=result,enum=movie_service.SetWatchInfoResponse_Result" json:"result,omitempty"`
}

func (x *SetWatchInfoResponse) Reset() {
	*x = SetWatchInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWatchInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWatchInfoResponse) ProtoMessage() {}

func (x *SetWatchInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWatchInfoResponse.ProtoReflect.Descriptor instead.
func (*SetWatchInfoResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{51}
}

func (x *SetWatchInfoResponse) GetResult() SetWatchInfoResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return SetWatchInfoResponse_OK
}

type ClearWatchInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearWatchInfoRequest) Reset() {
	*x = ClearWatchInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearWatchInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearWatchInfoRequest) ProtoMessage() {}

func (x *ClearWatchInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearWatchInfoRequest.ProtoReflect.Descriptor instead.
func (*ClearWatchInfoRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{52}
}

type ClearWatchInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *ClearWatchInfoResponse_Result `protobuf:"varint,1,req,name=result,enum=movie_service.ClearWatchInfoResponse_Result" json:"result,omitempty"`
}

func (x *ClearWatchInfoResponse) Reset() {
	*x = ClearWatchInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearWatchInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearWatchInfoResponse) ProtoMessage() {}

func (x *ClearWatchInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearWatchInfoResponse.ProtoReflect.Descriptor instead.
func (*ClearWatchInfoResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{53}
}

func (x *ClearWatchInfoResponse) GetResult() ClearWatchInfoResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ClearWatchInfoResponse_OK
}

type GetFavoriteMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (x *GetFavoriteMoviesRequest) Reset() {
	*x = GetFavoriteMoviesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoriteMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteMoviesRequest) ProtoMessage() {}

func (x *GetFavoriteMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteMoviesRequest.ProtoReflect.Descriptor instead.
func (*GetFavoriteMoviesRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{54}
}

func (x *GetFavoriteMoviesRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

type GetFavoriteMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GetFavoriteMoviesResponse_Result `protobuf:"varint,1,req,name=status,enum=movie_service.GetFavoriteMoviesResponse_Result" json:"status,omitempty"`
	Movies []int32                           `protobuf:"varint,2,rep,name=movies" json:"movies,omitempty"`
}

func (x *GetFavoriteMoviesResponse) Reset() {
	*x = GetFavoriteMoviesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoriteMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteMoviesResponse) ProtoMessage() {}

func (x *GetFavoriteMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteMoviesResponse.ProtoReflect.Descriptor instead.
func (*GetFavoriteMoviesResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{55}
}

func (x *GetFavoriteMoviesResponse) GetStatus() GetFavoriteMoviesResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetFavoriteMoviesResponse_OK
}

func (x *GetFavoriteMoviesResponse) GetMovies() []int32 {
	if x != nil {
		return x.Movies
	}
	return nil
}

type AddFavoriteMovieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	MovieId *int32  `protobuf:"varint,2,req,name=movie_id,json=movieId" json:"movie_id,omitempty"`
}

func (x *AddFavoriteMovieRequest) Reset() {
	*x = AddFavoriteMovieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFavoriteMovieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFavoriteMovieRequest) ProtoMessage() {}

func (x *AddFavoriteMovieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFavoriteMovieRequest.ProtoReflect.Descriptor instead.
func (*AddFavoriteMovieRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{56}
}

func (x *AddFavoriteMovieRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *AddFavoriteMovieRequest) GetMovieId() int32 {
	if x != nil && x.MovieId != nil {
		return *x.MovieId
	}
	return 0
}

type AddFavoriteMovieResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *AddFavoriteMovieResponse_Result `protobuf:"varint,1,req,name=status,enum=movie_service.AddFavoriteMovieResponse_Result" json:"status,omitempty"`
}

func (x *AddFavoriteMovieResponse) Reset() {
	*x = AddFavoriteMovieResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFavoriteMovieResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFavoriteMovieResponse) ProtoMessage() {}

func (x *AddFavoriteMovieResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFavoriteMovieResponse.ProtoReflect.Descriptor instead.
func (*AddFavoriteMovieResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{57}
}

func (x *AddFavoriteMovieResponse) GetStatus() AddFavoriteMovieResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return AddFavoriteMovieResponse_OK
}

type RemoveFavoriteMovieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	MovieId *int32  `protobuf:"varint,2,req,name=movie_id,json=movieId" json:"movie_id,omitempty"`
}

func (x *RemoveFavoriteMovieRequest) Reset() {
	*x = RemoveFavoriteMovieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFavoriteMovieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFavoriteMovieRequest) ProtoMessage() {}

func (x *RemoveFavoriteMovieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFavoriteMovieRequest.ProtoReflect.Descriptor instead.
func (*RemoveFavoriteMovieRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{58}
}

func (x *RemoveFavoriteMovieRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *RemoveFavoriteMovieRequest) GetMovieId() int32 {
	if x != nil && x.MovieId != nil {
		return *x.MovieId
	}
	return 0
}

type RemoveFavoriteMovieResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *RemoveFavoriteMovieResponse_Result `protobuf:"varint,1,req,name=status,enum=movie_service.RemoveFavoriteMovieResponse_Result" json:"status,omitempty"`
}

func (x *RemoveFavoriteMovieResponse) Reset() {
	*x = RemoveFavoriteMovieResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFavoriteMovieResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFavoriteMovieResponse) ProtoMessage() {}

func (x *RemoveFavoriteMovieResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFavoriteMovieResponse.ProtoReflect.Descriptor instead.
func (*RemoveFavoriteMovieResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{59}
}

func (x *RemoveFavoriteMovieResponse) GetStatus() RemoveFavoriteMovieResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return RemoveFavoriteMovieResponse_OK
}

type GetPremiereBannersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Page *Page   `protobuf:"varint,2,opt,name=page,enum=movie_service.Page" json:"page,omitempty"`
}

func (x *GetPremiereBannersRequest) Reset() {
	*x = GetPremiereBannersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPremiereBannersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPremiereBannersRequest) ProtoMessage() {}

func (x *GetPremiereBannersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPremiereBannersRequest.ProtoReflect.Descriptor instead.
func (*GetPremiereBannersRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{60}
}

func (x *GetPremiereBannersRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *GetPremiereBannersRequest) GetPage() Page {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return Page_HOME
}

type GetPremiereBannersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GetPremiereBannersResponse_Result `protobuf:"varint,1,req,name=status,enum=movie_service.GetPremiereBannersResponse_Result" json:"status,omitempty"`
	Banners []*PremiereBanner                  `protobuf:"bytes,2,rep,name=banners" json:"banners,omitempty"`
}

func (x *GetPremiereBannersResponse) Reset() {
	*x = GetPremiereBannersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPremiereBannersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPremiereBannersResponse) ProtoMessage() {}

func (x *GetPremiereBannersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPremiereBannersResponse.ProtoReflect.Descriptor instead.
func (*GetPremiereBannersResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{61}
}

func (x *GetPremiereBannersResponse) GetStatus() GetPremiereBannersResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetPremiereBannersResponse_OK
}

func (x *GetPremiereBannersResponse) GetBanners() []*PremiereBanner {
	if x != nil {
		return x.Banners
	}
	return nil
}

type GetPurchasedMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (x *GetPurchasedMoviesRequest) Reset() {
	*x = GetPurchasedMoviesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchasedMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchasedMoviesRequest) ProtoMessage() {}

func (x *GetPurchasedMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchasedMoviesRequest.ProtoReflect.Descriptor instead.
func (*GetPurchasedMoviesRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{62}
}

func (x *GetPurchasedMoviesRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

type PromoBannerImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolutionId *int32  `protobuf:"varint,1,req,name=resolution_id,json=resolutionId" json:"resolution_id,omitempty"`
	Url          *string `protobuf:"bytes,2,req,name=url" json:"url,omitempty"`
}

func (x *PromoBannerImage) Reset() {
	*x = PromoBannerImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoBannerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoBannerImage) ProtoMessage() {}

func (x *PromoBannerImage) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoBannerImage.ProtoReflect.Descriptor instead.
func (*PromoBannerImage) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{63}
}

func (x *PromoBannerImage) GetResolutionId() int32 {
	if x != nil && x.ResolutionId != nil {
		return *x.ResolutionId
	}
	return 0
}

func (x *PromoBannerImage) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type PromoBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *int32                   `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	ImageUrl           *string                  `protobuf:"bytes,2,req,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	Title              *string                  `protobuf:"bytes,3,req,name=title" json:"title,omitempty"`
	PromoBannerAction  *PromoBannerAction       `protobuf:"varint,4,req,name=promo_banner_action,json=promoBannerAction,enum=movie_service.PromoBannerAction" json:"promo_banner_action,omitempty"`
	ContentId          *int32                   `protobuf:"varint,5,req,name=content_id,json=contentId" json:"content_id,omitempty"`
	UserTargeted       *bool                    `protobuf:"varint,6,opt,name=user_targeted,json=userTargeted" json:"user_targeted,omitempty"`
	Slug               *string                  `protobuf:"bytes,7,opt,name=slug" json:"slug,omitempty"`
	ContentTitle       *string                  `protobuf:"bytes,8,opt,name=content_title,json=contentTitle" json:"content_title,omitempty"`
	ContentTagline     *string                  `protobuf:"bytes,9,opt,name=content_tagline,json=contentTagline" json:"content_tagline,omitempty"`
	ContentRating      *float32                 `protobuf:"fixed32,10,opt,name=content_rating,json=contentRating" json:"content_rating,omitempty"`
	ContentYear        *int32                   `protobuf:"varint,11,opt,name=content_year,json=contentYear" json:"content_year,omitempty"`
	ContentCountries   []int32                  `protobuf:"varint,12,rep,name=content_countries,json=contentCountries" json:"content_countries,omitempty"`
	ContentGenres      []int32                  `protobuf:"varint,13,rep,name=content_genres,json=contentGenres" json:"content_genres,omitempty"`
	ContentDuration    *int32                   `protobuf:"varint,14,opt,name=content_duration,json=contentDuration" json:"content_duration,omitempty"`
	EpgId              *int32                   `protobuf:"varint,15,opt,name=epg_id,json=epgId" json:"epg_id,omitempty"`
	Url                *string                  `protobuf:"bytes,16,opt,name=url" json:"url,omitempty"`
	SecondaryContentId *int32                   `protobuf:"varint,17,opt,name=secondary_content_id,json=secondaryContentId" json:"secondary_content_id,omitempty"`
	Sum                *float32                 `protobuf:"fixed32,18,opt,name=sum" json:"sum,omitempty"`
	ContentList        []int32                  `protobuf:"varint,19,rep,name=content_list,json=contentList" json:"content_list,omitempty"`
	ContentType        *PromoBanner_ContentType `protobuf:"varint,20,opt,name=content_type,json=contentType,enum=movie_service.PromoBanner_ContentType" json:"content_type,omitempty"`
	Images             []*PromoBannerImage      `protobuf:"bytes,21,rep,name=images" json:"images,omitempty"`
	AmbilightColor     *string                  `protobuf:"bytes,22,opt,name=ambilight_color,json=ambilightColor" json:"ambilight_color,omitempty"`
	TrailerUrl         *string                  `protobuf:"bytes,23,opt,name=trailer_url,json=trailerUrl" json:"trailer_url,omitempty"`
}

func (x *PromoBanner) Reset() {
	*x = PromoBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoBanner) ProtoMessage() {}

func (x *PromoBanner) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoBanner.ProtoReflect.Descriptor instead.
func (*PromoBanner) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{64}
}

func (x *PromoBanner) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PromoBanner) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *PromoBanner) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PromoBanner) GetPromoBannerAction() PromoBannerAction {
	if x != nil && x.PromoBannerAction != nil {
		return *x.PromoBannerAction
	}
	return PromoBannerAction_SHOW_CHANNEL
}

func (x *PromoBanner) GetContentId() int32 {
	if x != nil && x.ContentId != nil {
		return *x.ContentId
	}
	return 0
}

func (x *PromoBanner) GetUserTargeted() bool {
	if x != nil && x.UserTargeted != nil {
		return *x.UserTargeted
	}
	return false
}

func (x *PromoBanner) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *PromoBanner) GetContentTitle() string {
	if x != nil && x.ContentTitle != nil {
		return *x.ContentTitle
	}
	return ""
}

func (x *PromoBanner) GetContentTagline() string {
	if x != nil && x.ContentTagline != nil {
		return *x.ContentTagline
	}
	return ""
}

func (x *PromoBanner) GetContentRating() float32 {
	if x != nil && x.ContentRating != nil {
		return *x.ContentRating
	}
	return 0
}

func (x *PromoBanner) GetContentYear() int32 {
	if x != nil && x.ContentYear != nil {
		return *x.ContentYear
	}
	return 0
}

func (x *PromoBanner) GetContentCountries() []int32 {
	if x != nil {
		return x.ContentCountries
	}
	return nil
}

func (x *PromoBanner) GetContentGenres() []int32 {
	if x != nil {
		return x.ContentGenres
	}
	return nil
}

func (x *PromoBanner) GetContentDuration() int32 {
	if x != nil && x.ContentDuration != nil {
		return *x.ContentDuration
	}
	return 0
}

func (x *PromoBanner) GetEpgId() int32 {
	if x != nil && x.EpgId != nil {
		return *x.EpgId
	}
	return 0
}

func (x *PromoBanner) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PromoBanner) GetSecondaryContentId() int32 {
	if x != nil && x.SecondaryContentId != nil {
		return *x.SecondaryContentId
	}
	return 0
}

func (x *PromoBanner) GetSum() float32 {
	if x != nil && x.Sum != nil {
		return *x.Sum
	}
	return 0
}

func (x *PromoBanner) GetContentList() []int32 {
	if x != nil {
		return x.ContentList
	}
	return nil
}

func (x *PromoBanner) GetContentType() PromoBanner_ContentType {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return PromoBanner_MOVIE
}

func (x *PromoBanner) GetImages() []*PromoBannerImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *PromoBanner) GetAmbilightColor() string {
	if x != nil && x.AmbilightColor != nil {
		return *x.AmbilightColor
	}
	return ""
}

func (x *PromoBanner) GetTrailerUrl() string {
	if x != nil && x.TrailerUrl != nil {
		return *x.TrailerUrl
	}
	return ""
}

type GetPromoBannersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth             *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Page             *Page   `protobuf:"varint,2,opt,name=page,enum=movie_service.Page" json:"page,omitempty"`
	NeedExtendedInfo *bool   `protobuf:"varint,3,opt,name=need_extended_info,json=needExtendedInfo,def=0" json:"need_extended_info,omitempty"`
}

// Default values for GetPromoBannersRequest fields.
const (
	Default_GetPromoBannersRequest_NeedExtendedInfo = bool(false)
)

func (x *GetPromoBannersRequest) Reset() {
	*x = GetPromoBannersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPromoBannersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPromoBannersRequest) ProtoMessage() {}

func (x *GetPromoBannersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPromoBannersRequest.ProtoReflect.Descriptor instead.
func (*GetPromoBannersRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{65}
}

func (x *GetPromoBannersRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *GetPromoBannersRequest) GetPage() Page {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return Page_HOME
}

func (x *GetPromoBannersRequest) GetNeedExtendedInfo() bool {
	if x != nil && x.NeedExtendedInfo != nil {
		return *x.NeedExtendedInfo
	}
	return Default_GetPromoBannersRequest_NeedExtendedInfo
}

type GetPromoBannersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GetPromoBannersResponse_Result `protobuf:"varint,1,req,name=status,enum=movie_service.GetPromoBannersResponse_Result" json:"status,omitempty"`
	Banners []*PromoBanner                  `protobuf:"bytes,2,rep,name=banners" json:"banners,omitempty"`
}

func (x *GetPromoBannersResponse) Reset() {
	*x = GetPromoBannersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPromoBannersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPromoBannersResponse) ProtoMessage() {}

func (x *GetPromoBannersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPromoBannersResponse.ProtoReflect.Descriptor instead.
func (*GetPromoBannersResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{66}
}

func (x *GetPromoBannersResponse) GetStatus() GetPromoBannersResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetPromoBannersResponse_OK
}

func (x *GetPromoBannersResponse) GetBanners() []*PromoBanner {
	if x != nil {
		return x.Banners
	}
	return nil
}

type GetPurchasedMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GetPurchasedMoviesResponse_Result `protobuf:"varint,1,req,name=status,enum=movie_service.GetPurchasedMoviesResponse_Result" json:"status,omitempty"`
	Movies []int32                            `protobuf:"varint,2,rep,name=movies" json:"movies,omitempty"`
}

func (x *GetPurchasedMoviesResponse) Reset() {
	*x = GetPurchasedMoviesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchasedMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchasedMoviesResponse) ProtoMessage() {}

func (x *GetPurchasedMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchasedMoviesResponse.ProtoReflect.Descriptor instead.
func (*GetPurchasedMoviesResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{67}
}

func (x *GetPurchasedMoviesResponse) GetStatus() GetPurchasedMoviesResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetPurchasedMoviesResponse_OK
}

func (x *GetPurchasedMoviesResponse) GetMovies() []int32 {
	if x != nil {
		return x.Movies
	}
	return nil
}

type GetPersonInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	PersonId *int32  `protobuf:"varint,2,req,name=person_id,json=personId" json:"person_id,omitempty"`
}

func (x *GetPersonInfoRequest) Reset() {
	*x = GetPersonInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersonInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersonInfoRequest) ProtoMessage() {}

func (x *GetPersonInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersonInfoRequest.ProtoReflect.Descriptor instead.
func (*GetPersonInfoRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{68}
}

func (x *GetPersonInfoRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *GetPersonInfoRequest) GetPersonId() int32 {
	if x != nil && x.PersonId != nil {
		return *x.PersonId
	}
	return 0
}

type GetPersonInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GetPersonInfoResponse_Result `protobuf:"varint,1,req,name=status,enum=movie_service.GetPersonInfoResponse_Result" json:"status,omitempty"`
	Person *Person                       `protobuf:"bytes,2,opt,name=person" json:"person,omitempty"`
}

func (x *GetPersonInfoResponse) Reset() {
	*x = GetPersonInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersonInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersonInfoResponse) ProtoMessage() {}

func (x *GetPersonInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersonInfoResponse.ProtoReflect.Descriptor instead.
func (*GetPersonInfoResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{69}
}

func (x *GetPersonInfoResponse) GetStatus() GetPersonInfoResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetPersonInfoResponse_OK
}

func (x *GetPersonInfoResponse) GetPerson() *Person {
	if x != nil {
		return x.Person
	}
	return nil
}

type GetPersonsInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Persons []int32 `protobuf:"varint,2,rep,name=persons" json:"persons,omitempty"`
}

func (x *GetPersonsInfoRequest) Reset() {
	*x = GetPersonsInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersonsInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersonsInfoRequest) ProtoMessage() {}

func (x *GetPersonsInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersonsInfoRequest.ProtoReflect.Descriptor instead.
func (*GetPersonsInfoRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{70}
}

func (x *GetPersonsInfoRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *GetPersonsInfoRequest) GetPersons() []int32 {
	if x != nil {
		return x.Persons
	}
	return nil
}

type GetPersonsInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GetPersonsInfoResponse_Result `protobuf:"varint,1,req,name=status,enum=movie_service.GetPersonsInfoResponse_Result" json:"status,omitempty"`
	Persons []*Person                      `protobuf:"bytes,2,rep,name=persons" json:"persons,omitempty"`
}

func (x *GetPersonsInfoResponse) Reset() {
	*x = GetPersonsInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersonsInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersonsInfoResponse) ProtoMessage() {}

func (x *GetPersonsInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersonsInfoResponse.ProtoReflect.Descriptor instead.
func (*GetPersonsInfoResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{71}
}

func (x *GetPersonsInfoResponse) GetStatus() GetPersonsInfoResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetPersonsInfoResponse_OK
}

func (x *GetPersonsInfoResponse) GetPersons() []*Person {
	if x != nil {
		return x.Persons
	}
	return nil
}

type GetDownloadableMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (x *GetDownloadableMoviesRequest) Reset() {
	*x = GetDownloadableMoviesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDownloadableMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDownloadableMoviesRequest) ProtoMessage() {}

func (x *GetDownloadableMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDownloadableMoviesRequest.ProtoReflect.Descriptor instead.
func (*GetDownloadableMoviesRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{72}
}

func (x *GetDownloadableMoviesRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

type GetDownloadableMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GetDownloadableMoviesResponse_Result `protobuf:"varint,1,req,name=status,enum=movie_service.GetDownloadableMoviesResponse_Result" json:"status,omitempty"`
	Movies []int32                               `protobuf:"varint,2,rep,name=movies" json:"movies,omitempty"`
}

func (x *GetDownloadableMoviesResponse) Reset() {
	*x = GetDownloadableMoviesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDownloadableMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDownloadableMoviesResponse) ProtoMessage() {}

func (x *GetDownloadableMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDownloadableMoviesResponse.ProtoReflect.Descriptor instead.
func (*GetDownloadableMoviesResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{73}
}

func (x *GetDownloadableMoviesResponse) GetStatus() GetDownloadableMoviesResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetDownloadableMoviesResponse_OK
}

func (x *GetDownloadableMoviesResponse) GetMovies() []int32 {
	if x != nil {
		return x.Movies
	}
	return nil
}

type RateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Rating    *Rating `protobuf:"varint,2,opt,name=rating,enum=movie_service.Rating" json:"rating,omitempty"`
	MovieId   *int32  `protobuf:"varint,3,opt,name=movie_id,json=movieId" json:"movie_id,omitempty"`
	CommentId *int32  `protobuf:"varint,4,opt,name=comment_id,json=commentId" json:"comment_id,omitempty"`
	AccountId *uint64 `protobuf:"varint,100,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *RateRequest) Reset() {
	*x = RateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateRequest) ProtoMessage() {}

func (x *RateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateRequest.ProtoReflect.Descriptor instead.
func (*RateRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{74}
}

func (x *RateRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *RateRequest) GetRating() Rating {
	if x != nil && x.Rating != nil {
		return *x.Rating
	}
	return Rating_None
}

func (x *RateRequest) GetMovieId() int32 {
	if x != nil && x.MovieId != nil {
		return *x.MovieId
	}
	return 0
}

func (x *RateRequest) GetCommentId() int32 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *RateRequest) GetAccountId() uint64 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type RateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *RateResponse_Result `protobuf:"varint,1,req,name=status,enum=movie_service.RateResponse_Result" json:"status,omitempty"`
}

func (x *RateResponse) Reset() {
	*x = RateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateResponse) ProtoMessage() {}

func (x *RateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateResponse.ProtoReflect.Descriptor instead.
func (*RateResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{75}
}

func (x *RateResponse) GetStatus() RateResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return RateResponse_OK
}

type GetCollectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *string                     `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Type *GetCollectionsRequest_Type `protobuf:"varint,2,opt,name=type,enum=movie_service.GetCollectionsRequest_Type" json:"type,omitempty"`
}

func (x *GetCollectionsRequest) Reset() {
	*x = GetCollectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionsRequest) ProtoMessage() {}

func (x *GetCollectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionsRequest.ProtoReflect.Descriptor instead.
func (*GetCollectionsRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{76}
}

func (x *GetCollectionsRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *GetCollectionsRequest) GetType() GetCollectionsRequest_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return GetCollectionsRequest_HOME
}

type GetCollectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *GetCollectionsResponse_Result `protobuf:"varint,1,req,name=result,enum=movie_service.GetCollectionsResponse_Result" json:"result,omitempty"`
	Collection []*Collection                  `protobuf:"bytes,2,rep,name=collection" json:"collection,omitempty"`
}

func (x *GetCollectionsResponse) Reset() {
	*x = GetCollectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionsResponse) ProtoMessage() {}

func (x *GetCollectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionsResponse.ProtoReflect.Descriptor instead.
func (*GetCollectionsResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{77}
}

func (x *GetCollectionsResponse) GetResult() GetCollectionsResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return GetCollectionsResponse_OK
}

func (x *GetCollectionsResponse) GetCollection() []*Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

type PostCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	MovieId  *int32  `protobuf:"varint,2,opt,name=movie_id,json=movieId" json:"movie_id,omitempty"`
	ParentId *int32  `protobuf:"varint,3,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	Text     *string `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
}

func (x *PostCommentRequest) Reset() {
	*x = PostCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCommentRequest) ProtoMessage() {}

func (x *PostCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCommentRequest.ProtoReflect.Descriptor instead.
func (*PostCommentRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{78}
}

func (x *PostCommentRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *PostCommentRequest) GetMovieId() int32 {
	if x != nil && x.MovieId != nil {
		return *x.MovieId
	}
	return 0
}

func (x *PostCommentRequest) GetParentId() int32 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *PostCommentRequest) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type PostCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *PostCommentResponse_Result `protobuf:"varint,1,opt,name=status,enum=movie_service.PostCommentResponse_Result" json:"status,omitempty"`
	Message *string                     `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *PostCommentResponse) Reset() {
	*x = PostCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCommentResponse) ProtoMessage() {}

func (x *PostCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCommentResponse.ProtoReflect.Descriptor instead.
func (*PostCommentResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{79}
}

func (x *PostCommentResponse) GetStatus() PostCommentResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return PostCommentResponse_OK
}

func (x *PostCommentResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type EditCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	CommentId *int32  `protobuf:"varint,2,opt,name=comment_id,json=commentId" json:"comment_id,omitempty"`
	Text      *string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
}

func (x *EditCommentRequest) Reset() {
	*x = EditCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCommentRequest) ProtoMessage() {}

func (x *EditCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCommentRequest.ProtoReflect.Descriptor instead.
func (*EditCommentRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{80}
}

func (x *EditCommentRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *EditCommentRequest) GetCommentId() int32 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *EditCommentRequest) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type EditCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *EditCommentResponse_Result `protobuf:"varint,1,opt,name=status,enum=movie_service.EditCommentResponse_Result" json:"status,omitempty"`
	Message *string                     `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *EditCommentResponse) Reset() {
	*x = EditCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCommentResponse) ProtoMessage() {}

func (x *EditCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCommentResponse.ProtoReflect.Descriptor instead.
func (*EditCommentResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{81}
}

func (x *EditCommentResponse) GetStatus() EditCommentResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return EditCommentResponse_OK
}

func (x *EditCommentResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type DeleteCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	CommentId *int32  `protobuf:"varint,2,opt,name=comment_id,json=commentId" json:"comment_id,omitempty"`
	MovieId   *int32  `protobuf:"varint,3,opt,name=movie_id,json=movieId" json:"movie_id,omitempty"`
}

func (x *DeleteCommentRequest) Reset() {
	*x = DeleteCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentRequest) ProtoMessage() {}

func (x *DeleteCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentRequest.ProtoReflect.Descriptor instead.
func (*DeleteCommentRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{82}
}

func (x *DeleteCommentRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *DeleteCommentRequest) GetCommentId() int32 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *DeleteCommentRequest) GetMovieId() int32 {
	if x != nil && x.MovieId != nil {
		return *x.MovieId
	}
	return 0
}

type DeleteCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *DeleteCommentResponse_Result `protobuf:"varint,1,opt,name=status,enum=movie_service.DeleteCommentResponse_Result" json:"status,omitempty"`
	Message *string                       `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *DeleteCommentResponse) Reset() {
	*x = DeleteCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentResponse) ProtoMessage() {}

func (x *DeleteCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentResponse.ProtoReflect.Descriptor instead.
func (*DeleteCommentResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{83}
}

func (x *DeleteCommentResponse) GetStatus() DeleteCommentResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return DeleteCommentResponse_OK
}

func (x *DeleteCommentResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type InternalCommentMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action    *InternalCommentMessage_Action `protobuf:"varint,1,opt,name=action,enum=movie_service.InternalCommentMessage_Action" json:"action,omitempty"`
	MovieId   *int32                         `protobuf:"varint,2,opt,name=movie_id,json=movieId" json:"movie_id,omitempty"`
	ParentId  *int32                         `protobuf:"varint,3,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	CommentId *int32                         `protobuf:"varint,4,opt,name=comment_id,json=commentId" json:"comment_id,omitempty"`
	Text      *string                        `protobuf:"bytes,5,opt,name=text" json:"text,omitempty"`
	AccountId *uint64                        `protobuf:"varint,100,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *InternalCommentMessage) Reset() {
	*x = InternalCommentMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalCommentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalCommentMessage) ProtoMessage() {}

func (x *InternalCommentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalCommentMessage.ProtoReflect.Descriptor instead.
func (*InternalCommentMessage) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{84}
}

func (x *InternalCommentMessage) GetAction() InternalCommentMessage_Action {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return InternalCommentMessage_Post
}

func (x *InternalCommentMessage) GetMovieId() int32 {
	if x != nil && x.MovieId != nil {
		return *x.MovieId
	}
	return 0
}

func (x *InternalCommentMessage) GetParentId() int32 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *InternalCommentMessage) GetCommentId() int32 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *InternalCommentMessage) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *InternalCommentMessage) GetAccountId() uint64 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type Ad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type        *Ad_Type        `protobuf:"varint,2,opt,name=type,enum=movie_service.Ad_Type" json:"type,omitempty"`
	MediaType   *Ad_MediaType   `protobuf:"varint,3,opt,name=media_type,json=mediaType,enum=movie_service.Ad_MediaType" json:"media_type,omitempty"`
	ContentType *Ad_ContentType `protobuf:"varint,4,opt,name=content_type,json=contentType,enum=movie_service.Ad_ContentType" json:"content_type,omitempty"`
	StartTime   *int64          `protobuf:"varint,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Skippable   *bool           `protobuf:"varint,6,opt,name=skippable" json:"skippable,omitempty"`
	SkipOffset  *int32          `protobuf:"varint,7,opt,name=skip_offset,json=skipOffset" json:"skip_offset,omitempty"`
	Title       *string         `protobuf:"bytes,8,opt,name=title" json:"title,omitempty"`
	Description *string         `protobuf:"bytes,9,opt,name=description" json:"description,omitempty"`
	ContentUrl  *string         `protobuf:"bytes,10,opt,name=content_url,json=contentUrl" json:"content_url,omitempty"`
	ContentId   *int32          `protobuf:"varint,11,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	VastUrl     *string         `protobuf:"bytes,12,opt,name=vast_url,json=vastUrl" json:"vast_url,omitempty"`
	Order       *int32          `protobuf:"varint,13,opt,name=order" json:"order,omitempty"`
	CategoryId  *int32          `protobuf:"varint,14,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
}

func (x *Ad) Reset() {
	*x = Ad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad) ProtoMessage() {}

func (x *Ad) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad.ProtoReflect.Descriptor instead.
func (*Ad) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{85}
}

func (x *Ad) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Ad) GetType() Ad_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Ad_PREROLL
}

func (x *Ad) GetMediaType() Ad_MediaType {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return Ad_VIDEO
}

func (x *Ad) GetContentType() Ad_ContentType {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return Ad_Movie
}

func (x *Ad) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *Ad) GetSkippable() bool {
	if x != nil && x.Skippable != nil {
		return *x.Skippable
	}
	return false
}

func (x *Ad) GetSkipOffset() int32 {
	if x != nil && x.SkipOffset != nil {
		return *x.SkipOffset
	}
	return 0
}

func (x *Ad) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Ad) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Ad) GetContentUrl() string {
	if x != nil && x.ContentUrl != nil {
		return *x.ContentUrl
	}
	return ""
}

func (x *Ad) GetContentId() int32 {
	if x != nil && x.ContentId != nil {
		return *x.ContentId
	}
	return 0
}

func (x *Ad) GetVastUrl() string {
	if x != nil && x.VastUrl != nil {
		return *x.VastUrl
	}
	return ""
}

func (x *Ad) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *Ad) GetCategoryId() int32 {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return 0
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TypeId               *int32  `protobuf:"varint,2,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	GenreId              *int32  `protobuf:"varint,3,opt,name=genre_id,json=genreId" json:"genre_id,omitempty"`
	CountryId            *int32  `protobuf:"varint,4,opt,name=country_id,json=countryId" json:"country_id,omitempty"`
	Order                *int32  `protobuf:"varint,5,opt,name=order" json:"order,omitempty"`
	Text                 *string `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
	YearFrom             *int32  `protobuf:"varint,7,opt,name=year_from,json=yearFrom" json:"year_from,omitempty"`
	YearTill             *int32  `protobuf:"varint,8,opt,name=year_till,json=yearTill" json:"year_till,omitempty"`
	AudioTrackLanguageId *int32  `protobuf:"varint,9,opt,name=audio_track_language_id,json=audioTrackLanguageId" json:"audio_track_language_id,omitempty"`
	CategoryId           *int32  `protobuf:"varint,10,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
	SubtitleLanguageId   *int32  `protobuf:"varint,11,opt,name=subtitle_language_id,json=subtitleLanguageId" json:"subtitle_language_id,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{86}
}

func (x *Filter) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Filter) GetTypeId() int32 {
	if x != nil && x.TypeId != nil {
		return *x.TypeId
	}
	return 0
}

func (x *Filter) GetGenreId() int32 {
	if x != nil && x.GenreId != nil {
		return *x.GenreId
	}
	return 0
}

func (x *Filter) GetCountryId() int32 {
	if x != nil && x.CountryId != nil {
		return *x.CountryId
	}
	return 0
}

func (x *Filter) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *Filter) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Filter) GetYearFrom() int32 {
	if x != nil && x.YearFrom != nil {
		return *x.YearFrom
	}
	return 0
}

func (x *Filter) GetYearTill() int32 {
	if x != nil && x.YearTill != nil {
		return *x.YearTill
	}
	return 0
}

func (x *Filter) GetAudioTrackLanguageId() int32 {
	if x != nil && x.AudioTrackLanguageId != nil {
		return *x.AudioTrackLanguageId
	}
	return 0
}

func (x *Filter) GetCategoryId() int32 {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return 0
}

func (x *Filter) GetSubtitleLanguageId() int32 {
	if x != nil && x.SubtitleLanguageId != nil {
		return *x.SubtitleLanguageId
	}
	return 0
}

type FilterGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *FilterGroup_Type `protobuf:"varint,1,opt,name=type,enum=movie_service.FilterGroup_Type" json:"type,omitempty"`
	Title   *string           `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Filters []*Filter         `protobuf:"bytes,3,rep,name=filters" json:"filters,omitempty"`
}

func (x *FilterGroup) Reset() {
	*x = FilterGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterGroup) ProtoMessage() {}

func (x *FilterGroup) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterGroup.ProtoReflect.Descriptor instead.
func (*FilterGroup) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{87}
}

func (x *FilterGroup) GetType() FilterGroup_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return FilterGroup_Genre
}

func (x *FilterGroup) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FilterGroup) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type GetFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth            *string           `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	SelectedFilters []*FilterGroup    `protobuf:"bytes,2,rep,name=selected_filters,json=selectedFilters" json:"selected_filters,omitempty"`
	SelectedGroup   *FilterGroup_Type `protobuf:"varint,3,opt,name=selected_group,json=selectedGroup,enum=movie_service.FilterGroup_Type" json:"selected_group,omitempty"`
	NeedSortModes   *bool             `protobuf:"varint,4,opt,name=need_sort_modes,json=needSortModes" json:"need_sort_modes,omitempty"`
}

func (x *GetFiltersRequest) Reset() {
	*x = GetFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiltersRequest) ProtoMessage() {}

func (x *GetFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiltersRequest.ProtoReflect.Descriptor instead.
func (*GetFiltersRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{88}
}

func (x *GetFiltersRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *GetFiltersRequest) GetSelectedFilters() []*FilterGroup {
	if x != nil {
		return x.SelectedFilters
	}
	return nil
}

func (x *GetFiltersRequest) GetSelectedGroup() FilterGroup_Type {
	if x != nil && x.SelectedGroup != nil {
		return *x.SelectedGroup
	}
	return FilterGroup_Genre
}

func (x *GetFiltersRequest) GetNeedSortModes() bool {
	if x != nil && x.NeedSortModes != nil {
		return *x.NeedSortModes
	}
	return false
}

type GetFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *GetFiltersResponse_Result `protobuf:"varint,1,opt,name=status,enum=movie_service.GetFiltersResponse_Result" json:"status,omitempty"`
	Filters       []*FilterGroup             `protobuf:"bytes,2,rep,name=filters" json:"filters,omitempty"`
	ActiveFilters []int32                    `protobuf:"varint,3,rep,name=active_filters,json=activeFilters" json:"active_filters,omitempty"`
	SortModes     []*SortMode                `protobuf:"bytes,4,rep,name=sort_modes,json=sortModes" json:"sort_modes,omitempty"`
}

func (x *GetFiltersResponse) Reset() {
	*x = GetFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiltersResponse) ProtoMessage() {}

func (x *GetFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiltersResponse.ProtoReflect.Descriptor instead.
func (*GetFiltersResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{89}
}

func (x *GetFiltersResponse) GetStatus() GetFiltersResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetFiltersResponse_OK
}

func (x *GetFiltersResponse) GetFilters() []*FilterGroup {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetFiltersResponse) GetActiveFilters() []int32 {
	if x != nil {
		return x.ActiveFilters
	}
	return nil
}

func (x *GetFiltersResponse) GetSortModes() []*SortMode {
	if x != nil {
		return x.SortModes
	}
	return nil
}

type GetFilteredMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth       *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Filters    []int32 `protobuf:"varint,2,rep,name=filters" json:"filters,omitempty"`
	SortModeId *int32  `protobuf:"varint,3,opt,name=sort_mode_id,json=sortModeId" json:"sort_mode_id,omitempty"`
}

func (x *GetFilteredMoviesRequest) Reset() {
	*x = GetFilteredMoviesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilteredMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilteredMoviesRequest) ProtoMessage() {}

func (x *GetFilteredMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilteredMoviesRequest.ProtoReflect.Descriptor instead.
func (*GetFilteredMoviesRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{90}
}

func (x *GetFilteredMoviesRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *GetFilteredMoviesRequest) GetFilters() []int32 {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetFilteredMoviesRequest) GetSortModeId() int32 {
	if x != nil && x.SortModeId != nil {
		return *x.SortModeId
	}
	return 0
}

type GetFilteredMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GetFilteredMoviesResponse_Result `protobuf:"varint,1,opt,name=status,enum=movie_service.GetFilteredMoviesResponse_Result" json:"status,omitempty"`
	Movies []int32                           `protobuf:"varint,2,rep,name=movies" json:"movies,omitempty"`
}

func (x *GetFilteredMoviesResponse) Reset() {
	*x = GetFilteredMoviesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilteredMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilteredMoviesResponse) ProtoMessage() {}

func (x *GetFilteredMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilteredMoviesResponse.ProtoReflect.Descriptor instead.
func (*GetFilteredMoviesResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{91}
}

func (x *GetFilteredMoviesResponse) GetStatus() GetFilteredMoviesResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetFilteredMoviesResponse_OK
}

func (x *GetFilteredMoviesResponse) GetMovies() []int32 {
	if x != nil {
		return x.Movies
	}
	return nil
}

type FilterOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title   *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Path    *string `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	Filters []int32 `protobuf:"varint,4,rep,name=filters" json:"filters,omitempty"`
	Slug    *string `protobuf:"bytes,5,opt,name=slug" json:"slug,omitempty"`
}

func (x *FilterOption) Reset() {
	*x = FilterOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterOption) ProtoMessage() {}

func (x *FilterOption) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterOption.ProtoReflect.Descriptor instead.
func (*FilterOption) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{92}
}

func (x *FilterOption) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FilterOption) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FilterOption) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *FilterOption) GetFilters() []int32 {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *FilterOption) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

type GetFilterOptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth           *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	FilterOptionId *int32  `protobuf:"varint,2,opt,name=filter_option_id,json=filterOptionId" json:"filter_option_id,omitempty"`
}

func (x *GetFilterOptionRequest) Reset() {
	*x = GetFilterOptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilterOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilterOptionRequest) ProtoMessage() {}

func (x *GetFilterOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilterOptionRequest.ProtoReflect.Descriptor instead.
func (*GetFilterOptionRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{93}
}

func (x *GetFilterOptionRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *GetFilterOptionRequest) GetFilterOptionId() int32 {
	if x != nil && x.FilterOptionId != nil {
		return *x.FilterOptionId
	}
	return 0
}

type GetFilterOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *GetFilterOptionResponse_Result `protobuf:"varint,1,opt,name=status,enum=movie_service.GetFilterOptionResponse_Result" json:"status,omitempty"`
	FilterOption *FilterOption                   `protobuf:"bytes,2,opt,name=filter_option,json=filterOption" json:"filter_option,omitempty"`
}

func (x *GetFilterOptionResponse) Reset() {
	*x = GetFilterOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilterOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilterOptionResponse) ProtoMessage() {}

func (x *GetFilterOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilterOptionResponse.ProtoReflect.Descriptor instead.
func (*GetFilterOptionResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{94}
}

func (x *GetFilterOptionResponse) GetStatus() GetFilterOptionResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetFilterOptionResponse_OK
}

func (x *GetFilterOptionResponse) GetFilterOption() *FilterOption {
	if x != nil {
		return x.FilterOption
	}
	return nil
}

type NotifyMovieReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId *int32  `protobuf:"varint,1,req,name=movie_id,json=movieId" json:"movie_id,omitempty"`
	Email   *string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
}

func (x *NotifyMovieReleaseRequest) Reset() {
	*x = NotifyMovieReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyMovieReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMovieReleaseRequest) ProtoMessage() {}

func (x *NotifyMovieReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMovieReleaseRequest.ProtoReflect.Descriptor instead.
func (*NotifyMovieReleaseRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{95}
}

func (x *NotifyMovieReleaseRequest) GetMovieId() int32 {
	if x != nil && x.MovieId != nil {
		return *x.MovieId
	}
	return 0
}

func (x *NotifyMovieReleaseRequest) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

type NotifyMovieReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *NotifyMovieReleaseResponse_Result `protobuf:"varint,1,opt,name=status,enum=movie_service.NotifyMovieReleaseResponse_Result" json:"status,omitempty"`
}

func (x *NotifyMovieReleaseResponse) Reset() {
	*x = NotifyMovieReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyMovieReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMovieReleaseResponse) ProtoMessage() {}

func (x *NotifyMovieReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMovieReleaseResponse.ProtoReflect.Descriptor instead.
func (*NotifyMovieReleaseResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{96}
}

func (x *NotifyMovieReleaseResponse) GetStatus() NotifyMovieReleaseResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return NotifyMovieReleaseResponse_OK
}

type GetRecommendationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRecommendationsRequest) Reset() {
	*x = GetRecommendationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendationsRequest) ProtoMessage() {}

func (x *GetRecommendationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendationsRequest.ProtoReflect.Descriptor instead.
func (*GetRecommendationsRequest) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{97}
}

type GetRecommendationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recommendations []*Recommendation `protobuf:"bytes,1,rep,name=recommendations" json:"recommendations,omitempty"`
}

func (x *GetRecommendationsResponse) Reset() {
	*x = GetRecommendationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendationsResponse) ProtoMessage() {}

func (x *GetRecommendationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendationsResponse.ProtoReflect.Descriptor instead.
func (*GetRecommendationsResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{98}
}

func (x *GetRecommendationsResponse) GetRecommendations() []*Recommendation {
	if x != nil {
		return x.Recommendations
	}
	return nil
}

type GetAllMoviesInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Movies []*Movie `protobuf:"bytes,1,rep,name=movies" json:"movies,omitempty"`
}

func (x *GetAllMoviesInfoResponse) Reset() {
	*x = GetAllMoviesInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllMoviesInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMoviesInfoResponse) ProtoMessage() {}

func (x *GetAllMoviesInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMoviesInfoResponse.ProtoReflect.Descriptor instead.
func (*GetAllMoviesInfoResponse) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{99}
}

func (x *GetAllMoviesInfoResponse) GetMovies() []*Movie {
	if x != nil {
		return x.Movies
	}
	return nil
}

type Poster_Dimensions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  *int32 `protobuf:"varint,1,req,name=width" json:"width,omitempty"`
	Height *int32 `protobuf:"varint,2,req,name=height" json:"height,omitempty"`
}

func (x *Poster_Dimensions) Reset() {
	*x = Poster_Dimensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_movie_service_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poster_Dimensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poster_Dimensions) ProtoMessage() {}

func (x *Poster_Dimensions) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_movie_service_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poster_Dimensions.ProtoReflect.Descriptor instead.
func (*Poster_Dimensions) Descriptor() ([]byte, []int) {
	return file_movie_service_movie_service_proto_rawDescGZIP(), []int{9, 0}
}

func (x *Poster_Dimensions) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *Poster_Dimensions) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

var File_movie_service_movie_service_proto protoreflect.FileDescriptor

var file_movie_service_movie_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x0d, 0x0a, 0x05,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x64, 0x62, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x64, 0x62,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x69, 0x6e, 0x6f, 0x70,
	0x6f, 0x69, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x6f, 0x70, 0x6f, 0x69, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x52, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x2f,
	0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12,
	0x35, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x6f, 0x75, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18,
	0x27, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x77, 0x65, 0x65, 0x74, 0x5f, 0x74, 0x76, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x65, 0x65, 0x74, 0x54, 0x76, 0x12, 0x29, 0x0a,
	0x10, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a,
	0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x70, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x67, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x08, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x9b, 0x01,
	0x0a, 0x05, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x56, 0x32, 0x55, 0x72, 0x6c, 0x22, 0x9e, 0x01, 0x0a, 0x08,
	0x53, 0x75, 0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0b,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x56, 0x32, 0x55, 0x72, 0x6c, 0x22, 0x57, 0x0a, 0x07,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0xbd, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x76, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x54, 0x56, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x49, 0x4e, 0x45, 0x4d,
	0x41, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x45, 0x52, 0x45, 0x53,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x41, 0x52, 0x54, 0x4f, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x54,
	0x41, 0x4c, 0x4f, 0x47, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x59, 0x5f, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x53, 0x10, 0x08, 0x22, 0x50, 0x0a, 0x10, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x8b, 0x03, 0x0a, 0x0e, 0x43, 0x61, 0x62, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x62, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x70, 0x55,
	0x70, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x06, 0x12, 0x0e, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x07, 0x12, 0x0e, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x10, 0x08, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x09, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x42, 0x6f, 0x78, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x0b,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x55,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13,
	0x50, 0x61, 0x79, 0x59, 0x6f, 0x75, 0x72, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x10, 0x0d, 0x22, 0xfe, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x62, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x61, 0x62, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x62, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x22, 0x61, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x73, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x10, 0x05, 0x22, 0xab, 0x02, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x43, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x72, 0x1a, 0x3a, 0x0a, 0x0a, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x2b, 0x0a, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x10, 0x01, 0x22, 0x8d, 0x03, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x29, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x24,
	0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x22, 0x2c, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x22, 0xbc, 0x03, 0x0a, 0x07, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x3c, 0x0a,
	0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x0b,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x22, 0xd9, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x69, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x3a, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x61, 0x72, 0x6b, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x65, 0x6e, 0x72,
	0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x70, 0x67, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x76, 0x53, 0x68, 0x6f, 0x77, 0x10, 0x08, 0x22, 0xb1,
	0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x22, 0x4b, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22,
	0x58, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x65, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x22, 0x6e, 0x0a, 0x0e, 0x50, 0x72, 0x65,
	0x6d, 0x69, 0x65, 0x72, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x0c, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x7a, 0x0a, 0x08, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0xf9, 0x03, 0x0a, 0x0a, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x69, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x1e, 0x0a, 0x09, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x75, 0x79, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x65, 0x6e, 0x74,
	0x10, 0x01, 0x22, 0x7c, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x6b, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x22, 0x50, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69,
	0x73, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xf6, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xa2, 0x02, 0x0a, 0x05, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x02, 0x49, 0x64, 0x12,
	0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x45, 0x47, 0x4f, 0x47, 0x4f, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x6f, 0x6e, 0x61, 0x72, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x50, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x56, 0x10, 0x05, 0x12,
	0x07, 0x0a, 0x03, 0x55, 0x54, 0x53, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x69, 0x61, 0x73,
	0x61, 0x74, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x69, 0x61, 0x73, 0x61, 0x74, 0x50, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x69, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x43, 0x6f, 0x6d, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x4d,
	0x6f, 0x73, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x77,
	0x65, 0x65, 0x74, 0x54, 0x56, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x10, 0xe8, 0x07,
	0x12, 0x1b, 0x0a, 0x16, 0x53, 0x77, 0x65, 0x65, 0x74, 0x54, 0x56, 0x4d, 0x6f, 0x6c, 0x64, 0x6f,
	0x76, 0x61, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x10, 0xe9, 0x07, 0x22, 0x82, 0x02,
	0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x49, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x22, 0x71, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72,
	0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x10, 0x02, 0x22, 0x46, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74,
	0x68, 0x10, 0x01, 0x22, 0x4f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10,
	0x01, 0x22, 0xf9, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x17, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x01, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x12, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x6e, 0x65, 0x65,
	0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0c, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x65, 0x65,
	0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x22, 0xa6, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f,
	0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x98, 0x07, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a,
	0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x09,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a,
	0x12, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a,
	0x16, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x61, 0x62, 0x5f, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x62, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x61, 0x62, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01,
	0x22, 0x31, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x22, 0xa0, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f,
	0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0xdc, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x47,
	0x0a, 0x13, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c,
	0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc0, 0x04, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x03, 0x61, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x52, 0x03, 0x61, 0x64, 0x73, 0x12,
	0x1c, 0x0a, 0x0a, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x54, 0x61, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x34, 0x0a,
	0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x52, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x64,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d,
	0x65, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x65,
	0x65, 0x64, 0x44, 0x52, 0x4d, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x05, 0x22, 0x90, 0x01, 0x0a, 0x0a, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x7c, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0xc8, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75,
	0x74, 0x68, 0x10, 0x01, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69,
	0x65, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x22, 0x53, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69,
	0x65, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x73, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68,
	0x10, 0x01, 0x22, 0x3f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f,
	0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01,
	0x22, 0x17, 0x0a, 0x15, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x70, 0x0a, 0x16, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x10, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x22, 0x2e, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x9a, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0x48, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41,
	0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0x4b, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1c, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0x58, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65,
	0x6d, 0x69, 0x65, 0x72, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37,
	0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x07,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41,
	0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0x2f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x49, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0x96, 0x07, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x70, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x30,
	0x0a, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73,
	0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6d, 0x62,
	0x69, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x6d, 0x62, 0x69, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72,
	0x55, 0x72, 0x6c, 0x22, 0x25, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x56, 0x49, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x33, 0x0a, 0x12, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73,
	0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0x9c,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x22,
	0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0x47, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68,
	0x10, 0x01, 0x22, 0x45, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0x32, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0xa2, 0x01,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68,
	0x10, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x68,
	0x0a, 0x0c, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x56, 0x49, 0x45,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x45, 0x52, 0x45, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x41, 0x52, 0x54, 0x4f, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x56, 0x10,
	0x05, 0x22, 0xb7, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1c, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0x74, 0x0a, 0x12, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x27, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75,
	0x74, 0x68, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x22,
	0x5b, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x9b, 0x01, 0x0a,
	0x13, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x27, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x22, 0x64, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64,
	0x22, 0x9f, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x27, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e,
	0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x02, 0x22, 0x92, 0x02, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x28, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x64, 0x69, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x02, 0x22, 0xed, 0x04, 0x0a, 0x02, 0x41, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x61, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x22, 0x21, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47,
	0x45, 0x10, 0x01, 0x22, 0x32, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0x02, 0x22, 0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x4d, 0x49, 0x44, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53,
	0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0xd9, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x79, 0x65, 0x61, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x79, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x79, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2f,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x80, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x65, 0x6e, 0x72,
	0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x10, 0x08, 0x22, 0xde, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x10,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22,
	0x6a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0x76, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x22, 0x56, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x28,
	0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1c, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0x4c, 0x0a, 0x19, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x65, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x10, 0x01, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x65, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x48, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x2a, 0x26, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x48, 0x4c, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x53, 0x48, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x4d, 0x53, 0x53, 0x10, 0x02, 0x2a, 0x42, 0x0a, 0x04, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d,
	0x4f, 0x56, 0x49, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x45,
	0x52, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x52, 0x54, 0x4f, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0xa5, 0x03,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x4d, 0x4f,
	0x56, 0x49, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50, 0x52,
	0x45, 0x4d, 0x49, 0x45, 0x52, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x57,
	0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x49, 0x46, 0x46, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x06,
	0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x4d, 0x4f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x43,
	0x4f, 0x44, 0x45, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x57, 0x45,
	0x42, 0x5f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10,
	0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x42, 0x4f, 0x54, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x4c,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x48, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x48, 0x4f, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x11,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x47, 0x4e, 0x55, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x12, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52,
	0x49, 0x41, 0x4c, 0x10, 0x13, 0x2a, 0x29, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x6b,
	0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x10, 0x02,
	0x32, 0xf1, 0x3f, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xbb, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xd1, 0x01, 0x22, 0x1d,
	0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x27, 0x22, 0x22, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x22, 0x23, 0x2f, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73,
	0x3a, 0x01, 0x2a, 0x5a, 0x2b, 0x22, 0x26, 0x2f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a,
	0x5a, 0x2d, 0x22, 0x28, 0x2f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0xd3, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65,
	0x72, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe7, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xe0, 0x01, 0x22, 0x20, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x2b, 0x22, 0x26, 0x2f, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73,
	0x3a, 0x01, 0x2a, 0x5a, 0x2e, 0x22, 0x29, 0x2f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x62,
	0x3a, 0x01, 0x2a, 0x5a, 0x30, 0x22, 0x2b, 0x2f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xb3, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e,
	0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72,
	0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xcc, 0x01, 0x22,
	0x1c, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47,
	0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x26, 0x22, 0x21, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73,
	0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x27, 0x22, 0x22, 0x2f, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72,
	0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x2c, 0x22,
	0x27, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xbd, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x22, 0x1f, 0x2f, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x29, 0x22, 0x24, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xa3, 0x02, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xc2, 0x01, 0x22,
	0x1a, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x5a, 0x24,
	0x22, 0x1f, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x25, 0x22, 0x20, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x22, 0x23, 0x2f,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01,
	0x2a, 0x12, 0xfb, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0xa9, 0x01, 0x22, 0x15, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x3a, 0x01, 0x2a,
	0x5a, 0x1f, 0x22, 0x1a, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01,
	0x2a, 0x5a, 0x20, 0x22, 0x1b, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x3a, 0x01, 0x2a, 0x5a, 0x23, 0x22, 0x1e, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x25, 0x22, 0x20, 0x2f, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0xcb, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72,
	0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe2, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0xdb, 0x01, 0x22, 0x1f, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x29, 0x22, 0x24, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69,
	0x65, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01,
	0x2a, 0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d,
	0x69, 0x65, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x2d, 0x22,
	0x28, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x2f, 0x22, 0x2a,
	0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xd3, 0x02,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe7, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0xe0, 0x01, 0x22, 0x20, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x2b, 0x22, 0x26, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x5a, 0x2e, 0x22, 0x29, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x3a, 0x01,
	0x2a, 0x5a, 0x30, 0x22, 0x2b, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x01, 0x2a, 0x12, 0xc3, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdd, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0xd6, 0x01, 0x22, 0x1e, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x22, 0x23, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x5a, 0x29, 0x22, 0x24, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x2c, 0x22, 0x27, 0x2f,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x2e, 0x22, 0x29, 0x2f, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xe3, 0x02, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf1, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xea, 0x01, 0x22, 0x22, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x2c, 0x22, 0x27,
	0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x2d, 0x22, 0x28, 0x2f, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x30, 0x22, 0x2b, 0x2f, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x32, 0x22, 0x2d, 0x2f,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0xdb, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xec,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xe5, 0x01, 0x22, 0x21, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x2b,
	0x22, 0x26, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x2c, 0x22, 0x27, 0x2f,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x2f, 0x22, 0x2a, 0x2f, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x31, 0x22, 0x2c, 0x2f, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xa3, 0x02,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xc2,
	0x01, 0x22, 0x1a, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a,
	0x5a, 0x24, 0x22, 0x1f, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x25, 0x22, 0x20, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65,
	0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x22,
	0x23, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x01, 0x2a, 0x12, 0xa3, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0xc2, 0x01, 0x22, 0x1a, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x53, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x5a, 0x24, 0x22, 0x1f, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x53, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x25, 0x22, 0x20,
	0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x53, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x22, 0x23, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x53, 0x65, 0x74, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x2a, 0x22,
	0x25, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x53, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xb3, 0x02, 0x0a, 0x0e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0xcc, 0x01, 0x22, 0x1c, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x3a, 0x01, 0x2a, 0x5a, 0x26, 0x22, 0x21, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x27, 0x22, 0x22,
	0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x62, 0x3a, 0x01,
	0x2a, 0x5a, 0x2c, 0x22, 0x27, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0xcb, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe2, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0xdb, 0x01, 0x22, 0x1f, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x29, 0x22, 0x24, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01,
	0x2a, 0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x2d, 0x22,
	0x28, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x2f, 0x22, 0x2a,
	0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xab, 0x02,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xce, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0xc7, 0x01, 0x22, 0x1b, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x3a, 0x01, 0x2a, 0x5a, 0x25, 0x22, 0x20, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x26, 0x22, 0x21, 0x2f,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x3a, 0x01, 0x2a, 0x5a, 0x29, 0x22, 0x24, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x2b,
	0x22, 0x26, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xb3, 0x02, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xcc, 0x01, 0x22, 0x1c, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x5a, 0x26, 0x22, 0x21, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x27,
	0x22, 0x22, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x62,
	0x3a, 0x01, 0x2a, 0x5a, 0x2c, 0x22, 0x27, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01,
	0x2a, 0x12, 0xeb, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xef, 0x01,
	0x22, 0x23, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x2d, 0x22, 0x28, 0x2f, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x2e, 0x22, 0x29, 0x2f, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47,
	0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x31, 0x22, 0x2c, 0x2f, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47,
	0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x33, 0x22, 0x2e, 0x2f, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0x7c, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22, 0x12, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x52, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x5a,
	0x1c, 0x22, 0x17, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xb3, 0x02,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0xcc, 0x01, 0x22, 0x1c, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x26, 0x22, 0x21, 0x2f, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x5a, 0x27, 0x22, 0x22, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x2c, 0x22, 0x27, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x01, 0x2a, 0x12, 0xc3, 0x02, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdd, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0xd6, 0x01, 0x22, 0x1e, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x22, 0x23, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x5a, 0x29, 0x22, 0x24, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x2c, 0x22, 0x27, 0x2f,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x2e, 0x22, 0x29, 0x2f, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xdb, 0x02, 0x0a, 0x13, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xec, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0xe5, 0x01, 0x22, 0x21, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x2b, 0x22, 0x26, 0x2f, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x2e, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x2c, 0x22, 0x27, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x3a, 0x01, 0x2a, 0x5a, 0x2f, 0x22, 0x2a, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x2e, 0x70,
	0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x31, 0x22, 0x2c, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x2e,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x9f, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x22, 0x19, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x23, 0x22, 0x1e, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x9f, 0x01, 0x0a, 0x0b, 0x45, 0x64,
	0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x64, 0x69,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x22, 0x19, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x23, 0x22, 0x1e, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xa9, 0x01, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47,
	0x22, 0x1b, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a,
	0x5a, 0x25, 0x22, 0x20, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x41, 0x22, 0x18, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x22, 0x22, 0x1d, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xbd, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x22, 0x1f, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x29, 0x22, 0x24, 0x2f, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xb3, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x22,
	0x1d, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01,
	0x2a, 0x5a, 0x27, 0x22, 0x22, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xc2, 0x01, 0x0a, 0x12, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x22, 0x20,
	0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x3a, 0x01, 0x2a, 0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0xc2, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x51, 0x22, 0x20, 0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x01, 0x2a, 0x32, 0x6b, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x47, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x61, 0x2e, 0x6d, 0x79, 0x74, 0x72,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x76, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x77,
	0x65, 0x65, 0x74, 0x2e, 0x74, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
}

var (
	file_movie_service_movie_service_proto_rawDescOnce sync.Once
	file_movie_service_movie_service_proto_rawDescData = file_movie_service_movie_service_proto_rawDesc
)

func file_movie_service_movie_service_proto_rawDescGZIP() []byte {
	file_movie_service_movie_service_proto_rawDescOnce.Do(func() {
		file_movie_service_movie_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_movie_service_movie_service_proto_rawDescData)
	})
	return file_movie_service_movie_service_proto_rawDescData
}

var file_movie_service_movie_service_proto_enumTypes = make([]protoimpl.EnumInfo, 48)
var file_movie_service_movie_service_proto_msgTypes = make([]protoimpl.MessageInfo, 101)
var file_movie_service_movie_service_proto_goTypes = []interface{}{
	(LinkType)(0),                             // 0: movie_service.LinkType
	(Page)(0),                                 // 1: movie_service.Page
	(PromoBannerAction)(0),                    // 2: movie_service.PromoBannerAction
	(Rating)(0),                               // 3: movie_service.Rating
	(Section_Type)(0),                         // 4: movie_service.Section.Type
	(CabSectionItem_Type)(0),                  // 5: movie_service.CabSectionItem.Type
	(CabSection_Type)(0),                      // 6: movie_service.CabSection.Type
	(Poster_Orientation)(0),                   // 7: movie_service.Poster.Orientation
	(Collection_Type)(0),                      // 8: movie_service.Collection.Type
	(MovieOffer_OfferType)(0),                 // 9: movie_service.MovieOffer.OfferType
	(Owner_Id)(0),                             // 10: movie_service.Owner.Id
	(Recommendation_RecommendationType)(0),    // 11: movie_service.Recommendation.RecommendationType
	(GetGenreMoviesResponse_Result)(0),        // 12: movie_service.GetGenreMoviesResponse.Result
	(GetSubgenreMoviesResponse_Result)(0),     // 13: movie_service.GetSubgenreMoviesResponse.Result
	(GetMovieInfoResponse_Result)(0),          // 14: movie_service.GetMovieInfoResponse.Result
	(GetConfigurationResponse_Result)(0),      // 15: movie_service.GetConfigurationResponse.Result
	(GetRecommendedMoviesResponse_Result)(0),  // 16: movie_service.GetRecommendedMoviesResponse.Result
	(GetLinkResponse_Result)(0),               // 17: movie_service.GetLinkResponse.Result
	(GetCollectionMoviesResponse_Result)(0),   // 18: movie_service.GetCollectionMoviesResponse.Result
	(GetPremiereMoviesResponse_Result)(0),     // 19: movie_service.GetPremiereMoviesResponse.Result
	(GetWatchListResponse_Result)(0),          // 20: movie_service.GetWatchListResponse.Result
	(SetWatchInfoResponse_Result)(0),          // 21: movie_service.SetWatchInfoResponse.Result
	(ClearWatchInfoResponse_Result)(0),        // 22: movie_service.ClearWatchInfoResponse.Result
	(GetFavoriteMoviesResponse_Result)(0),     // 23: movie_service.GetFavoriteMoviesResponse.Result
	(AddFavoriteMovieResponse_Result)(0),      // 24: movie_service.AddFavoriteMovieResponse.Result
	(RemoveFavoriteMovieResponse_Result)(0),   // 25: movie_service.RemoveFavoriteMovieResponse.Result
	(GetPremiereBannersResponse_Result)(0),    // 26: movie_service.GetPremiereBannersResponse.Result
	(PromoBanner_ContentType)(0),              // 27: movie_service.PromoBanner.ContentType
	(GetPromoBannersResponse_Result)(0),       // 28: movie_service.GetPromoBannersResponse.Result
	(GetPurchasedMoviesResponse_Result)(0),    // 29: movie_service.GetPurchasedMoviesResponse.Result
	(GetPersonInfoResponse_Result)(0),         // 30: movie_service.GetPersonInfoResponse.Result
	(GetPersonsInfoResponse_Result)(0),        // 31: movie_service.GetPersonsInfoResponse.Result
	(GetDownloadableMoviesResponse_Result)(0), // 32: movie_service.GetDownloadableMoviesResponse.Result
	(RateResponse_Result)(0),                  // 33: movie_service.RateResponse.Result
	(GetCollectionsRequest_Type)(0),           // 34: movie_service.GetCollectionsRequest.Type
	(GetCollectionsResponse_Result)(0),        // 35: movie_service.GetCollectionsResponse.Result
	(PostCommentResponse_Result)(0),           // 36: movie_service.PostCommentResponse.Result
	(EditCommentResponse_Result)(0),           // 37: movie_service.EditCommentResponse.Result
	(DeleteCommentResponse_Result)(0),         // 38: movie_service.DeleteCommentResponse.Result
	(InternalCommentMessage_Action)(0),        // 39: movie_service.InternalCommentMessage.Action
	(Ad_MediaType)(0),                         // 40: movie_service.Ad.MediaType
	(Ad_ContentType)(0),                       // 41: movie_service.Ad.ContentType
	(Ad_Type)(0),                              // 42: movie_service.Ad.Type
	(FilterGroup_Type)(0),                     // 43: movie_service.FilterGroup.Type
	(GetFiltersResponse_Result)(0),            // 44: movie_service.GetFiltersResponse.Result
	(GetFilteredMoviesResponse_Result)(0),     // 45: movie_service.GetFilteredMoviesResponse.Result
	(GetFilterOptionResponse_Result)(0),       // 46: movie_service.GetFilterOptionResponse.Result
	(NotifyMovieReleaseResponse_Result)(0),    // 47: movie_service.NotifyMovieReleaseResponse.Result
	(*Movie)(nil),                             // 48: movie_service.Movie
	(*Category)(nil),                          // 49: movie_service.Category
	(*Genre)(nil),                             // 50: movie_service.Genre
	(*Subgenre)(nil),                          // 51: movie_service.Subgenre
	(*Country)(nil),                           // 52: movie_service.Country
	(*Section)(nil),                           // 53: movie_service.Section
	(*BannerResolution)(nil),                  // 54: movie_service.BannerResolution
	(*CabSectionItem)(nil),                    // 55: movie_service.CabSectionItem
	(*CabSection)(nil),                        // 56: movie_service.CabSection
	(*Poster)(nil),                            // 57: movie_service.Poster
	(*Person)(nil),                            // 58: movie_service.Person
	(*Role)(nil),                              // 59: movie_service.Role
	(*Season)(nil),                            // 60: movie_service.Season
	(*Episode)(nil),                           // 61: movie_service.Episode
	(*Collection)(nil),                        // 62: movie_service.Collection
	(*CollectionItem)(nil),                    // 63: movie_service.CollectionItem
	(*SortMode)(nil),                          // 64: movie_service.SortMode
	(*Period)(nil),                            // 65: movie_service.Period
	(*PremiereBanner)(nil),                    // 66: movie_service.PremiereBanner
	(*VideoQuality)(nil),                      // 67: movie_service.VideoQuality
	(*Language)(nil),                          // 68: movie_service.Language
	(*MovieOffer)(nil),                        // 69: movie_service.MovieOffer
	(*AudioTrack)(nil),                        // 70: movie_service.AudioTrack
	(*Subtitle)(nil),                          // 71: movie_service.Subtitle
	(*Statistics)(nil),                        // 72: movie_service.Statistics
	(*Comment)(nil),                           // 73: movie_service.Comment
	(*Owner)(nil),                             // 74: movie_service.Owner
	(*WatchInfo)(nil),                         // 75: movie_service.WatchInfo
	(*ExternalIdPair)(nil),                    // 76: movie_service.ExternalIdPair
	(*Recommendation)(nil),                    // 77: movie_service.Recommendation
	(*GetGenreMoviesRequest)(nil),             // 78: movie_service.GetGenreMoviesRequest
	(*GetGenreMoviesResponse)(nil),            // 79: movie_service.GetGenreMoviesResponse
	(*GetSubgenreMoviesRequest)(nil),          // 80: movie_service.GetSubgenreMoviesRequest
	(*GetSubgenreMoviesResponse)(nil),         // 81: movie_service.GetSubgenreMoviesResponse
	(*GetMovieInfoRequest)(nil),               // 82: movie_service.GetMovieInfoRequest
	(*GetMovieInfoResponse)(nil),              // 83: movie_service.GetMovieInfoResponse
	(*GetConfigurationRequest)(nil),           // 84: movie_service.GetConfigurationRequest
	(*GetConfigurationResponse)(nil),          // 85: movie_service.GetConfigurationResponse
	(*GetRecommendedMoviesRequest)(nil),       // 86: movie_service.GetRecommendedMoviesRequest
	(*GetRecommendedMoviesResponse)(nil),      // 87: movie_service.GetRecommendedMoviesResponse
	(*GetLinkRequest)(nil),                    // 88: movie_service.GetLinkRequest
	(*GetLinkResponse)(nil),                   // 89: movie_service.GetLinkResponse
	(*Thumbnails)(nil),                        // 90: movie_service.Thumbnails
	(*GetCollectionMoviesRequest)(nil),        // 91: movie_service.GetCollectionMoviesRequest
	(*GetCollectionMoviesResponse)(nil),       // 92: movie_service.GetCollectionMoviesResponse
	(*GetPremiereMoviesRequest)(nil),          // 93: movie_service.GetPremiereMoviesRequest
	(*PremieresCollection)(nil),               // 94: movie_service.PremieresCollection
	(*GetPremiereMoviesResponse)(nil),         // 95: movie_service.GetPremiereMoviesResponse
	(*GetWatchListRequest)(nil),               // 96: movie_service.GetWatchListRequest
	(*GetWatchListResponse)(nil),              // 97: movie_service.GetWatchListResponse
	(*SetWatchInfoRequest)(nil),               // 98: movie_service.SetWatchInfoRequest
	(*SetWatchInfoResponse)(nil),              // 99: movie_service.SetWatchInfoResponse
	(*ClearWatchInfoRequest)(nil),             // 100: movie_service.ClearWatchInfoRequest
	(*ClearWatchInfoResponse)(nil),            // 101: movie_service.ClearWatchInfoResponse
	(*GetFavoriteMoviesRequest)(nil),          // 102: movie_service.GetFavoriteMoviesRequest
	(*GetFavoriteMoviesResponse)(nil),         // 103: movie_service.GetFavoriteMoviesResponse
	(*AddFavoriteMovieRequest)(nil),           // 104: movie_service.AddFavoriteMovieRequest
	(*AddFavoriteMovieResponse)(nil),          // 105: movie_service.AddFavoriteMovieResponse
	(*RemoveFavoriteMovieRequest)(nil),        // 106: movie_service.RemoveFavoriteMovieRequest
	(*RemoveFavoriteMovieResponse)(nil),       // 107: movie_service.RemoveFavoriteMovieResponse
	(*GetPremiereBannersRequest)(nil),         // 108: movie_service.GetPremiereBannersRequest
	(*GetPremiereBannersResponse)(nil),        // 109: movie_service.GetPremiereBannersResponse
	(*GetPurchasedMoviesRequest)(nil),         // 110: movie_service.GetPurchasedMoviesRequest
	(*PromoBannerImage)(nil),                  // 111: movie_service.PromoBannerImage
	(*PromoBanner)(nil),                       // 112: movie_service.PromoBanner
	(*GetPromoBannersRequest)(nil),            // 113: movie_service.GetPromoBannersRequest
	(*GetPromoBannersResponse)(nil),           // 114: movie_service.GetPromoBannersResponse
	(*GetPurchasedMoviesResponse)(nil),        // 115: movie_service.GetPurchasedMoviesResponse
	(*GetPersonInfoRequest)(nil),              // 116: movie_service.GetPersonInfoRequest
	(*GetPersonInfoResponse)(nil),             // 117: movie_service.GetPersonInfoResponse
	(*GetPersonsInfoRequest)(nil),             // 118: movie_service.GetPersonsInfoRequest
	(*GetPersonsInfoResponse)(nil),            // 119: movie_service.GetPersonsInfoResponse
	(*GetDownloadableMoviesRequest)(nil),      // 120: movie_service.GetDownloadableMoviesRequest
	(*GetDownloadableMoviesResponse)(nil),     // 121: movie_service.GetDownloadableMoviesResponse
	(*RateRequest)(nil),                       // 122: movie_service.RateRequest
	(*RateResponse)(nil),                      // 123: movie_service.RateResponse
	(*GetCollectionsRequest)(nil),             // 124: movie_service.GetCollectionsRequest
	(*GetCollectionsResponse)(nil),            // 125: movie_service.GetCollectionsResponse
	(*PostCommentRequest)(nil),                // 126: movie_service.PostCommentRequest
	(*PostCommentResponse)(nil),               // 127: movie_service.PostCommentResponse
	(*EditCommentRequest)(nil),                // 128: movie_service.EditCommentRequest
	(*EditCommentResponse)(nil),               // 129: movie_service.EditCommentResponse
	(*DeleteCommentRequest)(nil),              // 130: movie_service.DeleteCommentRequest
	(*DeleteCommentResponse)(nil),             // 131: movie_service.DeleteCommentResponse
	(*InternalCommentMessage)(nil),            // 132: movie_service.InternalCommentMessage
	(*Ad)(nil),                                // 133: movie_service.Ad
	(*Filter)(nil),                            // 134: movie_service.Filter
	(*FilterGroup)(nil),                       // 135: movie_service.FilterGroup
	(*GetFiltersRequest)(nil),                 // 136: movie_service.GetFiltersRequest
	(*GetFiltersResponse)(nil),                // 137: movie_service.GetFiltersResponse
	(*GetFilteredMoviesRequest)(nil),          // 138: movie_service.GetFilteredMoviesRequest
	(*GetFilteredMoviesResponse)(nil),         // 139: movie_service.GetFilteredMoviesResponse
	(*FilterOption)(nil),                      // 140: movie_service.FilterOption
	(*GetFilterOptionRequest)(nil),            // 141: movie_service.GetFilterOptionRequest
	(*GetFilterOptionResponse)(nil),           // 142: movie_service.GetFilterOptionResponse
	(*NotifyMovieReleaseRequest)(nil),         // 143: movie_service.NotifyMovieReleaseRequest
	(*NotifyMovieReleaseResponse)(nil),        // 144: movie_service.NotifyMovieReleaseResponse
	(*GetRecommendationsRequest)(nil),         // 145: movie_service.GetRecommendationsRequest
	(*GetRecommendationsResponse)(nil),        // 146: movie_service.GetRecommendationsResponse
	(*GetAllMoviesInfoResponse)(nil),          // 147: movie_service.GetAllMoviesInfoResponse
	(*Poster_Dimensions)(nil),                 // 148: movie_service.Poster.Dimensions
	(DRMType)(0),                              // 149: movie_service.DRMType
	(*emptypb.Empty)(nil),                     // 150: google.protobuf.Empty
}
var file_movie_service_movie_service_proto_depIdxs = []int32{
	76,  // 0: movie_service.Movie.external_id_pairs:type_name -> movie_service.ExternalIdPair
	58,  // 1: movie_service.Movie.people:type_name -> movie_service.Person
	60,  // 2: movie_service.Movie.seasons:type_name -> movie_service.Season
	75,  // 3: movie_service.Movie.watch_info:type_name -> movie_service.WatchInfo
	69,  // 4: movie_service.Movie.offers:type_name -> movie_service.MovieOffer
	57,  // 5: movie_service.Movie.posters:type_name -> movie_service.Poster
	70,  // 6: movie_service.Movie.audio_tracks:type_name -> movie_service.AudioTrack
	71,  // 7: movie_service.Movie.subtitles:type_name -> movie_service.Subtitle
	72,  // 8: movie_service.Movie.statistics:type_name -> movie_service.Statistics
	3,   // 9: movie_service.Movie.user_rating:type_name -> movie_service.Rating
	73,  // 10: movie_service.Movie.comments:type_name -> movie_service.Comment
	4,   // 11: movie_service.Section.type:type_name -> movie_service.Section.Type
	5,   // 12: movie_service.CabSectionItem.type:type_name -> movie_service.CabSectionItem.Type
	6,   // 13: movie_service.CabSection.type:type_name -> movie_service.CabSection.Type
	55,  // 14: movie_service.CabSection.items:type_name -> movie_service.CabSectionItem
	7,   // 15: movie_service.Poster.orientation:type_name -> movie_service.Poster.Orientation
	148, // 16: movie_service.Poster.dimensions:type_name -> movie_service.Poster.Dimensions
	59,  // 17: movie_service.Person.role:type_name -> movie_service.Role
	59,  // 18: movie_service.Person.roles:type_name -> movie_service.Role
	61,  // 19: movie_service.Season.episodes:type_name -> movie_service.Episode
	75,  // 20: movie_service.Episode.watch_info:type_name -> movie_service.WatchInfo
	70,  // 21: movie_service.Episode.audio_tracks:type_name -> movie_service.AudioTrack
	71,  // 22: movie_service.Episode.subtitles:type_name -> movie_service.Subtitle
	8,   // 23: movie_service.Collection.type:type_name -> movie_service.Collection.Type
	63,  // 24: movie_service.Collection.item_list:type_name -> movie_service.CollectionItem
	62,  // 25: movie_service.Collection.collection_list:type_name -> movie_service.Collection
	2,   // 26: movie_service.Collection.action:type_name -> movie_service.PromoBannerAction
	9,   // 27: movie_service.MovieOffer.offer_type:type_name -> movie_service.MovieOffer.OfferType
	67,  // 28: movie_service.MovieOffer.video_quality:type_name -> movie_service.VideoQuality
	65,  // 29: movie_service.MovieOffer.period:type_name -> movie_service.Period
	72,  // 30: movie_service.Comment.statistics:type_name -> movie_service.Statistics
	3,   // 31: movie_service.Comment.user_rating:type_name -> movie_service.Rating
	73,  // 32: movie_service.Comment.replies:type_name -> movie_service.Comment
	11,  // 33: movie_service.Recommendation.type:type_name -> movie_service.Recommendation.RecommendationType
	12,  // 34: movie_service.GetGenreMoviesResponse.result:type_name -> movie_service.GetGenreMoviesResponse.Result
	13,  // 35: movie_service.GetSubgenreMoviesResponse.result:type_name -> movie_service.GetSubgenreMoviesResponse.Result
	14,  // 36: movie_service.GetMovieInfoResponse.result:type_name -> movie_service.GetMovieInfoResponse.Result
	48,  // 37: movie_service.GetMovieInfoResponse.movies:type_name -> movie_service.Movie
	15,  // 38: movie_service.GetConfigurationResponse.result:type_name -> movie_service.GetConfigurationResponse.Result
	49,  // 39: movie_service.GetConfigurationResponse.categories:type_name -> movie_service.Category
	52,  // 40: movie_service.GetConfigurationResponse.countries:type_name -> movie_service.Country
	50,  // 41: movie_service.GetConfigurationResponse.genres:type_name -> movie_service.Genre
	74,  // 42: movie_service.GetConfigurationResponse.owners:type_name -> movie_service.Owner
	59,  // 43: movie_service.GetConfigurationResponse.roles:type_name -> movie_service.Role
	62,  // 44: movie_service.GetConfigurationResponse.collections:type_name -> movie_service.Collection
	64,  // 45: movie_service.GetConfigurationResponse.sort_modes:type_name -> movie_service.SortMode
	51,  // 46: movie_service.GetConfigurationResponse.subgenres:type_name -> movie_service.Subgenre
	67,  // 47: movie_service.GetConfigurationResponse.video_qualities:type_name -> movie_service.VideoQuality
	68,  // 48: movie_service.GetConfigurationResponse.languages:type_name -> movie_service.Language
	53,  // 49: movie_service.GetConfigurationResponse.sections:type_name -> movie_service.Section
	54,  // 50: movie_service.GetConfigurationResponse.banner_resolutions:type_name -> movie_service.BannerResolution
	56,  // 51: movie_service.GetConfigurationResponse.cab_sections:type_name -> movie_service.CabSection
	16,  // 52: movie_service.GetRecommendedMoviesResponse.status:type_name -> movie_service.GetRecommendedMoviesResponse.Result
	0,   // 53: movie_service.GetLinkRequest.preferred_link_type:type_name -> movie_service.LinkType
	17,  // 54: movie_service.GetLinkResponse.status:type_name -> movie_service.GetLinkResponse.Result
	133, // 55: movie_service.GetLinkResponse.ads:type_name -> movie_service.Ad
	0,   // 56: movie_service.GetLinkResponse.link_type:type_name -> movie_service.LinkType
	149, // 57: movie_service.GetLinkResponse.drm_type:type_name -> movie_service.DRMType
	90,  // 58: movie_service.GetLinkResponse.thumbnails:type_name -> movie_service.Thumbnails
	71,  // 59: movie_service.GetLinkResponse.subtitles:type_name -> movie_service.Subtitle
	18,  // 60: movie_service.GetCollectionMoviesResponse.result:type_name -> movie_service.GetCollectionMoviesResponse.Result
	19,  // 61: movie_service.GetPremiereMoviesResponse.result:type_name -> movie_service.GetPremiereMoviesResponse.Result
	94,  // 62: movie_service.GetPremiereMoviesResponse.collection:type_name -> movie_service.PremieresCollection
	20,  // 63: movie_service.GetWatchListResponse.result:type_name -> movie_service.GetWatchListResponse.Result
	75,  // 64: movie_service.SetWatchInfoRequest.info:type_name -> movie_service.WatchInfo
	21,  // 65: movie_service.SetWatchInfoResponse.result:type_name -> movie_service.SetWatchInfoResponse.Result
	22,  // 66: movie_service.ClearWatchInfoResponse.result:type_name -> movie_service.ClearWatchInfoResponse.Result
	23,  // 67: movie_service.GetFavoriteMoviesResponse.status:type_name -> movie_service.GetFavoriteMoviesResponse.Result
	24,  // 68: movie_service.AddFavoriteMovieResponse.status:type_name -> movie_service.AddFavoriteMovieResponse.Result
	25,  // 69: movie_service.RemoveFavoriteMovieResponse.status:type_name -> movie_service.RemoveFavoriteMovieResponse.Result
	1,   // 70: movie_service.GetPremiereBannersRequest.page:type_name -> movie_service.Page
	26,  // 71: movie_service.GetPremiereBannersResponse.status:type_name -> movie_service.GetPremiereBannersResponse.Result
	66,  // 72: movie_service.GetPremiereBannersResponse.banners:type_name -> movie_service.PremiereBanner
	2,   // 73: movie_service.PromoBanner.promo_banner_action:type_name -> movie_service.PromoBannerAction
	27,  // 74: movie_service.PromoBanner.content_type:type_name -> movie_service.PromoBanner.ContentType
	111, // 75: movie_service.PromoBanner.images:type_name -> movie_service.PromoBannerImage
	1,   // 76: movie_service.GetPromoBannersRequest.page:type_name -> movie_service.Page
	28,  // 77: movie_service.GetPromoBannersResponse.status:type_name -> movie_service.GetPromoBannersResponse.Result
	112, // 78: movie_service.GetPromoBannersResponse.banners:type_name -> movie_service.PromoBanner
	29,  // 79: movie_service.GetPurchasedMoviesResponse.status:type_name -> movie_service.GetPurchasedMoviesResponse.Result
	30,  // 80: movie_service.GetPersonInfoResponse.status:type_name -> movie_service.GetPersonInfoResponse.Result
	58,  // 81: movie_service.GetPersonInfoResponse.person:type_name -> movie_service.Person
	31,  // 82: movie_service.GetPersonsInfoResponse.status:type_name -> movie_service.GetPersonsInfoResponse.Result
	58,  // 83: movie_service.GetPersonsInfoResponse.persons:type_name -> movie_service.Person
	32,  // 84: movie_service.GetDownloadableMoviesResponse.status:type_name -> movie_service.GetDownloadableMoviesResponse.Result
	3,   // 85: movie_service.RateRequest.rating:type_name -> movie_service.Rating
	33,  // 86: movie_service.RateResponse.status:type_name -> movie_service.RateResponse.Result
	34,  // 87: movie_service.GetCollectionsRequest.type:type_name -> movie_service.GetCollectionsRequest.Type
	35,  // 88: movie_service.GetCollectionsResponse.result:type_name -> movie_service.GetCollectionsResponse.Result
	62,  // 89: movie_service.GetCollectionsResponse.collection:type_name -> movie_service.Collection
	36,  // 90: movie_service.PostCommentResponse.status:type_name -> movie_service.PostCommentResponse.Result
	37,  // 91: movie_service.EditCommentResponse.status:type_name -> movie_service.EditCommentResponse.Result
	38,  // 92: movie_service.DeleteCommentResponse.status:type_name -> movie_service.DeleteCommentResponse.Result
	39,  // 93: movie_service.InternalCommentMessage.action:type_name -> movie_service.InternalCommentMessage.Action
	42,  // 94: movie_service.Ad.type:type_name -> movie_service.Ad.Type
	40,  // 95: movie_service.Ad.media_type:type_name -> movie_service.Ad.MediaType
	41,  // 96: movie_service.Ad.content_type:type_name -> movie_service.Ad.ContentType
	43,  // 97: movie_service.FilterGroup.type:type_name -> movie_service.FilterGroup.Type
	134, // 98: movie_service.FilterGroup.filters:type_name -> movie_service.Filter
	135, // 99: movie_service.GetFiltersRequest.selected_filters:type_name -> movie_service.FilterGroup
	43,  // 100: movie_service.GetFiltersRequest.selected_group:type_name -> movie_service.FilterGroup.Type
	44,  // 101: movie_service.GetFiltersResponse.status:type_name -> movie_service.GetFiltersResponse.Result
	135, // 102: movie_service.GetFiltersResponse.filters:type_name -> movie_service.FilterGroup
	64,  // 103: movie_service.GetFiltersResponse.sort_modes:type_name -> movie_service.SortMode
	45,  // 104: movie_service.GetFilteredMoviesResponse.status:type_name -> movie_service.GetFilteredMoviesResponse.Result
	46,  // 105: movie_service.GetFilterOptionResponse.status:type_name -> movie_service.GetFilterOptionResponse.Result
	140, // 106: movie_service.GetFilterOptionResponse.filter_option:type_name -> movie_service.FilterOption
	47,  // 107: movie_service.NotifyMovieReleaseResponse.status:type_name -> movie_service.NotifyMovieReleaseResponse.Result
	77,  // 108: movie_service.GetRecommendationsResponse.recommendations:type_name -> movie_service.Recommendation
	48,  // 109: movie_service.GetAllMoviesInfoResponse.movies:type_name -> movie_service.Movie
	113, // 110: movie_service.MovieService.GetPromoBanners:input_type -> movie_service.GetPromoBannersRequest
	108, // 111: movie_service.MovieService.GetPremiereBanners:input_type -> movie_service.GetPremiereBannersRequest
	78,  // 112: movie_service.MovieService.GetGenreMovies:input_type -> movie_service.GetGenreMoviesRequest
	80,  // 113: movie_service.MovieService.GetSubgenreMovies:input_type -> movie_service.GetSubgenreMoviesRequest
	82,  // 114: movie_service.MovieService.GetMovieInfo:input_type -> movie_service.GetMovieInfoRequest
	88,  // 115: movie_service.MovieService.GetLink:input_type -> movie_service.GetLinkRequest
	93,  // 116: movie_service.MovieService.GetPremiereMovies:input_type -> movie_service.GetPremiereMoviesRequest
	110, // 117: movie_service.MovieService.GetPurchasedMovies:input_type -> movie_service.GetPurchasedMoviesRequest
	84,  // 118: movie_service.MovieService.GetConfiguration:input_type -> movie_service.GetConfigurationRequest
	86,  // 119: movie_service.MovieService.GetRecommendedMovies:input_type -> movie_service.GetRecommendedMoviesRequest
	91,  // 120: movie_service.MovieService.GetCollectionMovies:input_type -> movie_service.GetCollectionMoviesRequest
	96,  // 121: movie_service.MovieService.GetWatchList:input_type -> movie_service.GetWatchListRequest
	98,  // 122: movie_service.MovieService.SetWatchInfo:input_type -> movie_service.SetWatchInfoRequest
	100, // 123: movie_service.MovieService.ClearWatchInfo:input_type -> movie_service.ClearWatchInfoRequest
	102, // 124: movie_service.MovieService.GetFavoriteMovies:input_type -> movie_service.GetFavoriteMoviesRequest
	116, // 125: movie_service.MovieService.GetPersonInfo:input_type -> movie_service.GetPersonInfoRequest
	118, // 126: movie_service.MovieService.GetPersonsInfo:input_type -> movie_service.GetPersonsInfoRequest
	120, // 127: movie_service.MovieService.GetDownloadableMovies:input_type -> movie_service.GetDownloadableMoviesRequest
	122, // 128: movie_service.MovieService.Rate:input_type -> movie_service.RateRequest
	124, // 129: movie_service.MovieService.GetCollections:input_type -> movie_service.GetCollectionsRequest
	104, // 130: movie_service.MovieService.AddFavoriteMovie:input_type -> movie_service.AddFavoriteMovieRequest
	106, // 131: movie_service.MovieService.RemoveFavoriteMovie:input_type -> movie_service.RemoveFavoriteMovieRequest
	126, // 132: movie_service.MovieService.PostComment:input_type -> movie_service.PostCommentRequest
	128, // 133: movie_service.MovieService.EditComment:input_type -> movie_service.EditCommentRequest
	130, // 134: movie_service.MovieService.DeleteComment:input_type -> movie_service.DeleteCommentRequest
	136, // 135: movie_service.MovieService.GetFilters:input_type -> movie_service.GetFiltersRequest
	138, // 136: movie_service.MovieService.GetFilteredMovies:input_type -> movie_service.GetFilteredMoviesRequest
	141, // 137: movie_service.MovieService.GetFilterOption:input_type -> movie_service.GetFilterOptionRequest
	143, // 138: movie_service.MovieService.NotifyMovieRelease:input_type -> movie_service.NotifyMovieReleaseRequest
	145, // 139: movie_service.MovieService.GetRecommendations:input_type -> movie_service.GetRecommendationsRequest
	150, // 140: movie_service.InternalMovieService.GetAllMoviesInfo:input_type -> google.protobuf.Empty
	114, // 141: movie_service.MovieService.GetPromoBanners:output_type -> movie_service.GetPromoBannersResponse
	109, // 142: movie_service.MovieService.GetPremiereBanners:output_type -> movie_service.GetPremiereBannersResponse
	79,  // 143: movie_service.MovieService.GetGenreMovies:output_type -> movie_service.GetGenreMoviesResponse
	81,  // 144: movie_service.MovieService.GetSubgenreMovies:output_type -> movie_service.GetSubgenreMoviesResponse
	83,  // 145: movie_service.MovieService.GetMovieInfo:output_type -> movie_service.GetMovieInfoResponse
	89,  // 146: movie_service.MovieService.GetLink:output_type -> movie_service.GetLinkResponse
	95,  // 147: movie_service.MovieService.GetPremiereMovies:output_type -> movie_service.GetPremiereMoviesResponse
	115, // 148: movie_service.MovieService.GetPurchasedMovies:output_type -> movie_service.GetPurchasedMoviesResponse
	85,  // 149: movie_service.MovieService.GetConfiguration:output_type -> movie_service.GetConfigurationResponse
	87,  // 150: movie_service.MovieService.GetRecommendedMovies:output_type -> movie_service.GetRecommendedMoviesResponse
	92,  // 151: movie_service.MovieService.GetCollectionMovies:output_type -> movie_service.GetCollectionMoviesResponse
	97,  // 152: movie_service.MovieService.GetWatchList:output_type -> movie_service.GetWatchListResponse
	99,  // 153: movie_service.MovieService.SetWatchInfo:output_type -> movie_service.SetWatchInfoResponse
	101, // 154: movie_service.MovieService.ClearWatchInfo:output_type -> movie_service.ClearWatchInfoResponse
	103, // 155: movie_service.MovieService.GetFavoriteMovies:output_type -> movie_service.GetFavoriteMoviesResponse
	117, // 156: movie_service.MovieService.GetPersonInfo:output_type -> movie_service.GetPersonInfoResponse
	119, // 157: movie_service.MovieService.GetPersonsInfo:output_type -> movie_service.GetPersonsInfoResponse
	121, // 158: movie_service.MovieService.GetDownloadableMovies:output_type -> movie_service.GetDownloadableMoviesResponse
	123, // 159: movie_service.MovieService.Rate:output_type -> movie_service.RateResponse
	125, // 160: movie_service.MovieService.GetCollections:output_type -> movie_service.GetCollectionsResponse
	105, // 161: movie_service.MovieService.AddFavoriteMovie:output_type -> movie_service.AddFavoriteMovieResponse
	107, // 162: movie_service.MovieService.RemoveFavoriteMovie:output_type -> movie_service.RemoveFavoriteMovieResponse
	127, // 163: movie_service.MovieService.PostComment:output_type -> movie_service.PostCommentResponse
	129, // 164: movie_service.MovieService.EditComment:output_type -> movie_service.EditCommentResponse
	131, // 165: movie_service.MovieService.DeleteComment:output_type -> movie_service.DeleteCommentResponse
	137, // 166: movie_service.MovieService.GetFilters:output_type -> movie_service.GetFiltersResponse
	139, // 167: movie_service.MovieService.GetFilteredMovies:output_type -> movie_service.GetFilteredMoviesResponse
	142, // 168: movie_service.MovieService.GetFilterOption:output_type -> movie_service.GetFilterOptionResponse
	144, // 169: movie_service.MovieService.NotifyMovieRelease:output_type -> movie_service.NotifyMovieReleaseResponse
	146, // 170: movie_service.MovieService.GetRecommendations:output_type -> movie_service.GetRecommendationsResponse
	147, // 171: movie_service.InternalMovieService.GetAllMoviesInfo:output_type -> movie_service.GetAllMoviesInfoResponse
	141, // [141:172] is the sub-list for method output_type
	110, // [110:141] is the sub-list for method input_type
	110, // [110:110] is the sub-list for extension type_name
	110, // [110:110] is the sub-list for extension extendee
	0,   // [0:110] is the sub-list for field type_name
}

func init() { file_movie_service_movie_service_proto_init() }
func file_movie_service_movie_service_proto_init() {
	if File_movie_service_movie_service_proto != nil {
		return
	}
	file_movie_service_vod_link_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_movie_service_movie_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Movie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Genre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subgenre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerResolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CabSectionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CabSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Season); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Episode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Period); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PremiereBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Language); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subtitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Owner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalIdPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGenreMoviesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGenreMoviesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubgenreMoviesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubgenreMoviesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMovieInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMovieInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecommendedMoviesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecommendedMoviesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thumbnails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionMoviesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionMoviesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPremiereMoviesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PremieresCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPremiereMoviesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWatchListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWatchListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWatchInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWatchInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearWatchInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearWatchInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFavoriteMoviesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFavoriteMoviesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFavoriteMovieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFavoriteMovieResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFavoriteMovieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFavoriteMovieResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPremiereBannersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPremiereBannersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchasedMoviesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoBannerImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPromoBannersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPromoBannersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchasedMoviesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersonInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersonInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersonsInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersonsInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDownloadableMoviesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDownloadableMoviesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalCommentMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilteredMoviesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilteredMoviesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilterOptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilterOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyMovieReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyMovieReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecommendationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecommendationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllMoviesInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_movie_service_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poster_Dimensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_movie_service_movie_service_proto_rawDesc,
			NumEnums:      48,
			NumMessages:   101,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_movie_service_movie_service_proto_goTypes,
		DependencyIndexes: file_movie_service_movie_service_proto_depIdxs,
		EnumInfos:         file_movie_service_movie_service_proto_enumTypes,
		MessageInfos:      file_movie_service_movie_service_proto_msgTypes,
	}.Build()
	File_movie_service_movie_service_proto = out.File
	file_movie_service_movie_service_proto_rawDesc = nil
	file_movie_service_movie_service_proto_goTypes = nil
	file_movie_service_movie_service_proto_depIdxs = nil
}
