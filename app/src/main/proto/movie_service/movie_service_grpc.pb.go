// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: movie_service/movie_service.proto

package movie_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieServiceClient interface {
	GetPromoBanners(ctx context.Context, in *GetPromoBannersRequest, opts ...grpc.CallOption) (*GetPromoBannersResponse, error)
	GetPremiereBanners(ctx context.Context, in *GetPremiereBannersRequest, opts ...grpc.CallOption) (*GetPremiereBannersResponse, error)
	GetGenreMovies(ctx context.Context, in *GetGenreMoviesRequest, opts ...grpc.CallOption) (*GetGenreMoviesResponse, error)
	GetSubgenreMovies(ctx context.Context, in *GetSubgenreMoviesRequest, opts ...grpc.CallOption) (*GetSubgenreMoviesResponse, error)
	GetMovieInfo(ctx context.Context, in *GetMovieInfoRequest, opts ...grpc.CallOption) (*GetMovieInfoResponse, error)
	GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*GetLinkResponse, error)
	GetPremiereMovies(ctx context.Context, in *GetPremiereMoviesRequest, opts ...grpc.CallOption) (*GetPremiereMoviesResponse, error)
	GetPurchasedMovies(ctx context.Context, in *GetPurchasedMoviesRequest, opts ...grpc.CallOption) (*GetPurchasedMoviesResponse, error)
	GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error)
	GetRecommendedMovies(ctx context.Context, in *GetRecommendedMoviesRequest, opts ...grpc.CallOption) (*GetRecommendedMoviesResponse, error)
	GetCollectionMovies(ctx context.Context, in *GetCollectionMoviesRequest, opts ...grpc.CallOption) (*GetCollectionMoviesResponse, error)
	GetWatchList(ctx context.Context, in *GetWatchListRequest, opts ...grpc.CallOption) (*GetWatchListResponse, error)
	SetWatchInfo(ctx context.Context, in *SetWatchInfoRequest, opts ...grpc.CallOption) (*SetWatchInfoResponse, error)
	ClearWatchInfo(ctx context.Context, in *ClearWatchInfoRequest, opts ...grpc.CallOption) (*ClearWatchInfoResponse, error)
	GetFavoriteMovies(ctx context.Context, in *GetFavoriteMoviesRequest, opts ...grpc.CallOption) (*GetFavoriteMoviesResponse, error)
	GetPersonInfo(ctx context.Context, in *GetPersonInfoRequest, opts ...grpc.CallOption) (*GetPersonInfoResponse, error)
	GetPersonsInfo(ctx context.Context, in *GetPersonsInfoRequest, opts ...grpc.CallOption) (*GetPersonsInfoResponse, error)
	GetDownloadableMovies(ctx context.Context, in *GetDownloadableMoviesRequest, opts ...grpc.CallOption) (*GetDownloadableMoviesResponse, error)
	Rate(ctx context.Context, in *RateRequest, opts ...grpc.CallOption) (*RateResponse, error)
	GetCollections(ctx context.Context, in *GetCollectionsRequest, opts ...grpc.CallOption) (*GetCollectionsResponse, error)
	AddFavoriteMovie(ctx context.Context, in *AddFavoriteMovieRequest, opts ...grpc.CallOption) (*AddFavoriteMovieResponse, error)
	RemoveFavoriteMovie(ctx context.Context, in *RemoveFavoriteMovieRequest, opts ...grpc.CallOption) (*RemoveFavoriteMovieResponse, error)
	PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentResponse, error)
	EditComment(ctx context.Context, in *EditCommentRequest, opts ...grpc.CallOption) (*EditCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	GetFilters(ctx context.Context, in *GetFiltersRequest, opts ...grpc.CallOption) (*GetFiltersResponse, error)
	GetFilteredMovies(ctx context.Context, in *GetFilteredMoviesRequest, opts ...grpc.CallOption) (*GetFilteredMoviesResponse, error)
	GetFilterOption(ctx context.Context, in *GetFilterOptionRequest, opts ...grpc.CallOption) (*GetFilterOptionResponse, error)
	NotifyMovieRelease(ctx context.Context, in *NotifyMovieReleaseRequest, opts ...grpc.CallOption) (*NotifyMovieReleaseResponse, error)
	GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (*GetRecommendationsResponse, error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) GetPromoBanners(ctx context.Context, in *GetPromoBannersRequest, opts ...grpc.CallOption) (*GetPromoBannersResponse, error) {
	out := new(GetPromoBannersResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetPromoBanners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetPremiereBanners(ctx context.Context, in *GetPremiereBannersRequest, opts ...grpc.CallOption) (*GetPremiereBannersResponse, error) {
	out := new(GetPremiereBannersResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetPremiereBanners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetGenreMovies(ctx context.Context, in *GetGenreMoviesRequest, opts ...grpc.CallOption) (*GetGenreMoviesResponse, error) {
	out := new(GetGenreMoviesResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetGenreMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetSubgenreMovies(ctx context.Context, in *GetSubgenreMoviesRequest, opts ...grpc.CallOption) (*GetSubgenreMoviesResponse, error) {
	out := new(GetSubgenreMoviesResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetSubgenreMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetMovieInfo(ctx context.Context, in *GetMovieInfoRequest, opts ...grpc.CallOption) (*GetMovieInfoResponse, error) {
	out := new(GetMovieInfoResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetMovieInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*GetLinkResponse, error) {
	out := new(GetLinkResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetPremiereMovies(ctx context.Context, in *GetPremiereMoviesRequest, opts ...grpc.CallOption) (*GetPremiereMoviesResponse, error) {
	out := new(GetPremiereMoviesResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetPremiereMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetPurchasedMovies(ctx context.Context, in *GetPurchasedMoviesRequest, opts ...grpc.CallOption) (*GetPurchasedMoviesResponse, error) {
	out := new(GetPurchasedMoviesResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetPurchasedMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error) {
	out := new(GetConfigurationResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetRecommendedMovies(ctx context.Context, in *GetRecommendedMoviesRequest, opts ...grpc.CallOption) (*GetRecommendedMoviesResponse, error) {
	out := new(GetRecommendedMoviesResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetRecommendedMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetCollectionMovies(ctx context.Context, in *GetCollectionMoviesRequest, opts ...grpc.CallOption) (*GetCollectionMoviesResponse, error) {
	out := new(GetCollectionMoviesResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetCollectionMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetWatchList(ctx context.Context, in *GetWatchListRequest, opts ...grpc.CallOption) (*GetWatchListResponse, error) {
	out := new(GetWatchListResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetWatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) SetWatchInfo(ctx context.Context, in *SetWatchInfoRequest, opts ...grpc.CallOption) (*SetWatchInfoResponse, error) {
	out := new(SetWatchInfoResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/SetWatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) ClearWatchInfo(ctx context.Context, in *ClearWatchInfoRequest, opts ...grpc.CallOption) (*ClearWatchInfoResponse, error) {
	out := new(ClearWatchInfoResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/ClearWatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetFavoriteMovies(ctx context.Context, in *GetFavoriteMoviesRequest, opts ...grpc.CallOption) (*GetFavoriteMoviesResponse, error) {
	out := new(GetFavoriteMoviesResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetFavoriteMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetPersonInfo(ctx context.Context, in *GetPersonInfoRequest, opts ...grpc.CallOption) (*GetPersonInfoResponse, error) {
	out := new(GetPersonInfoResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetPersonInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetPersonsInfo(ctx context.Context, in *GetPersonsInfoRequest, opts ...grpc.CallOption) (*GetPersonsInfoResponse, error) {
	out := new(GetPersonsInfoResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetPersonsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetDownloadableMovies(ctx context.Context, in *GetDownloadableMoviesRequest, opts ...grpc.CallOption) (*GetDownloadableMoviesResponse, error) {
	out := new(GetDownloadableMoviesResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetDownloadableMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) Rate(ctx context.Context, in *RateRequest, opts ...grpc.CallOption) (*RateResponse, error) {
	out := new(RateResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/Rate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetCollections(ctx context.Context, in *GetCollectionsRequest, opts ...grpc.CallOption) (*GetCollectionsResponse, error) {
	out := new(GetCollectionsResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) AddFavoriteMovie(ctx context.Context, in *AddFavoriteMovieRequest, opts ...grpc.CallOption) (*AddFavoriteMovieResponse, error) {
	out := new(AddFavoriteMovieResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/AddFavoriteMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) RemoveFavoriteMovie(ctx context.Context, in *RemoveFavoriteMovieRequest, opts ...grpc.CallOption) (*RemoveFavoriteMovieResponse, error) {
	out := new(RemoveFavoriteMovieResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/RemoveFavoriteMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentResponse, error) {
	out := new(PostCommentResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/PostComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) EditComment(ctx context.Context, in *EditCommentRequest, opts ...grpc.CallOption) (*EditCommentResponse, error) {
	out := new(EditCommentResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/EditComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetFilters(ctx context.Context, in *GetFiltersRequest, opts ...grpc.CallOption) (*GetFiltersResponse, error) {
	out := new(GetFiltersResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetFilteredMovies(ctx context.Context, in *GetFilteredMoviesRequest, opts ...grpc.CallOption) (*GetFilteredMoviesResponse, error) {
	out := new(GetFilteredMoviesResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetFilteredMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetFilterOption(ctx context.Context, in *GetFilterOptionRequest, opts ...grpc.CallOption) (*GetFilterOptionResponse, error) {
	out := new(GetFilterOptionResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetFilterOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) NotifyMovieRelease(ctx context.Context, in *NotifyMovieReleaseRequest, opts ...grpc.CallOption) (*NotifyMovieReleaseResponse, error) {
	out := new(NotifyMovieReleaseResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/NotifyMovieRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (*GetRecommendationsResponse, error) {
	out := new(GetRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/movie_service.MovieService/GetRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility
type MovieServiceServer interface {
	GetPromoBanners(context.Context, *GetPromoBannersRequest) (*GetPromoBannersResponse, error)
	GetPremiereBanners(context.Context, *GetPremiereBannersRequest) (*GetPremiereBannersResponse, error)
	GetGenreMovies(context.Context, *GetGenreMoviesRequest) (*GetGenreMoviesResponse, error)
	GetSubgenreMovies(context.Context, *GetSubgenreMoviesRequest) (*GetSubgenreMoviesResponse, error)
	GetMovieInfo(context.Context, *GetMovieInfoRequest) (*GetMovieInfoResponse, error)
	GetLink(context.Context, *GetLinkRequest) (*GetLinkResponse, error)
	GetPremiereMovies(context.Context, *GetPremiereMoviesRequest) (*GetPremiereMoviesResponse, error)
	GetPurchasedMovies(context.Context, *GetPurchasedMoviesRequest) (*GetPurchasedMoviesResponse, error)
	GetConfiguration(context.Context, *GetConfigurationRequest) (*GetConfigurationResponse, error)
	GetRecommendedMovies(context.Context, *GetRecommendedMoviesRequest) (*GetRecommendedMoviesResponse, error)
	GetCollectionMovies(context.Context, *GetCollectionMoviesRequest) (*GetCollectionMoviesResponse, error)
	GetWatchList(context.Context, *GetWatchListRequest) (*GetWatchListResponse, error)
	SetWatchInfo(context.Context, *SetWatchInfoRequest) (*SetWatchInfoResponse, error)
	ClearWatchInfo(context.Context, *ClearWatchInfoRequest) (*ClearWatchInfoResponse, error)
	GetFavoriteMovies(context.Context, *GetFavoriteMoviesRequest) (*GetFavoriteMoviesResponse, error)
	GetPersonInfo(context.Context, *GetPersonInfoRequest) (*GetPersonInfoResponse, error)
	GetPersonsInfo(context.Context, *GetPersonsInfoRequest) (*GetPersonsInfoResponse, error)
	GetDownloadableMovies(context.Context, *GetDownloadableMoviesRequest) (*GetDownloadableMoviesResponse, error)
	Rate(context.Context, *RateRequest) (*RateResponse, error)
	GetCollections(context.Context, *GetCollectionsRequest) (*GetCollectionsResponse, error)
	AddFavoriteMovie(context.Context, *AddFavoriteMovieRequest) (*AddFavoriteMovieResponse, error)
	RemoveFavoriteMovie(context.Context, *RemoveFavoriteMovieRequest) (*RemoveFavoriteMovieResponse, error)
	PostComment(context.Context, *PostCommentRequest) (*PostCommentResponse, error)
	EditComment(context.Context, *EditCommentRequest) (*EditCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	GetFilters(context.Context, *GetFiltersRequest) (*GetFiltersResponse, error)
	GetFilteredMovies(context.Context, *GetFilteredMoviesRequest) (*GetFilteredMoviesResponse, error)
	GetFilterOption(context.Context, *GetFilterOptionRequest) (*GetFilterOptionResponse, error)
	NotifyMovieRelease(context.Context, *NotifyMovieReleaseRequest) (*NotifyMovieReleaseResponse, error)
	GetRecommendations(context.Context, *GetRecommendationsRequest) (*GetRecommendationsResponse, error)
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (UnimplementedMovieServiceServer) GetPromoBanners(context.Context, *GetPromoBannersRequest) (*GetPromoBannersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromoBanners not implemented")
}
func (UnimplementedMovieServiceServer) GetPremiereBanners(context.Context, *GetPremiereBannersRequest) (*GetPremiereBannersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPremiereBanners not implemented")
}
func (UnimplementedMovieServiceServer) GetGenreMovies(context.Context, *GetGenreMoviesRequest) (*GetGenreMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenreMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetSubgenreMovies(context.Context, *GetSubgenreMoviesRequest) (*GetSubgenreMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubgenreMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetMovieInfo(context.Context, *GetMovieInfoRequest) (*GetMovieInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieInfo not implemented")
}
func (UnimplementedMovieServiceServer) GetLink(context.Context, *GetLinkRequest) (*GetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (UnimplementedMovieServiceServer) GetPremiereMovies(context.Context, *GetPremiereMoviesRequest) (*GetPremiereMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPremiereMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetPurchasedMovies(context.Context, *GetPurchasedMoviesRequest) (*GetPurchasedMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchasedMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetConfiguration(context.Context, *GetConfigurationRequest) (*GetConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedMovieServiceServer) GetRecommendedMovies(context.Context, *GetRecommendedMoviesRequest) (*GetRecommendedMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendedMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetCollectionMovies(context.Context, *GetCollectionMoviesRequest) (*GetCollectionMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetWatchList(context.Context, *GetWatchListRequest) (*GetWatchListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWatchList not implemented")
}
func (UnimplementedMovieServiceServer) SetWatchInfo(context.Context, *SetWatchInfoRequest) (*SetWatchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWatchInfo not implemented")
}
func (UnimplementedMovieServiceServer) ClearWatchInfo(context.Context, *ClearWatchInfoRequest) (*ClearWatchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearWatchInfo not implemented")
}
func (UnimplementedMovieServiceServer) GetFavoriteMovies(context.Context, *GetFavoriteMoviesRequest) (*GetFavoriteMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetPersonInfo(context.Context, *GetPersonInfoRequest) (*GetPersonInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonInfo not implemented")
}
func (UnimplementedMovieServiceServer) GetPersonsInfo(context.Context, *GetPersonsInfoRequest) (*GetPersonsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonsInfo not implemented")
}
func (UnimplementedMovieServiceServer) GetDownloadableMovies(context.Context, *GetDownloadableMoviesRequest) (*GetDownloadableMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadableMovies not implemented")
}
func (UnimplementedMovieServiceServer) Rate(context.Context, *RateRequest) (*RateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rate not implemented")
}
func (UnimplementedMovieServiceServer) GetCollections(context.Context, *GetCollectionsRequest) (*GetCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollections not implemented")
}
func (UnimplementedMovieServiceServer) AddFavoriteMovie(context.Context, *AddFavoriteMovieRequest) (*AddFavoriteMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFavoriteMovie not implemented")
}
func (UnimplementedMovieServiceServer) RemoveFavoriteMovie(context.Context, *RemoveFavoriteMovieRequest) (*RemoveFavoriteMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFavoriteMovie not implemented")
}
func (UnimplementedMovieServiceServer) PostComment(context.Context, *PostCommentRequest) (*PostCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostComment not implemented")
}
func (UnimplementedMovieServiceServer) EditComment(context.Context, *EditCommentRequest) (*EditCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditComment not implemented")
}
func (UnimplementedMovieServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedMovieServiceServer) GetFilters(context.Context, *GetFiltersRequest) (*GetFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilters not implemented")
}
func (UnimplementedMovieServiceServer) GetFilteredMovies(context.Context, *GetFilteredMoviesRequest) (*GetFilteredMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetFilterOption(context.Context, *GetFilterOptionRequest) (*GetFilterOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilterOption not implemented")
}
func (UnimplementedMovieServiceServer) NotifyMovieRelease(context.Context, *NotifyMovieReleaseRequest) (*NotifyMovieReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyMovieRelease not implemented")
}
func (UnimplementedMovieServiceServer) GetRecommendations(context.Context, *GetRecommendationsRequest) (*GetRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendations not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_GetPromoBanners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPromoBannersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetPromoBanners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetPromoBanners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetPromoBanners(ctx, req.(*GetPromoBannersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetPremiereBanners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPremiereBannersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetPremiereBanners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetPremiereBanners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetPremiereBanners(ctx, req.(*GetPremiereBannersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetGenreMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenreMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetGenreMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetGenreMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetGenreMovies(ctx, req.(*GetGenreMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetSubgenreMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubgenreMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetSubgenreMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetSubgenreMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetSubgenreMovies(ctx, req.(*GetSubgenreMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetMovieInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetMovieInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetMovieInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetMovieInfo(ctx, req.(*GetMovieInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetLink(ctx, req.(*GetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetPremiereMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPremiereMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetPremiereMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetPremiereMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetPremiereMovies(ctx, req.(*GetPremiereMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetPurchasedMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchasedMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetPurchasedMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetPurchasedMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetPurchasedMovies(ctx, req.(*GetPurchasedMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetConfiguration(ctx, req.(*GetConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetRecommendedMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendedMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetRecommendedMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetRecommendedMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetRecommendedMovies(ctx, req.(*GetRecommendedMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetCollectionMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetCollectionMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetCollectionMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetCollectionMovies(ctx, req.(*GetCollectionMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetWatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWatchListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetWatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetWatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetWatchList(ctx, req.(*GetWatchListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_SetWatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWatchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).SetWatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/SetWatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).SetWatchInfo(ctx, req.(*SetWatchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_ClearWatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearWatchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).ClearWatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/ClearWatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).ClearWatchInfo(ctx, req.(*ClearWatchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetFavoriteMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetFavoriteMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetFavoriteMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetFavoriteMovies(ctx, req.(*GetFavoriteMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetPersonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetPersonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetPersonInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetPersonInfo(ctx, req.(*GetPersonInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetPersonsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetPersonsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetPersonsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetPersonsInfo(ctx, req.(*GetPersonsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetDownloadableMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadableMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetDownloadableMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetDownloadableMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetDownloadableMovies(ctx, req.(*GetDownloadableMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_Rate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).Rate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/Rate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).Rate(ctx, req.(*RateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetCollections(ctx, req.(*GetCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_AddFavoriteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFavoriteMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).AddFavoriteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/AddFavoriteMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).AddFavoriteMovie(ctx, req.(*AddFavoriteMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_RemoveFavoriteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFavoriteMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).RemoveFavoriteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/RemoveFavoriteMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).RemoveFavoriteMovie(ctx, req.(*RemoveFavoriteMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_PostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).PostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/PostComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).PostComment(ctx, req.(*PostCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_EditComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).EditComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/EditComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).EditComment(ctx, req.(*EditCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetFilters(ctx, req.(*GetFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetFilteredMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetFilteredMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetFilteredMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetFilteredMovies(ctx, req.(*GetFilteredMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetFilterOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilterOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetFilterOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetFilterOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetFilterOption(ctx, req.(*GetFilterOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_NotifyMovieRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyMovieReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).NotifyMovieRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/NotifyMovieRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).NotifyMovieRelease(ctx, req.(*NotifyMovieReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.MovieService/GetRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetRecommendations(ctx, req.(*GetRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie_service.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPromoBanners",
			Handler:    _MovieService_GetPromoBanners_Handler,
		},
		{
			MethodName: "GetPremiereBanners",
			Handler:    _MovieService_GetPremiereBanners_Handler,
		},
		{
			MethodName: "GetGenreMovies",
			Handler:    _MovieService_GetGenreMovies_Handler,
		},
		{
			MethodName: "GetSubgenreMovies",
			Handler:    _MovieService_GetSubgenreMovies_Handler,
		},
		{
			MethodName: "GetMovieInfo",
			Handler:    _MovieService_GetMovieInfo_Handler,
		},
		{
			MethodName: "GetLink",
			Handler:    _MovieService_GetLink_Handler,
		},
		{
			MethodName: "GetPremiereMovies",
			Handler:    _MovieService_GetPremiereMovies_Handler,
		},
		{
			MethodName: "GetPurchasedMovies",
			Handler:    _MovieService_GetPurchasedMovies_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _MovieService_GetConfiguration_Handler,
		},
		{
			MethodName: "GetRecommendedMovies",
			Handler:    _MovieService_GetRecommendedMovies_Handler,
		},
		{
			MethodName: "GetCollectionMovies",
			Handler:    _MovieService_GetCollectionMovies_Handler,
		},
		{
			MethodName: "GetWatchList",
			Handler:    _MovieService_GetWatchList_Handler,
		},
		{
			MethodName: "SetWatchInfo",
			Handler:    _MovieService_SetWatchInfo_Handler,
		},
		{
			MethodName: "ClearWatchInfo",
			Handler:    _MovieService_ClearWatchInfo_Handler,
		},
		{
			MethodName: "GetFavoriteMovies",
			Handler:    _MovieService_GetFavoriteMovies_Handler,
		},
		{
			MethodName: "GetPersonInfo",
			Handler:    _MovieService_GetPersonInfo_Handler,
		},
		{
			MethodName: "GetPersonsInfo",
			Handler:    _MovieService_GetPersonsInfo_Handler,
		},
		{
			MethodName: "GetDownloadableMovies",
			Handler:    _MovieService_GetDownloadableMovies_Handler,
		},
		{
			MethodName: "Rate",
			Handler:    _MovieService_Rate_Handler,
		},
		{
			MethodName: "GetCollections",
			Handler:    _MovieService_GetCollections_Handler,
		},
		{
			MethodName: "AddFavoriteMovie",
			Handler:    _MovieService_AddFavoriteMovie_Handler,
		},
		{
			MethodName: "RemoveFavoriteMovie",
			Handler:    _MovieService_RemoveFavoriteMovie_Handler,
		},
		{
			MethodName: "PostComment",
			Handler:    _MovieService_PostComment_Handler,
		},
		{
			MethodName: "EditComment",
			Handler:    _MovieService_EditComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _MovieService_DeleteComment_Handler,
		},
		{
			MethodName: "GetFilters",
			Handler:    _MovieService_GetFilters_Handler,
		},
		{
			MethodName: "GetFilteredMovies",
			Handler:    _MovieService_GetFilteredMovies_Handler,
		},
		{
			MethodName: "GetFilterOption",
			Handler:    _MovieService_GetFilterOption_Handler,
		},
		{
			MethodName: "NotifyMovieRelease",
			Handler:    _MovieService_NotifyMovieRelease_Handler,
		},
		{
			MethodName: "GetRecommendations",
			Handler:    _MovieService_GetRecommendations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie_service/movie_service.proto",
}

// InternalMovieServiceClient is the client API for InternalMovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalMovieServiceClient interface {
	GetAllMoviesInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllMoviesInfoResponse, error)
}

type internalMovieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalMovieServiceClient(cc grpc.ClientConnInterface) InternalMovieServiceClient {
	return &internalMovieServiceClient{cc}
}

func (c *internalMovieServiceClient) GetAllMoviesInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllMoviesInfoResponse, error) {
	out := new(GetAllMoviesInfoResponse)
	err := c.cc.Invoke(ctx, "/movie_service.InternalMovieService/GetAllMoviesInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalMovieServiceServer is the server API for InternalMovieService service.
// All implementations must embed UnimplementedInternalMovieServiceServer
// for forward compatibility
type InternalMovieServiceServer interface {
	GetAllMoviesInfo(context.Context, *emptypb.Empty) (*GetAllMoviesInfoResponse, error)
	mustEmbedUnimplementedInternalMovieServiceServer()
}

// UnimplementedInternalMovieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInternalMovieServiceServer struct {
}

func (UnimplementedInternalMovieServiceServer) GetAllMoviesInfo(context.Context, *emptypb.Empty) (*GetAllMoviesInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMoviesInfo not implemented")
}
func (UnimplementedInternalMovieServiceServer) mustEmbedUnimplementedInternalMovieServiceServer() {}

// UnsafeInternalMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalMovieServiceServer will
// result in compilation errors.
type UnsafeInternalMovieServiceServer interface {
	mustEmbedUnimplementedInternalMovieServiceServer()
}

func RegisterInternalMovieServiceServer(s grpc.ServiceRegistrar, srv InternalMovieServiceServer) {
	s.RegisterService(&InternalMovieService_ServiceDesc, srv)
}

func _InternalMovieService_GetAllMoviesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalMovieServiceServer).GetAllMoviesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_service.InternalMovieService/GetAllMoviesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalMovieServiceServer).GetAllMoviesInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalMovieService_ServiceDesc is the grpc.ServiceDesc for InternalMovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalMovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie_service.InternalMovieService",
	HandlerType: (*InternalMovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllMoviesInfo",
			Handler:    _InternalMovieService_GetAllMoviesInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie_service/movie_service.proto",
}
