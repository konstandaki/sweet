// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: movie_service/vod_link.proto

package movie_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DRMType int32

const (
	DRMType_DRM_NONE      DRMType = 0
	DRMType_DRM_AES       DRMType = 1
	DRMType_DRM_WIDEVINE  DRMType = 2
	DRMType_DRM_PLAYREADY DRMType = 3
	DRMType_DRM_FAIRPLAY  DRMType = 4
)

// Enum value maps for DRMType.
var (
	DRMType_name = map[int32]string{
		0: "DRM_NONE",
		1: "DRM_AES",
		2: "DRM_WIDEVINE",
		3: "DRM_PLAYREADY",
		4: "DRM_FAIRPLAY",
	}
	DRMType_value = map[string]int32{
		"DRM_NONE":      0,
		"DRM_AES":       1,
		"DRM_WIDEVINE":  2,
		"DRM_PLAYREADY": 3,
		"DRM_FAIRPLAY":  4,
	}
)

func (x DRMType) Enum() *DRMType {
	p := new(DRMType)
	*p = x
	return p
}

func (x DRMType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DRMType) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_vod_link_proto_enumTypes[0].Descriptor()
}

func (DRMType) Type() protoreflect.EnumType {
	return &file_movie_service_vod_link_proto_enumTypes[0]
}

func (x DRMType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DRMType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DRMType(num)
	return nil
}

// Deprecated: Use DRMType.Descriptor instead.
func (DRMType) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_vod_link_proto_rawDescGZIP(), []int{0}
}

type AllowedTracks int32

const (
	AllowedTracks_SD_ONLY AllowedTracks = 0
	AllowedTracks_SD_HD   AllowedTracks = 1
	AllowedTracks_SD_UHD1 AllowedTracks = 2
	AllowedTracks_SD_UHD2 AllowedTracks = 3
)

// Enum value maps for AllowedTracks.
var (
	AllowedTracks_name = map[int32]string{
		0: "SD_ONLY",
		1: "SD_HD",
		2: "SD_UHD1",
		3: "SD_UHD2",
	}
	AllowedTracks_value = map[string]int32{
		"SD_ONLY": 0,
		"SD_HD":   1,
		"SD_UHD1": 2,
		"SD_UHD2": 3,
	}
)

func (x AllowedTracks) Enum() *AllowedTracks {
	p := new(AllowedTracks)
	*p = x
	return p
}

func (x AllowedTracks) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowedTracks) Descriptor() protoreflect.EnumDescriptor {
	return file_movie_service_vod_link_proto_enumTypes[1].Descriptor()
}

func (AllowedTracks) Type() protoreflect.EnumType {
	return &file_movie_service_vod_link_proto_enumTypes[1]
}

func (x AllowedTracks) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AllowedTracks) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AllowedTracks(num)
	return nil
}

// Deprecated: Use AllowedTracks.Descriptor instead.
func (AllowedTracks) EnumDescriptor() ([]byte, []int) {
	return file_movie_service_vod_link_proto_rawDescGZIP(), []int{1}
}

type VodLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId          *int32   `protobuf:"varint,1,req,name=movie_id,json=movieId" json:"movie_id,omitempty"`
	EpisodeId        *int32   `protobuf:"varint,2,opt,name=episode_id,json=episodeId" json:"episode_id,omitempty"`
	Ip               *uint32  `protobuf:"varint,3,req,name=ip" json:"ip,omitempty"`
	ValidUntil       *uint64  `protobuf:"varint,4,req,name=valid_until,json=validUntil" json:"valid_until,omitempty"`
	VideoQuality     *int32   `protobuf:"varint,5,req,name=video_quality,json=videoQuality" json:"video_quality,omitempty"`
	DrmType          *DRMType `protobuf:"varint,6,req,name=drm_type,json=drmType,enum=movie_service.DRMType" json:"drm_type,omitempty"`
	AudioTrack       *int32   `protobuf:"varint,7,opt,name=audio_track,json=audioTrack" json:"audio_track,omitempty"`
	SubtitleLanguage *string  `protobuf:"bytes,8,opt,name=subtitle_language,json=subtitleLanguage" json:"subtitle_language,omitempty"`
	CutDuration      *uint32  `protobuf:"varint,9,opt,name=cut_duration,json=cutDuration" json:"cut_duration,omitempty"`
	MinVideoQuality  *int32   `protobuf:"varint,10,opt,name=min_video_quality,json=minVideoQuality" json:"min_video_quality,omitempty"`
}

func (x *VodLink) Reset() {
	*x = VodLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_vod_link_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodLink) ProtoMessage() {}

func (x *VodLink) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_vod_link_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodLink.ProtoReflect.Descriptor instead.
func (*VodLink) Descriptor() ([]byte, []int) {
	return file_movie_service_vod_link_proto_rawDescGZIP(), []int{0}
}

func (x *VodLink) GetMovieId() int32 {
	if x != nil && x.MovieId != nil {
		return *x.MovieId
	}
	return 0
}

func (x *VodLink) GetEpisodeId() int32 {
	if x != nil && x.EpisodeId != nil {
		return *x.EpisodeId
	}
	return 0
}

func (x *VodLink) GetIp() uint32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

func (x *VodLink) GetValidUntil() uint64 {
	if x != nil && x.ValidUntil != nil {
		return *x.ValidUntil
	}
	return 0
}

func (x *VodLink) GetVideoQuality() int32 {
	if x != nil && x.VideoQuality != nil {
		return *x.VideoQuality
	}
	return 0
}

func (x *VodLink) GetDrmType() DRMType {
	if x != nil && x.DrmType != nil {
		return *x.DrmType
	}
	return DRMType_DRM_NONE
}

func (x *VodLink) GetAudioTrack() int32 {
	if x != nil && x.AudioTrack != nil {
		return *x.AudioTrack
	}
	return 0
}

func (x *VodLink) GetSubtitleLanguage() string {
	if x != nil && x.SubtitleLanguage != nil {
		return *x.SubtitleLanguage
	}
	return ""
}

func (x *VodLink) GetCutDuration() uint32 {
	if x != nil && x.CutDuration != nil {
		return *x.CutDuration
	}
	return 0
}

func (x *VodLink) GetMinVideoQuality() int32 {
	if x != nil && x.MinVideoQuality != nil {
		return *x.MinVideoQuality
	}
	return 0
}

type VodDRMLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId    *uint64        `protobuf:"varint,1,req,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	ContentId     *string        `protobuf:"bytes,2,req,name=content_id,json=contentId" json:"content_id,omitempty"`
	AllowedTracks *AllowedTracks `protobuf:"varint,3,req,name=allowed_tracks,json=allowedTracks,enum=movie_service.AllowedTracks" json:"allowed_tracks,omitempty"`
	Ip            *uint32        `protobuf:"varint,4,req,name=ip" json:"ip,omitempty"`
	ValidUntil    *uint64        `protobuf:"varint,5,req,name=valid_until,json=validUntil" json:"valid_until,omitempty"`
}

func (x *VodDRMLink) Reset() {
	*x = VodDRMLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_service_vod_link_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDRMLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDRMLink) ProtoMessage() {}

func (x *VodDRMLink) ProtoReflect() protoreflect.Message {
	mi := &file_movie_service_vod_link_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDRMLink.ProtoReflect.Descriptor instead.
func (*VodDRMLink) Descriptor() ([]byte, []int) {
	return file_movie_service_vod_link_proto_rawDescGZIP(), []int{1}
}

func (x *VodDRMLink) GetContractId() uint64 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *VodDRMLink) GetContentId() string {
	if x != nil && x.ContentId != nil {
		return *x.ContentId
	}
	return ""
}

func (x *VodDRMLink) GetAllowedTracks() AllowedTracks {
	if x != nil && x.AllowedTracks != nil {
		return *x.AllowedTracks
	}
	return AllowedTracks_SD_ONLY
}

func (x *VodDRMLink) GetIp() uint32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

func (x *VodDRMLink) GetValidUntil() uint64 {
	if x != nil && x.ValidUntil != nil {
		return *x.ValidUntil
	}
	return 0
}

var File_movie_service_vod_link_proto protoreflect.FileDescriptor

var file_movie_service_vod_link_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xe9, 0x02,
	0x0a, 0x07, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75, 0x6e, 0x74,
	0x69, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x72, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x52, 0x4d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x64, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75,
	0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x56, 0x6f,
	0x64, 0x44, 0x52, 0x4d, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x2a, 0x5b,
	0x0a, 0x07, 0x44, 0x52, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x52, 0x4d,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x52, 0x4d, 0x5f, 0x41,
	0x45, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x52, 0x4d, 0x5f, 0x57, 0x49, 0x44, 0x45,
	0x56, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x52, 0x4d, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x52, 0x4d,
	0x5f, 0x46, 0x41, 0x49, 0x52, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x04, 0x2a, 0x41, 0x0a, 0x0d, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x44, 0x5f,
	0x48, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x44, 0x5f, 0x55, 0x48, 0x44, 0x31, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x44, 0x5f, 0x55, 0x48, 0x44, 0x32, 0x10, 0x03, 0x42, 0x47,
	0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x61, 0x2e, 0x6d, 0x79, 0x74, 0x72, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x74, 0x76, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74,
	0x2e, 0x74, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
}

var (
	file_movie_service_vod_link_proto_rawDescOnce sync.Once
	file_movie_service_vod_link_proto_rawDescData = file_movie_service_vod_link_proto_rawDesc
)

func file_movie_service_vod_link_proto_rawDescGZIP() []byte {
	file_movie_service_vod_link_proto_rawDescOnce.Do(func() {
		file_movie_service_vod_link_proto_rawDescData = protoimpl.X.CompressGZIP(file_movie_service_vod_link_proto_rawDescData)
	})
	return file_movie_service_vod_link_proto_rawDescData
}

var file_movie_service_vod_link_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_movie_service_vod_link_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_movie_service_vod_link_proto_goTypes = []interface{}{
	(DRMType)(0),       // 0: movie_service.DRMType
	(AllowedTracks)(0), // 1: movie_service.AllowedTracks
	(*VodLink)(nil),    // 2: movie_service.VodLink
	(*VodDRMLink)(nil), // 3: movie_service.VodDRMLink
}
var file_movie_service_vod_link_proto_depIdxs = []int32{
	0, // 0: movie_service.VodLink.drm_type:type_name -> movie_service.DRMType
	1, // 1: movie_service.VodDRMLink.allowed_tracks:type_name -> movie_service.AllowedTracks
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_movie_service_vod_link_proto_init() }
func file_movie_service_vod_link_proto_init() {
	if File_movie_service_vod_link_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_movie_service_vod_link_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_service_vod_link_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDRMLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_movie_service_vod_link_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_movie_service_vod_link_proto_goTypes,
		DependencyIndexes: file_movie_service_vod_link_proto_depIdxs,
		EnumInfos:         file_movie_service_vod_link_proto_enumTypes,
		MessageInfos:      file_movie_service_vod_link_proto_msgTypes,
	}.Build()
	File_movie_service_vod_link_proto = out.File
	file_movie_service_vod_link_proto_rawDesc = nil
	file_movie_service_vod_link_proto_goTypes = nil
	file_movie_service_vod_link_proto_depIdxs = nil
}
