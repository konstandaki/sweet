// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: tv_service/tv_service.proto

package tv_service

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OpenStreamResponse_Result int32

const (
	OpenStreamResponse_OK          OpenStreamResponse_Result = 0
	OpenStreamResponse_NoAuth      OpenStreamResponse_Result = 1
	OpenStreamResponse_NotFound    OpenStreamResponse_Result = 2
	OpenStreamResponse_Deny        OpenStreamResponse_Result = 3
	OpenStreamResponse_CodeInvalid OpenStreamResponse_Result = 4
)

// Enum value maps for OpenStreamResponse_Result.
var (
	OpenStreamResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
		2: "NotFound",
		3: "Deny",
		4: "CodeInvalid",
	}
	OpenStreamResponse_Result_value = map[string]int32{
		"OK":          0,
		"NoAuth":      1,
		"NotFound":    2,
		"Deny":        3,
		"CodeInvalid": 4,
	}
)

func (x OpenStreamResponse_Result) Enum() *OpenStreamResponse_Result {
	p := new(OpenStreamResponse_Result)
	*p = x
	return p
}

func (x OpenStreamResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenStreamResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_tv_service_tv_service_proto_enumTypes[0].Descriptor()
}

func (OpenStreamResponse_Result) Type() protoreflect.EnumType {
	return &file_tv_service_tv_service_proto_enumTypes[0]
}

func (x OpenStreamResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OpenStreamResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OpenStreamResponse_Result(num)
	return nil
}

// Deprecated: Use OpenStreamResponse_Result.Descriptor instead.
func (OpenStreamResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{2, 0}
}

type UpdateStreamResponse_Result int32

const (
	UpdateStreamResponse_OK            UpdateStreamResponse_Result = 0
	UpdateStreamResponse_NoAuth        UpdateStreamResponse_Result = 1
	UpdateStreamResponse_ReopenStream  UpdateStreamResponse_Result = 2
	UpdateStreamResponse_NotFound      UpdateStreamResponse_Result = 3
	UpdateStreamResponse_DeclineStream UpdateStreamResponse_Result = 4
)

// Enum value maps for UpdateStreamResponse_Result.
var (
	UpdateStreamResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
		2: "ReopenStream",
		3: "NotFound",
		4: "DeclineStream",
	}
	UpdateStreamResponse_Result_value = map[string]int32{
		"OK":            0,
		"NoAuth":        1,
		"ReopenStream":  2,
		"NotFound":      3,
		"DeclineStream": 4,
	}
)

func (x UpdateStreamResponse_Result) Enum() *UpdateStreamResponse_Result {
	p := new(UpdateStreamResponse_Result)
	*p = x
	return p
}

func (x UpdateStreamResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateStreamResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_tv_service_tv_service_proto_enumTypes[1].Descriptor()
}

func (UpdateStreamResponse_Result) Type() protoreflect.EnumType {
	return &file_tv_service_tv_service_proto_enumTypes[1]
}

func (x UpdateStreamResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UpdateStreamResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UpdateStreamResponse_Result(num)
	return nil
}

// Deprecated: Use UpdateStreamResponse_Result.Descriptor instead.
func (UpdateStreamResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{4, 0}
}

type CloseStreamResponse_Result int32

const (
	CloseStreamResponse_OK     CloseStreamResponse_Result = 0
	CloseStreamResponse_NoAuth CloseStreamResponse_Result = 1
)

// Enum value maps for CloseStreamResponse_Result.
var (
	CloseStreamResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	CloseStreamResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x CloseStreamResponse_Result) Enum() *CloseStreamResponse_Result {
	p := new(CloseStreamResponse_Result)
	*p = x
	return p
}

func (x CloseStreamResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloseStreamResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_tv_service_tv_service_proto_enumTypes[2].Descriptor()
}

func (CloseStreamResponse_Result) Type() protoreflect.EnumType {
	return &file_tv_service_tv_service_proto_enumTypes[2]
}

func (x CloseStreamResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CloseStreamResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CloseStreamResponse_Result(num)
	return nil
}

// Deprecated: Use CloseStreamResponse_Result.Descriptor instead.
func (CloseStreamResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{6, 0}
}

type GetChannelsResponse_Result int32

const (
	GetChannelsResponse_OK     GetChannelsResponse_Result = 0
	GetChannelsResponse_NoAuth GetChannelsResponse_Result = 1
)

// Enum value maps for GetChannelsResponse_Result.
var (
	GetChannelsResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetChannelsResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetChannelsResponse_Result) Enum() *GetChannelsResponse_Result {
	p := new(GetChannelsResponse_Result)
	*p = x
	return p
}

func (x GetChannelsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetChannelsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_tv_service_tv_service_proto_enumTypes[3].Descriptor()
}

func (GetChannelsResponse_Result) Type() protoreflect.EnumType {
	return &file_tv_service_tv_service_proto_enumTypes[3]
}

func (x GetChannelsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetChannelsResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetChannelsResponse_Result(num)
	return nil
}

// Deprecated: Use GetChannelsResponse_Result.Descriptor instead.
func (GetChannelsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{8, 0}
}

type GetTariffsResponse_Result int32

const (
	GetTariffsResponse_OK     GetTariffsResponse_Result = 0
	GetTariffsResponse_NoAuth GetTariffsResponse_Result = 1
)

// Enum value maps for GetTariffsResponse_Result.
var (
	GetTariffsResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetTariffsResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetTariffsResponse_Result) Enum() *GetTariffsResponse_Result {
	p := new(GetTariffsResponse_Result)
	*p = x
	return p
}

func (x GetTariffsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTariffsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_tv_service_tv_service_proto_enumTypes[4].Descriptor()
}

func (GetTariffsResponse_Result) Type() protoreflect.EnumType {
	return &file_tv_service_tv_service_proto_enumTypes[4]
}

func (x GetTariffsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetTariffsResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetTariffsResponse_Result(num)
	return nil
}

// Deprecated: Use GetTariffsResponse_Result.Descriptor instead.
func (GetTariffsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{10, 0}
}

type GetSubscriptionsResponse_Result int32

const (
	GetSubscriptionsResponse_OK     GetSubscriptionsResponse_Result = 0
	GetSubscriptionsResponse_NoAuth GetSubscriptionsResponse_Result = 1
)

// Enum value maps for GetSubscriptionsResponse_Result.
var (
	GetSubscriptionsResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetSubscriptionsResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetSubscriptionsResponse_Result) Enum() *GetSubscriptionsResponse_Result {
	p := new(GetSubscriptionsResponse_Result)
	*p = x
	return p
}

func (x GetSubscriptionsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSubscriptionsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_tv_service_tv_service_proto_enumTypes[5].Descriptor()
}

func (GetSubscriptionsResponse_Result) Type() protoreflect.EnumType {
	return &file_tv_service_tv_service_proto_enumTypes[5]
}

func (x GetSubscriptionsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetSubscriptionsResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetSubscriptionsResponse_Result(num)
	return nil
}

// Deprecated: Use GetSubscriptionsResponse_Result.Descriptor instead.
func (GetSubscriptionsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{12, 0}
}

type GetTariffsOffersResponse_Result int32

const (
	GetTariffsOffersResponse_OK     GetTariffsOffersResponse_Result = 0
	GetTariffsOffersResponse_NoAuth GetTariffsOffersResponse_Result = 1
)

// Enum value maps for GetTariffsOffersResponse_Result.
var (
	GetTariffsOffersResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	GetTariffsOffersResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x GetTariffsOffersResponse_Result) Enum() *GetTariffsOffersResponse_Result {
	p := new(GetTariffsOffersResponse_Result)
	*p = x
	return p
}

func (x GetTariffsOffersResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTariffsOffersResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_tv_service_tv_service_proto_enumTypes[6].Descriptor()
}

func (GetTariffsOffersResponse_Result) Type() protoreflect.EnumType {
	return &file_tv_service_tv_service_proto_enumTypes[6]
}

func (x GetTariffsOffersResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetTariffsOffersResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetTariffsOffersResponse_Result(num)
	return nil
}

// Deprecated: Use GetTariffsOffersResponse_Result.Descriptor instead.
func (GetTariffsOffersResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{14, 0}
}

type UserChannelResponse_Result int32

const (
	UserChannelResponse_OK     UserChannelResponse_Result = 0
	UserChannelResponse_NoAuth UserChannelResponse_Result = 1
)

// Enum value maps for UserChannelResponse_Result.
var (
	UserChannelResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	UserChannelResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x UserChannelResponse_Result) Enum() *UserChannelResponse_Result {
	p := new(UserChannelResponse_Result)
	*p = x
	return p
}

func (x UserChannelResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserChannelResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_tv_service_tv_service_proto_enumTypes[7].Descriptor()
}

func (UserChannelResponse_Result) Type() protoreflect.EnumType {
	return &file_tv_service_tv_service_proto_enumTypes[7]
}

func (x UserChannelResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserChannelResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserChannelResponse_Result(num)
	return nil
}

// Deprecated: Use UserChannelResponse_Result.Descriptor instead.
func (UserChannelResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{18, 0}
}

type SetUserChannelResponse_Result int32

const (
	SetUserChannelResponse_OK     SetUserChannelResponse_Result = 0
	SetUserChannelResponse_NoAuth SetUserChannelResponse_Result = 1
)

// Enum value maps for SetUserChannelResponse_Result.
var (
	SetUserChannelResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
	}
	SetUserChannelResponse_Result_value = map[string]int32{
		"OK":     0,
		"NoAuth": 1,
	}
)

func (x SetUserChannelResponse_Result) Enum() *SetUserChannelResponse_Result {
	p := new(SetUserChannelResponse_Result)
	*p = x
	return p
}

func (x SetUserChannelResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetUserChannelResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_tv_service_tv_service_proto_enumTypes[8].Descriptor()
}

func (SetUserChannelResponse_Result) Type() protoreflect.EnumType {
	return &file_tv_service_tv_service_proto_enumTypes[8]
}

func (x SetUserChannelResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SetUserChannelResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SetUserChannelResponse_Result(num)
	return nil
}

// Deprecated: Use SetUserChannelResponse_Result.Descriptor instead.
func (SetUserChannelResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{20, 0}
}

type GetMyVouchersResponse_Result int32

const (
	GetMyVouchersResponse_OK              GetMyVouchersResponse_Result = 0
	GetMyVouchersResponse_NoAuth          GetMyVouchersResponse_Result = 1
	GetMyVouchersResponse_NoVouchersFound GetMyVouchersResponse_Result = 2
)

// Enum value maps for GetMyVouchersResponse_Result.
var (
	GetMyVouchersResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NoAuth",
		2: "NoVouchersFound",
	}
	GetMyVouchersResponse_Result_value = map[string]int32{
		"OK":              0,
		"NoAuth":          1,
		"NoVouchersFound": 2,
	}
)

func (x GetMyVouchersResponse_Result) Enum() *GetMyVouchersResponse_Result {
	p := new(GetMyVouchersResponse_Result)
	*p = x
	return p
}

func (x GetMyVouchersResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMyVouchersResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_tv_service_tv_service_proto_enumTypes[9].Descriptor()
}

func (GetMyVouchersResponse_Result) Type() protoreflect.EnumType {
	return &file_tv_service_tv_service_proto_enumTypes[9]
}

func (x GetMyVouchersResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetMyVouchersResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetMyVouchersResponse_Result(num)
	return nil
}

// Deprecated: Use GetMyVouchersResponse_Result.Descriptor instead.
func (GetMyVouchersResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{22, 0}
}

type Voucher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *string `protobuf:"bytes,1,req,name=code" json:"code,omitempty"`
	ActivationDate *uint64 `protobuf:"varint,2,opt,name=activation_date,json=activationDate" json:"activation_date,omitempty"`
	ExpirationDate *uint64 `protobuf:"varint,3,opt,name=expiration_date,json=expirationDate" json:"expiration_date,omitempty"`
	PackageId      *uint32 `protobuf:"varint,4,opt,name=package_id,json=packageId" json:"package_id,omitempty"`
	TariffId       *uint32 `protobuf:"varint,5,opt,name=tariff_id,json=tariffId" json:"tariff_id,omitempty"`
}

func (x *Voucher) Reset() {
	*x = Voucher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Voucher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Voucher) ProtoMessage() {}

func (x *Voucher) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Voucher.ProtoReflect.Descriptor instead.
func (*Voucher) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{0}
}

func (x *Voucher) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *Voucher) GetActivationDate() uint64 {
	if x != nil && x.ActivationDate != nil {
		return *x.ActivationDate
	}
	return 0
}

func (x *Voucher) GetExpirationDate() uint64 {
	if x != nil && x.ExpirationDate != nil {
		return *x.ExpirationDate
	}
	return 0
}

func (x *Voucher) GetPackageId() uint32 {
	if x != nil && x.PackageId != nil {
		return *x.PackageId
	}
	return 0
}

func (x *Voucher) GetTariffId() uint32 {
	if x != nil && x.TariffId != nil {
		return *x.TariffId
	}
	return 0
}

type OpenStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth           *string        `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	ChannelId      *int32         `protobuf:"varint,2,req,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	OffsetId       *int32         `protobuf:"varint,3,opt,name=offset_id,json=offsetId,def=1" json:"offset_id,omitempty"`
	AcceptScheme   []StreamScheme `protobuf:"varint,4,rep,name=accept_scheme,json=acceptScheme,enum=tv_service.StreamScheme" json:"accept_scheme,omitempty"`
	FirstBatchSize *uint32        `protobuf:"varint,5,opt,name=first_batch_size,json=firstBatchSize" json:"first_batch_size,omitempty"`
	EpgId          *int32         `protobuf:"varint,6,opt,name=epg_id,json=epgId" json:"epg_id,omitempty"`
	Multistream    *bool          `protobuf:"varint,7,opt,name=multistream" json:"multistream,omitempty"`
	PreviewMode    *bool          `protobuf:"varint,8,opt,name=preview_mode,json=previewMode" json:"preview_mode,omitempty"`
	PinCode        *string        `protobuf:"bytes,9,opt,name=pin_code,json=pinCode" json:"pin_code,omitempty"`
}

// Default values for OpenStreamRequest fields.
const (
	Default_OpenStreamRequest_OffsetId = int32(1)
)

func (x *OpenStreamRequest) Reset() {
	*x = OpenStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenStreamRequest) ProtoMessage() {}

func (x *OpenStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenStreamRequest.ProtoReflect.Descriptor instead.
func (*OpenStreamRequest) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{1}
}

func (x *OpenStreamRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *OpenStreamRequest) GetChannelId() int32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *OpenStreamRequest) GetOffsetId() int32 {
	if x != nil && x.OffsetId != nil {
		return *x.OffsetId
	}
	return Default_OpenStreamRequest_OffsetId
}

func (x *OpenStreamRequest) GetAcceptScheme() []StreamScheme {
	if x != nil {
		return x.AcceptScheme
	}
	return nil
}

func (x *OpenStreamRequest) GetFirstBatchSize() uint32 {
	if x != nil && x.FirstBatchSize != nil {
		return *x.FirstBatchSize
	}
	return 0
}

func (x *OpenStreamRequest) GetEpgId() int32 {
	if x != nil && x.EpgId != nil {
		return *x.EpgId
	}
	return 0
}

func (x *OpenStreamRequest) GetMultistream() bool {
	if x != nil && x.Multistream != nil {
		return *x.Multistream
	}
	return false
}

func (x *OpenStreamRequest) GetPreviewMode() bool {
	if x != nil && x.PreviewMode != nil {
		return *x.PreviewMode
	}
	return false
}

func (x *OpenStreamRequest) GetPinCode() string {
	if x != nil && x.PinCode != nil {
		return *x.PinCode
	}
	return ""
}

type OpenStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         *OpenStreamResponse_Result `protobuf:"varint,1,req,name=result,enum=tv_service.OpenStreamResponse_Result" json:"result,omitempty"`
	Scheme         *StreamScheme              `protobuf:"varint,2,opt,name=scheme,enum=tv_service.StreamScheme" json:"scheme,omitempty"`
	MulticastGroup *IPPort                    `protobuf:"bytes,3,opt,name=multicast_group,json=multicastGroup" json:"multicast_group,omitempty"`
	HttpStream     *HttpStreamer              `protobuf:"bytes,4,opt,name=http_stream,json=httpStream" json:"http_stream,omitempty"`
	UnicastStream  *UnicastStreamer           `protobuf:"bytes,5,opt,name=unicast_stream,json=unicastStream" json:"unicast_stream,omitempty"`
	CacheServer    *CacheServer               `protobuf:"bytes,6,opt,name=cache_server,json=cacheServer" json:"cache_server,omitempty"`
	StreamId       *int32                     `protobuf:"varint,7,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	UpdateInterval *uint32                    `protobuf:"varint,8,opt,name=update_interval,json=updateInterval,def=60" json:"update_interval,omitempty"`
	LicenseServer  *string                    `protobuf:"bytes,9,opt,name=license_server,json=licenseServer" json:"license_server,omitempty"`
	Mesh           *bool                      `protobuf:"varint,10,opt,name=mesh" json:"mesh,omitempty"`
	ContentKey     *string                    `protobuf:"bytes,11,opt,name=content_key,json=contentKey" json:"content_key,omitempty"`
}

// Default values for OpenStreamResponse fields.
const (
	Default_OpenStreamResponse_UpdateInterval = uint32(60)
)

func (x *OpenStreamResponse) Reset() {
	*x = OpenStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenStreamResponse) ProtoMessage() {}

func (x *OpenStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenStreamResponse.ProtoReflect.Descriptor instead.
func (*OpenStreamResponse) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{2}
}

func (x *OpenStreamResponse) GetResult() OpenStreamResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return OpenStreamResponse_OK
}

func (x *OpenStreamResponse) GetScheme() StreamScheme {
	if x != nil && x.Scheme != nil {
		return *x.Scheme
	}
	return StreamScheme_MULTICAST_UDP
}

func (x *OpenStreamResponse) GetMulticastGroup() *IPPort {
	if x != nil {
		return x.MulticastGroup
	}
	return nil
}

func (x *OpenStreamResponse) GetHttpStream() *HttpStreamer {
	if x != nil {
		return x.HttpStream
	}
	return nil
}

func (x *OpenStreamResponse) GetUnicastStream() *UnicastStreamer {
	if x != nil {
		return x.UnicastStream
	}
	return nil
}

func (x *OpenStreamResponse) GetCacheServer() *CacheServer {
	if x != nil {
		return x.CacheServer
	}
	return nil
}

func (x *OpenStreamResponse) GetStreamId() int32 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *OpenStreamResponse) GetUpdateInterval() uint32 {
	if x != nil && x.UpdateInterval != nil {
		return *x.UpdateInterval
	}
	return Default_OpenStreamResponse_UpdateInterval
}

func (x *OpenStreamResponse) GetLicenseServer() string {
	if x != nil && x.LicenseServer != nil {
		return *x.LicenseServer
	}
	return ""
}

func (x *OpenStreamResponse) GetMesh() bool {
	if x != nil && x.Mesh != nil {
		return *x.Mesh
	}
	return false
}

func (x *OpenStreamResponse) GetContentKey() string {
	if x != nil && x.ContentKey != nil {
		return *x.ContentKey
	}
	return ""
}

type UpdateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	StreamId *int32  `protobuf:"varint,2,req,name=stream_id,json=streamId" json:"stream_id,omitempty"`
}

func (x *UpdateStreamRequest) Reset() {
	*x = UpdateStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamRequest) ProtoMessage() {}

func (x *UpdateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamRequest.ProtoReflect.Descriptor instead.
func (*UpdateStreamRequest) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateStreamRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *UpdateStreamRequest) GetStreamId() int32 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

type UpdateStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *UpdateStreamResponse_Result `protobuf:"varint,1,req,name=result,enum=tv_service.UpdateStreamResponse_Result" json:"result,omitempty"`
	PreviewUrl *string                      `protobuf:"bytes,2,opt,name=preview_url,json=previewUrl" json:"preview_url,omitempty"`
}

func (x *UpdateStreamResponse) Reset() {
	*x = UpdateStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamResponse) ProtoMessage() {}

func (x *UpdateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamResponse.ProtoReflect.Descriptor instead.
func (*UpdateStreamResponse) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateStreamResponse) GetResult() UpdateStreamResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return UpdateStreamResponse_OK
}

func (x *UpdateStreamResponse) GetPreviewUrl() string {
	if x != nil && x.PreviewUrl != nil {
		return *x.PreviewUrl
	}
	return ""
}

type CloseStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	StreamId *int32  `protobuf:"varint,2,req,name=stream_id,json=streamId" json:"stream_id,omitempty"`
}

func (x *CloseStreamRequest) Reset() {
	*x = CloseStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseStreamRequest) ProtoMessage() {}

func (x *CloseStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseStreamRequest.ProtoReflect.Descriptor instead.
func (*CloseStreamRequest) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{5}
}

func (x *CloseStreamRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *CloseStreamRequest) GetStreamId() int32 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

type CloseStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CloseStreamResponse_Result `protobuf:"varint,1,req,name=result,enum=tv_service.CloseStreamResponse_Result" json:"result,omitempty"`
}

func (x *CloseStreamResponse) Reset() {
	*x = CloseStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseStreamResponse) ProtoMessage() {}

func (x *CloseStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseStreamResponse.ProtoReflect.Descriptor instead.
func (*CloseStreamResponse) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{6}
}

func (x *CloseStreamResponse) GetResult() CloseStreamResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return CloseStreamResponse_OK
}

type GetChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth           *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	NeedIcons      *bool   `protobuf:"varint,2,req,name=need_icons,json=needIcons" json:"need_icons,omitempty"`
	NeedEpg        *bool   `protobuf:"varint,3,req,name=need_epg,json=needEpg" json:"need_epg,omitempty"`
	NeedOffsets    *bool   `protobuf:"varint,4,req,name=need_offsets,json=needOffsets" json:"need_offsets,omitempty"`
	NeedCategories *bool   `protobuf:"varint,8,opt,name=need_categories,json=needCategories" json:"need_categories,omitempty"`
	NeedHash       *bool   `protobuf:"varint,12,opt,name=need_hash,json=needHash" json:"need_hash,omitempty"`
	NeedList       *bool   `protobuf:"varint,13,opt,name=need_list,json=needList" json:"need_list,omitempty"`
	Channels       []int32 `protobuf:"varint,5,rep,name=channels" json:"channels,omitempty"`
	EpgStartOffset *int32  `protobuf:"varint,6,opt,name=epg_start_offset,json=epgStartOffset" json:"epg_start_offset,omitempty"`
	EpgStopOffset  *int32  `protobuf:"varint,7,opt,name=epg_stop_offset,json=epgStopOffset" json:"epg_stop_offset,omitempty"`
	EpgLimitPrev   *int32  `protobuf:"varint,10,opt,name=epg_limit_prev,json=epgLimitPrev" json:"epg_limit_prev,omitempty"`
	EpgLimitNext   *int32  `protobuf:"varint,11,opt,name=epg_limit_next,json=epgLimitNext" json:"epg_limit_next,omitempty"`
	EpgCurrentTime *uint64 `protobuf:"varint,14,opt,name=epg_current_time,json=epgCurrentTime" json:"epg_current_time,omitempty"`
	Category       []int32 `protobuf:"varint,9,rep,name=category" json:"category,omitempty"`
	NeedBigIcons   *bool   `protobuf:"varint,15,opt,name=need_big_icons,json=needBigIcons" json:"need_big_icons,omitempty"`
}

func (x *GetChannelsRequest) Reset() {
	*x = GetChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelsRequest) ProtoMessage() {}

func (x *GetChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelsRequest.ProtoReflect.Descriptor instead.
func (*GetChannelsRequest) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetChannelsRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *GetChannelsRequest) GetNeedIcons() bool {
	if x != nil && x.NeedIcons != nil {
		return *x.NeedIcons
	}
	return false
}

func (x *GetChannelsRequest) GetNeedEpg() bool {
	if x != nil && x.NeedEpg != nil {
		return *x.NeedEpg
	}
	return false
}

func (x *GetChannelsRequest) GetNeedOffsets() bool {
	if x != nil && x.NeedOffsets != nil {
		return *x.NeedOffsets
	}
	return false
}

func (x *GetChannelsRequest) GetNeedCategories() bool {
	if x != nil && x.NeedCategories != nil {
		return *x.NeedCategories
	}
	return false
}

func (x *GetChannelsRequest) GetNeedHash() bool {
	if x != nil && x.NeedHash != nil {
		return *x.NeedHash
	}
	return false
}

func (x *GetChannelsRequest) GetNeedList() bool {
	if x != nil && x.NeedList != nil {
		return *x.NeedList
	}
	return false
}

func (x *GetChannelsRequest) GetChannels() []int32 {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *GetChannelsRequest) GetEpgStartOffset() int32 {
	if x != nil && x.EpgStartOffset != nil {
		return *x.EpgStartOffset
	}
	return 0
}

func (x *GetChannelsRequest) GetEpgStopOffset() int32 {
	if x != nil && x.EpgStopOffset != nil {
		return *x.EpgStopOffset
	}
	return 0
}

func (x *GetChannelsRequest) GetEpgLimitPrev() int32 {
	if x != nil && x.EpgLimitPrev != nil {
		return *x.EpgLimitPrev
	}
	return 0
}

func (x *GetChannelsRequest) GetEpgLimitNext() int32 {
	if x != nil && x.EpgLimitNext != nil {
		return *x.EpgLimitNext
	}
	return 0
}

func (x *GetChannelsRequest) GetEpgCurrentTime() uint64 {
	if x != nil && x.EpgCurrentTime != nil {
		return *x.EpgCurrentTime
	}
	return 0
}

func (x *GetChannelsRequest) GetCategory() []int32 {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *GetChannelsRequest) GetNeedBigIcons() bool {
	if x != nil && x.NeedBigIcons != nil {
		return *x.NeedBigIcons
	}
	return false
}

type GetChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *GetChannelsResponse_Result `protobuf:"varint,1,req,name=status,enum=tv_service.GetChannelsResponse_Result" json:"status,omitempty"`
	List       []*Channel                  `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Offsets    []*TimeOffset               `protobuf:"bytes,3,rep,name=offsets" json:"offsets,omitempty"`
	Categories []*Category                 `protobuf:"bytes,4,rep,name=categories" json:"categories,omitempty"`
	ListHash   *string                     `protobuf:"bytes,5,opt,name=list_hash,json=listHash" json:"list_hash,omitempty"`
	ListIdHash *string                     `protobuf:"bytes,6,opt,name=list_id_hash,json=listIdHash" json:"list_id_hash,omitempty"`
	EpgUrl     *string                     `protobuf:"bytes,7,opt,name=epg_url,json=epgUrl" json:"epg_url,omitempty"`
}

func (x *GetChannelsResponse) Reset() {
	*x = GetChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelsResponse) ProtoMessage() {}

func (x *GetChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelsResponse.ProtoReflect.Descriptor instead.
func (*GetChannelsResponse) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetChannelsResponse) GetStatus() GetChannelsResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetChannelsResponse_OK
}

func (x *GetChannelsResponse) GetList() []*Channel {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetChannelsResponse) GetOffsets() []*TimeOffset {
	if x != nil {
		return x.Offsets
	}
	return nil
}

func (x *GetChannelsResponse) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *GetChannelsResponse) GetListHash() string {
	if x != nil && x.ListHash != nil {
		return *x.ListHash
	}
	return ""
}

func (x *GetChannelsResponse) GetListIdHash() string {
	if x != nil && x.ListIdHash != nil {
		return *x.ListIdHash
	}
	return ""
}

func (x *GetChannelsResponse) GetEpgUrl() string {
	if x != nil && x.EpgUrl != nil {
		return *x.EpgUrl
	}
	return ""
}

type GetTariffsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (x *GetTariffsRequest) Reset() {
	*x = GetTariffsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTariffsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTariffsRequest) ProtoMessage() {}

func (x *GetTariffsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTariffsRequest.ProtoReflect.Descriptor instead.
func (*GetTariffsRequest) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetTariffsRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

type GetTariffsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GetTariffsResponse_Result `protobuf:"varint,1,req,name=status,enum=tv_service.GetTariffsResponse_Result" json:"status,omitempty"`
	Tariffs []*Tariff                  `protobuf:"bytes,2,rep,name=tariffs" json:"tariffs,omitempty"`
}

func (x *GetTariffsResponse) Reset() {
	*x = GetTariffsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTariffsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTariffsResponse) ProtoMessage() {}

func (x *GetTariffsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTariffsResponse.ProtoReflect.Descriptor instead.
func (*GetTariffsResponse) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetTariffsResponse) GetStatus() GetTariffsResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetTariffsResponse_OK
}

func (x *GetTariffsResponse) GetTariffs() []*Tariff {
	if x != nil {
		return x.Tariffs
	}
	return nil
}

type GetSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (x *GetSubscriptionsRequest) Reset() {
	*x = GetSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionsRequest) ProtoMessage() {}

func (x *GetSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*GetSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetSubscriptionsRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

type GetSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *GetSubscriptionsResponse_Result `protobuf:"varint,1,req,name=status,enum=tv_service.GetSubscriptionsResponse_Result" json:"status,omitempty"`
	Subscriptions []*Subscription                  `protobuf:"bytes,2,rep,name=subscriptions" json:"subscriptions,omitempty"`
}

func (x *GetSubscriptionsResponse) Reset() {
	*x = GetSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionsResponse) ProtoMessage() {}

func (x *GetSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*GetSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetSubscriptionsResponse) GetStatus() GetSubscriptionsResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetSubscriptionsResponse_OK
}

func (x *GetSubscriptionsResponse) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type GetTariffsOffersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (x *GetTariffsOffersRequest) Reset() {
	*x = GetTariffsOffersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTariffsOffersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTariffsOffersRequest) ProtoMessage() {}

func (x *GetTariffsOffersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTariffsOffersRequest.ProtoReflect.Descriptor instead.
func (*GetTariffsOffersRequest) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetTariffsOffersRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

type GetTariffsOffersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GetTariffsOffersResponse_Result `protobuf:"varint,1,req,name=status,enum=tv_service.GetTariffsOffersResponse_Result" json:"status,omitempty"`
	TariffId []int32                          `protobuf:"varint,2,rep,name=tariff_id,json=tariffId" json:"tariff_id,omitempty"`
}

func (x *GetTariffsOffersResponse) Reset() {
	*x = GetTariffsOffersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTariffsOffersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTariffsOffersResponse) ProtoMessage() {}

func (x *GetTariffsOffersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTariffsOffersResponse.ProtoReflect.Descriptor instead.
func (*GetTariffsOffersResponse) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetTariffsOffersResponse) GetStatus() GetTariffsOffersResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetTariffsOffersResponse_OK
}

func (x *GetTariffsOffersResponse) GetTariffId() []int32 {
	if x != nil {
		return x.TariffId
	}
	return nil
}

type UserChannelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId []int32 `protobuf:"varint,1,rep,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Enabled   *bool   `protobuf:"varint,2,req,name=enabled" json:"enabled,omitempty"`
}

func (x *UserChannelData) Reset() {
	*x = UserChannelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChannelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChannelData) ProtoMessage() {}

func (x *UserChannelData) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChannelData.ProtoReflect.Descriptor instead.
func (*UserChannelData) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{15}
}

func (x *UserChannelData) GetChannelId() []int32 {
	if x != nil {
		return x.ChannelId
	}
	return nil
}

func (x *UserChannelData) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type UserChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	UseShared *bool   `protobuf:"varint,2,opt,name=use_shared,json=useShared" json:"use_shared,omitempty"`
}

func (x *UserChannelRequest) Reset() {
	*x = UserChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChannelRequest) ProtoMessage() {}

func (x *UserChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChannelRequest.ProtoReflect.Descriptor instead.
func (*UserChannelRequest) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{16}
}

func (x *UserChannelRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *UserChannelRequest) GetUseShared() bool {
	if x != nil && x.UseShared != nil {
		return *x.UseShared
	}
	return false
}

type EntryPointData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  *int32 `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	CategoryId *int32 `protobuf:"varint,2,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
	Forced     *bool  `protobuf:"varint,3,opt,name=forced" json:"forced,omitempty"`
}

func (x *EntryPointData) Reset() {
	*x = EntryPointData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryPointData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryPointData) ProtoMessage() {}

func (x *EntryPointData) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryPointData.ProtoReflect.Descriptor instead.
func (*EntryPointData) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{17}
}

func (x *EntryPointData) GetChannelId() int32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *EntryPointData) GetCategoryId() int32 {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return 0
}

func (x *EntryPointData) GetForced() bool {
	if x != nil && x.Forced != nil {
		return *x.Forced
	}
	return false
}

type UserChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *UserChannelResponse_Result `protobuf:"varint,1,req,name=result,enum=tv_service.UserChannelResponse_Result" json:"result,omitempty"`
	Data       *UserChannelData            `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	EntryPoint *EntryPointData             `protobuf:"bytes,3,opt,name=entry_point,json=entryPoint" json:"entry_point,omitempty"`
}

func (x *UserChannelResponse) Reset() {
	*x = UserChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChannelResponse) ProtoMessage() {}

func (x *UserChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChannelResponse.ProtoReflect.Descriptor instead.
func (*UserChannelResponse) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{18}
}

func (x *UserChannelResponse) GetResult() UserChannelResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return UserChannelResponse_OK
}

func (x *UserChannelResponse) GetData() *UserChannelData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UserChannelResponse) GetEntryPoint() *EntryPointData {
	if x != nil {
		return x.EntryPoint
	}
	return nil
}

type SetUserChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *string          `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Data      *UserChannelData `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
	UseShared *bool            `protobuf:"varint,3,opt,name=use_shared,json=useShared" json:"use_shared,omitempty"`
}

func (x *SetUserChannelRequest) Reset() {
	*x = SetUserChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserChannelRequest) ProtoMessage() {}

func (x *SetUserChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserChannelRequest.ProtoReflect.Descriptor instead.
func (*SetUserChannelRequest) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{19}
}

func (x *SetUserChannelRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *SetUserChannelRequest) GetData() *UserChannelData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SetUserChannelRequest) GetUseShared() bool {
	if x != nil && x.UseShared != nil {
		return *x.UseShared
	}
	return false
}

type SetUserChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *SetUserChannelResponse_Result `protobuf:"varint,1,req,name=result,enum=tv_service.SetUserChannelResponse_Result" json:"result,omitempty"`
}

func (x *SetUserChannelResponse) Reset() {
	*x = SetUserChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserChannelResponse) ProtoMessage() {}

func (x *SetUserChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserChannelResponse.ProtoReflect.Descriptor instead.
func (*SetUserChannelResponse) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{20}
}

func (x *SetUserChannelResponse) GetResult() SetUserChannelResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return SetUserChannelResponse_OK
}

type GetMyVouchersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (x *GetMyVouchersRequest) Reset() {
	*x = GetMyVouchersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyVouchersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyVouchersRequest) ProtoMessage() {}

func (x *GetMyVouchersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyVouchersRequest.ProtoReflect.Descriptor instead.
func (*GetMyVouchersRequest) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetMyVouchersRequest) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

type GetMyVouchersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GetMyVouchersResponse_Result `protobuf:"varint,1,req,name=status,enum=tv_service.GetMyVouchersResponse_Result" json:"status,omitempty"`
	Vouchers []*Voucher                    `protobuf:"bytes,2,rep,name=vouchers" json:"vouchers,omitempty"`
}

func (x *GetMyVouchersResponse) Reset() {
	*x = GetMyVouchersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tv_service_tv_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyVouchersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyVouchersResponse) ProtoMessage() {}

func (x *GetMyVouchersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tv_service_tv_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyVouchersResponse.ProtoReflect.Descriptor instead.
func (*GetMyVouchersResponse) Descriptor() ([]byte, []int) {
	return file_tv_service_tv_service_proto_rawDescGZIP(), []int{22}
}

func (x *GetMyVouchersResponse) GetStatus() GetMyVouchersResponse_Result {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetMyVouchersResponse_OK
}

func (x *GetMyVouchersResponse) GetVouchers() []*Voucher {
	if x != nil {
		return x.Vouchers
	}
	return nil
}

var File_tv_service_tv_service_proto protoreflect.FileDescriptor

var file_tv_service_tv_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x76, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74,
	0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x18, 0x74, 0x76, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x74,
	0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x74, 0x76, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x74, 0x76, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x74, 0x76, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65, 0x70, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xab, 0x01, 0x0a, 0x07, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49,
	0x64, 0x22, 0xc6, 0x02, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31,
	0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x70, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xea, 0x04, 0x0a, 0x12, 0x4f,
	0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x30, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x76,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x39, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x52, 0x0a,
	0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x42, 0x0a, 0x0e, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x52,
	0x0d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3a,
	0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0b, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x02, 0x36, 0x30, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x65, 0x73, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x22, 0x45, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x65, 0x6e, 0x79, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x04, 0x22, 0x46, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22,
	0xc9, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x22, 0x4f, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x6f, 0x70,
	0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f,
	0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x65, 0x63, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x04, 0x22, 0x45, 0x0a, 0x12, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x22, 0x73, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x76, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e,
	0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0x8e, 0x04, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x49, 0x63, 0x6f, 0x6e,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x70, 0x67, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x45, 0x70, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x65,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x65, 0x70, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x70, 0x67, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x70, 0x67, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x65, 0x70, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x65, 0x70, 0x67, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x70, 0x67, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x65, 0x76, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x70, 0x67, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x65, 0x70, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x65, 0x70, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x70, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x65, 0x65, 0x64,
	0x42, 0x69, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x76, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20,
	0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x17, 0x0a, 0x07, 0x65, 0x70, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x70, 0x67, 0x55, 0x72, 0x6c, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e,
	0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x22, 0x9f, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x07, 0x74, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68,
	0x10, 0x01, 0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x22, 0xbd, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x76, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10,
	0x01, 0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x22, 0x9a, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x64, 0x22,
	0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0x4a, 0x0a,
	0x0f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x47, 0x0a, 0x12, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x22, 0x68, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x22, 0xe1, 0x01, 0x0a,
	0x13, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x76, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01,
	0x22, 0x7b, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x2f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x76,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x22, 0x79, 0x0a,
	0x16, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x22, 0x2a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d,
	0x79, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x22, 0xbd, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x79, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2f, 0x0a, 0x08, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x08, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x73, 0x22, 0x31, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x4e, 0x6f, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0x02, 0x32, 0xeb, 0x18, 0x0a, 0x09, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x86, 0x02, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x1e, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xae, 0x01, 0x22, 0x16, 0x2f,
	0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x20, 0x22, 0x1b, 0x2f, 0x54, 0x76, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x21, 0x22, 0x1c, 0x2f, 0x54,
	0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x24, 0x22,
	0x1f, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x62,
	0x3a, 0x01, 0x2a, 0x5a, 0x26, 0x22, 0x21, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xfe, 0x01, 0x0a, 0x0a,
	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1d, 0x2e, 0x74, 0x76, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x76, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0xa9, 0x01, 0x22, 0x15, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x22,
	0x1a, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x4f, 0x70, 0x65, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x20,
	0x22, 0x1b, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x3a, 0x01, 0x2a,
	0x5a, 0x23, 0x22, 0x1e, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x25, 0x22, 0x20, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x02, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e,
	0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xba, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xb3, 0x01, 0x22, 0x17, 0x2f, 0x54, 0x76, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x3a, 0x01, 0x2a, 0x5a, 0x21, 0x22, 0x1c, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x22, 0x22, 0x1d, 0x2f, 0x54, 0x76,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x3a, 0x01, 0x2a, 0x5a, 0x25, 0x22,
	0x20, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70,
	0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x27, 0x22, 0x22, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x86, 0x02,
	0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x2e,
	0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xae, 0x01, 0x22, 0x16, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x3a, 0x01, 0x2a, 0x5a, 0x20, 0x22, 0x1b, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x21, 0x22, 0x1c, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x3a, 0x01, 0x2a, 0x5a, 0x24, 0x22, 0x1f, 0x2f, 0x54, 0x76, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x26,
	0x22, 0x21, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x73, 0x12, 0x1d, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x15, 0x2f, 0x54,
	0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x22, 0x1a, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x2e,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xac, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x74,
	0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x22,
	0x1b, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a,
	0x25, 0x22, 0x20, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xac, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x74, 0x76,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x22, 0x1b,
	0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x25,
	0x22, 0x20, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x2e, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x86, 0x02, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xae, 0x01,
	0x22, 0x16, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x5a, 0x20, 0x22, 0x1b, 0x2f,
	0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x21, 0x22,
	0x1c, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a,
	0x5a, 0x24, 0x22, 0x1f, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x26, 0x22, 0x21, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x9b,
	0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x1e, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xc7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xc0, 0x01, 0x22, 0x19, 0x2f, 0x54,
	0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x5a, 0x23, 0x22, 0x1e, 0x2f, 0x54,
	0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a,
	0x25, 0x22, 0x20, 0x2f, 0x53, 0x74, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x22, 0x23, 0x2f, 0x53, 0x74, 0x62, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a,
	0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x53, 0x74, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xa1, 0x02, 0x0a,
	0x0e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x21, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xc0, 0x01,
	0x22, 0x19, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x5a, 0x23,
	0x22, 0x1e, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x01, 0x2a, 0x5a, 0x25, 0x22, 0x20, 0x2f, 0x53, 0x74, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x22, 0x23, 0x2f, 0x53,
	0x74, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70,
	0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x53, 0x74, 0x62, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0x9d, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x73, 0x12, 0x20, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x79, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x22,
	0x18, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x4d,
	0x79, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x22, 0x22, 0x1d,
	0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x4d, 0x79,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0x96, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x76, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x76, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x76, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xb8,
	0x01, 0x22, 0x18, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65,
	0x74, 0x54, 0x76, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x5a, 0x22,
	0x22, 0x1d, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74,
	0x54, 0x76, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x5a, 0x23, 0x22, 0x1e, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x54, 0x76, 0x53, 0x68, 0x6f, 0x77,
	0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x5a, 0x26, 0x22, 0x21, 0x2f, 0x54, 0x76, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x54,
	0x76, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x62, 0x3a, 0x01, 0x2a, 0x5a,
	0x28, 0x22, 0x23, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x54, 0x76, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xc6, 0x02, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x45, 0x70, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x26, 0x2e, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x70, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x76, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x70, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xdd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xd6, 0x01, 0x22, 0x1e, 0x2f, 0x54,
	0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x45, 0x70, 0x67, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x01, 0x2a, 0x5a,
	0x28, 0x22, 0x23, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65,
	0x74, 0x45, 0x70, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x29, 0x22, 0x24, 0x2f, 0x54, 0x76,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65,
	0x74, 0x45, 0x70, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x3a, 0x01, 0x2a, 0x5a, 0x2c, 0x22, 0x27, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x45, 0x70, 0x67, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x62, 0x3a,
	0x01, 0x2a, 0x5a, 0x2e, 0x22, 0x29, 0x2f, 0x54, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x45, 0x70, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x77, 0x65,
	0x65, 0x74, 0x2e, 0x74, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x76, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
}

var (
	file_tv_service_tv_service_proto_rawDescOnce sync.Once
	file_tv_service_tv_service_proto_rawDescData = file_tv_service_tv_service_proto_rawDesc
)

func file_tv_service_tv_service_proto_rawDescGZIP() []byte {
	file_tv_service_tv_service_proto_rawDescOnce.Do(func() {
		file_tv_service_tv_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_tv_service_tv_service_proto_rawDescData)
	})
	return file_tv_service_tv_service_proto_rawDescData
}

var file_tv_service_tv_service_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_tv_service_tv_service_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_tv_service_tv_service_proto_goTypes = []interface{}{
	(OpenStreamResponse_Result)(0),       // 0: tv_service.OpenStreamResponse.Result
	(UpdateStreamResponse_Result)(0),     // 1: tv_service.UpdateStreamResponse.Result
	(CloseStreamResponse_Result)(0),      // 2: tv_service.CloseStreamResponse.Result
	(GetChannelsResponse_Result)(0),      // 3: tv_service.GetChannelsResponse.Result
	(GetTariffsResponse_Result)(0),       // 4: tv_service.GetTariffsResponse.Result
	(GetSubscriptionsResponse_Result)(0), // 5: tv_service.GetSubscriptionsResponse.Result
	(GetTariffsOffersResponse_Result)(0), // 6: tv_service.GetTariffsOffersResponse.Result
	(UserChannelResponse_Result)(0),      // 7: tv_service.UserChannelResponse.Result
	(SetUserChannelResponse_Result)(0),   // 8: tv_service.SetUserChannelResponse.Result
	(GetMyVouchersResponse_Result)(0),    // 9: tv_service.GetMyVouchersResponse.Result
	(*Voucher)(nil),                      // 10: tv_service.Voucher
	(*OpenStreamRequest)(nil),            // 11: tv_service.OpenStreamRequest
	(*OpenStreamResponse)(nil),           // 12: tv_service.OpenStreamResponse
	(*UpdateStreamRequest)(nil),          // 13: tv_service.UpdateStreamRequest
	(*UpdateStreamResponse)(nil),         // 14: tv_service.UpdateStreamResponse
	(*CloseStreamRequest)(nil),           // 15: tv_service.CloseStreamRequest
	(*CloseStreamResponse)(nil),          // 16: tv_service.CloseStreamResponse
	(*GetChannelsRequest)(nil),           // 17: tv_service.GetChannelsRequest
	(*GetChannelsResponse)(nil),          // 18: tv_service.GetChannelsResponse
	(*GetTariffsRequest)(nil),            // 19: tv_service.GetTariffsRequest
	(*GetTariffsResponse)(nil),           // 20: tv_service.GetTariffsResponse
	(*GetSubscriptionsRequest)(nil),      // 21: tv_service.GetSubscriptionsRequest
	(*GetSubscriptionsResponse)(nil),     // 22: tv_service.GetSubscriptionsResponse
	(*GetTariffsOffersRequest)(nil),      // 23: tv_service.GetTariffsOffersRequest
	(*GetTariffsOffersResponse)(nil),     // 24: tv_service.GetTariffsOffersResponse
	(*UserChannelData)(nil),              // 25: tv_service.UserChannelData
	(*UserChannelRequest)(nil),           // 26: tv_service.UserChannelRequest
	(*EntryPointData)(nil),               // 27: tv_service.EntryPointData
	(*UserChannelResponse)(nil),          // 28: tv_service.UserChannelResponse
	(*SetUserChannelRequest)(nil),        // 29: tv_service.SetUserChannelRequest
	(*SetUserChannelResponse)(nil),       // 30: tv_service.SetUserChannelResponse
	(*GetMyVouchersRequest)(nil),         // 31: tv_service.GetMyVouchersRequest
	(*GetMyVouchersResponse)(nil),        // 32: tv_service.GetMyVouchersResponse
	(StreamScheme)(0),                    // 33: tv_service.StreamScheme
	(*IPPort)(nil),                       // 34: tv_service.IPPort
	(*HttpStreamer)(nil),                 // 35: tv_service.HttpStreamer
	(*UnicastStreamer)(nil),              // 36: tv_service.UnicastStreamer
	(*CacheServer)(nil),                  // 37: tv_service.CacheServer
	(*Channel)(nil),                      // 38: tv_service.Channel
	(*TimeOffset)(nil),                   // 39: tv_service.TimeOffset
	(*Category)(nil),                     // 40: tv_service.Category
	(*Tariff)(nil),                       // 41: tv_service.Tariff
	(*Subscription)(nil),                 // 42: tv_service.Subscription
	(*GetUserInfoRequest)(nil),           // 43: tv_service.GetUserInfoRequest
	(*GetTvShowInfoRequest)(nil),         // 44: tv_service.GetTvShowInfoRequest
	(*GetEpgRecordPreviewRequest)(nil),   // 45: tv_service.GetEpgRecordPreviewRequest
	(*GetUserInfoResponse)(nil),          // 46: tv_service.GetUserInfoResponse
	(*GetTvShowInfoResponse)(nil),        // 47: tv_service.GetTvShowInfoResponse
	(*GetEpgRecordPreviewResponse)(nil),  // 48: tv_service.GetEpgRecordPreviewResponse
}
var file_tv_service_tv_service_proto_depIdxs = []int32{
	33, // 0: tv_service.OpenStreamRequest.accept_scheme:type_name -> tv_service.StreamScheme
	0,  // 1: tv_service.OpenStreamResponse.result:type_name -> tv_service.OpenStreamResponse.Result
	33, // 2: tv_service.OpenStreamResponse.scheme:type_name -> tv_service.StreamScheme
	34, // 3: tv_service.OpenStreamResponse.multicast_group:type_name -> tv_service.IPPort
	35, // 4: tv_service.OpenStreamResponse.http_stream:type_name -> tv_service.HttpStreamer
	36, // 5: tv_service.OpenStreamResponse.unicast_stream:type_name -> tv_service.UnicastStreamer
	37, // 6: tv_service.OpenStreamResponse.cache_server:type_name -> tv_service.CacheServer
	1,  // 7: tv_service.UpdateStreamResponse.result:type_name -> tv_service.UpdateStreamResponse.Result
	2,  // 8: tv_service.CloseStreamResponse.result:type_name -> tv_service.CloseStreamResponse.Result
	3,  // 9: tv_service.GetChannelsResponse.status:type_name -> tv_service.GetChannelsResponse.Result
	38, // 10: tv_service.GetChannelsResponse.list:type_name -> tv_service.Channel
	39, // 11: tv_service.GetChannelsResponse.offsets:type_name -> tv_service.TimeOffset
	40, // 12: tv_service.GetChannelsResponse.categories:type_name -> tv_service.Category
	4,  // 13: tv_service.GetTariffsResponse.status:type_name -> tv_service.GetTariffsResponse.Result
	41, // 14: tv_service.GetTariffsResponse.tariffs:type_name -> tv_service.Tariff
	5,  // 15: tv_service.GetSubscriptionsResponse.status:type_name -> tv_service.GetSubscriptionsResponse.Result
	42, // 16: tv_service.GetSubscriptionsResponse.subscriptions:type_name -> tv_service.Subscription
	6,  // 17: tv_service.GetTariffsOffersResponse.status:type_name -> tv_service.GetTariffsOffersResponse.Result
	7,  // 18: tv_service.UserChannelResponse.result:type_name -> tv_service.UserChannelResponse.Result
	25, // 19: tv_service.UserChannelResponse.data:type_name -> tv_service.UserChannelData
	27, // 20: tv_service.UserChannelResponse.entry_point:type_name -> tv_service.EntryPointData
	25, // 21: tv_service.SetUserChannelRequest.data:type_name -> tv_service.UserChannelData
	8,  // 22: tv_service.SetUserChannelResponse.result:type_name -> tv_service.SetUserChannelResponse.Result
	9,  // 23: tv_service.GetMyVouchersResponse.status:type_name -> tv_service.GetMyVouchersResponse.Result
	10, // 24: tv_service.GetMyVouchersResponse.vouchers:type_name -> tv_service.Voucher
	17, // 25: tv_service.TvService.GetChannels:input_type -> tv_service.GetChannelsRequest
	11, // 26: tv_service.TvService.OpenStream:input_type -> tv_service.OpenStreamRequest
	13, // 27: tv_service.TvService.UpdateStream:input_type -> tv_service.UpdateStreamRequest
	15, // 28: tv_service.TvService.CloseStream:input_type -> tv_service.CloseStreamRequest
	19, // 29: tv_service.TvService.GetTariffs:input_type -> tv_service.GetTariffsRequest
	21, // 30: tv_service.TvService.GetSubscriptions:input_type -> tv_service.GetSubscriptionsRequest
	23, // 31: tv_service.TvService.GetTariffsOffers:input_type -> tv_service.GetTariffsOffersRequest
	43, // 32: tv_service.TvService.GetUserInfo:input_type -> tv_service.GetUserInfoRequest
	26, // 33: tv_service.TvService.GetUserChannel:input_type -> tv_service.UserChannelRequest
	29, // 34: tv_service.TvService.SetUserChannel:input_type -> tv_service.SetUserChannelRequest
	31, // 35: tv_service.TvService.GetMyVouchers:input_type -> tv_service.GetMyVouchersRequest
	44, // 36: tv_service.TvService.GetTvShowInfo:input_type -> tv_service.GetTvShowInfoRequest
	45, // 37: tv_service.TvService.GetEpgRecordPreview:input_type -> tv_service.GetEpgRecordPreviewRequest
	18, // 38: tv_service.TvService.GetChannels:output_type -> tv_service.GetChannelsResponse
	12, // 39: tv_service.TvService.OpenStream:output_type -> tv_service.OpenStreamResponse
	14, // 40: tv_service.TvService.UpdateStream:output_type -> tv_service.UpdateStreamResponse
	16, // 41: tv_service.TvService.CloseStream:output_type -> tv_service.CloseStreamResponse
	20, // 42: tv_service.TvService.GetTariffs:output_type -> tv_service.GetTariffsResponse
	22, // 43: tv_service.TvService.GetSubscriptions:output_type -> tv_service.GetSubscriptionsResponse
	24, // 44: tv_service.TvService.GetTariffsOffers:output_type -> tv_service.GetTariffsOffersResponse
	46, // 45: tv_service.TvService.GetUserInfo:output_type -> tv_service.GetUserInfoResponse
	28, // 46: tv_service.TvService.GetUserChannel:output_type -> tv_service.UserChannelResponse
	30, // 47: tv_service.TvService.SetUserChannel:output_type -> tv_service.SetUserChannelResponse
	32, // 48: tv_service.TvService.GetMyVouchers:output_type -> tv_service.GetMyVouchersResponse
	47, // 49: tv_service.TvService.GetTvShowInfo:output_type -> tv_service.GetTvShowInfoResponse
	48, // 50: tv_service.TvService.GetEpgRecordPreview:output_type -> tv_service.GetEpgRecordPreviewResponse
	38, // [38:51] is the sub-list for method output_type
	25, // [25:38] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_tv_service_tv_service_proto_init() }
func file_tv_service_tv_service_proto_init() {
	if File_tv_service_tv_service_proto != nil {
		return
	}
	file_tv_service_billing_proto_init()
	file_tv_service_channel_proto_init()
	file_tv_service_time_offset_proto_init()
	file_tv_service_stream_proto_init()
	file_tv_service_servers_proto_init()
	file_tv_service_category_proto_init()
	file_tv_service_user_info_proto_init()
	file_tv_service_tv_show_proto_init()
	file_tv_service_epg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tv_service_tv_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Voucher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTariffsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTariffsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTariffsOffersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTariffsOffersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChannelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryPointData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyVouchersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tv_service_tv_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyVouchersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tv_service_tv_service_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tv_service_tv_service_proto_goTypes,
		DependencyIndexes: file_tv_service_tv_service_proto_depIdxs,
		EnumInfos:         file_tv_service_tv_service_proto_enumTypes,
		MessageInfos:      file_tv_service_tv_service_proto_msgTypes,
	}.Build()
	File_tv_service_tv_service_proto = out.File
	file_tv_service_tv_service_proto_rawDesc = nil
	file_tv_service_tv_service_proto_goTypes = nil
	file_tv_service_tv_service_proto_depIdxs = nil
}
