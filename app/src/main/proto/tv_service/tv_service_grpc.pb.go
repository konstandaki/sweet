// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: tv_service/tv_service.proto

package tv_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TvServiceClient is the client API for TvService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TvServiceClient interface {
	GetChannels(ctx context.Context, in *GetChannelsRequest, opts ...grpc.CallOption) (*GetChannelsResponse, error)
	OpenStream(ctx context.Context, in *OpenStreamRequest, opts ...grpc.CallOption) (*OpenStreamResponse, error)
	UpdateStream(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*UpdateStreamResponse, error)
	CloseStream(ctx context.Context, in *CloseStreamRequest, opts ...grpc.CallOption) (*CloseStreamResponse, error)
	GetTariffs(ctx context.Context, in *GetTariffsRequest, opts ...grpc.CallOption) (*GetTariffsResponse, error)
	GetSubscriptions(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error)
	GetTariffsOffers(ctx context.Context, in *GetTariffsOffersRequest, opts ...grpc.CallOption) (*GetTariffsOffersResponse, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	GetUserChannel(ctx context.Context, in *UserChannelRequest, opts ...grpc.CallOption) (*UserChannelResponse, error)
	SetUserChannel(ctx context.Context, in *SetUserChannelRequest, opts ...grpc.CallOption) (*SetUserChannelResponse, error)
	GetMyVouchers(ctx context.Context, in *GetMyVouchersRequest, opts ...grpc.CallOption) (*GetMyVouchersResponse, error)
	GetTvShowInfo(ctx context.Context, in *GetTvShowInfoRequest, opts ...grpc.CallOption) (*GetTvShowInfoResponse, error)
	GetEpgRecordPreview(ctx context.Context, in *GetEpgRecordPreviewRequest, opts ...grpc.CallOption) (*GetEpgRecordPreviewResponse, error)
}

type tvServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTvServiceClient(cc grpc.ClientConnInterface) TvServiceClient {
	return &tvServiceClient{cc}
}

func (c *tvServiceClient) GetChannels(ctx context.Context, in *GetChannelsRequest, opts ...grpc.CallOption) (*GetChannelsResponse, error) {
	out := new(GetChannelsResponse)
	err := c.cc.Invoke(ctx, "/tv_service.TvService/GetChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tvServiceClient) OpenStream(ctx context.Context, in *OpenStreamRequest, opts ...grpc.CallOption) (*OpenStreamResponse, error) {
	out := new(OpenStreamResponse)
	err := c.cc.Invoke(ctx, "/tv_service.TvService/OpenStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tvServiceClient) UpdateStream(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*UpdateStreamResponse, error) {
	out := new(UpdateStreamResponse)
	err := c.cc.Invoke(ctx, "/tv_service.TvService/UpdateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tvServiceClient) CloseStream(ctx context.Context, in *CloseStreamRequest, opts ...grpc.CallOption) (*CloseStreamResponse, error) {
	out := new(CloseStreamResponse)
	err := c.cc.Invoke(ctx, "/tv_service.TvService/CloseStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tvServiceClient) GetTariffs(ctx context.Context, in *GetTariffsRequest, opts ...grpc.CallOption) (*GetTariffsResponse, error) {
	out := new(GetTariffsResponse)
	err := c.cc.Invoke(ctx, "/tv_service.TvService/GetTariffs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tvServiceClient) GetSubscriptions(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error) {
	out := new(GetSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/tv_service.TvService/GetSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tvServiceClient) GetTariffsOffers(ctx context.Context, in *GetTariffsOffersRequest, opts ...grpc.CallOption) (*GetTariffsOffersResponse, error) {
	out := new(GetTariffsOffersResponse)
	err := c.cc.Invoke(ctx, "/tv_service.TvService/GetTariffsOffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tvServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/tv_service.TvService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tvServiceClient) GetUserChannel(ctx context.Context, in *UserChannelRequest, opts ...grpc.CallOption) (*UserChannelResponse, error) {
	out := new(UserChannelResponse)
	err := c.cc.Invoke(ctx, "/tv_service.TvService/GetUserChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tvServiceClient) SetUserChannel(ctx context.Context, in *SetUserChannelRequest, opts ...grpc.CallOption) (*SetUserChannelResponse, error) {
	out := new(SetUserChannelResponse)
	err := c.cc.Invoke(ctx, "/tv_service.TvService/SetUserChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tvServiceClient) GetMyVouchers(ctx context.Context, in *GetMyVouchersRequest, opts ...grpc.CallOption) (*GetMyVouchersResponse, error) {
	out := new(GetMyVouchersResponse)
	err := c.cc.Invoke(ctx, "/tv_service.TvService/GetMyVouchers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tvServiceClient) GetTvShowInfo(ctx context.Context, in *GetTvShowInfoRequest, opts ...grpc.CallOption) (*GetTvShowInfoResponse, error) {
	out := new(GetTvShowInfoResponse)
	err := c.cc.Invoke(ctx, "/tv_service.TvService/GetTvShowInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tvServiceClient) GetEpgRecordPreview(ctx context.Context, in *GetEpgRecordPreviewRequest, opts ...grpc.CallOption) (*GetEpgRecordPreviewResponse, error) {
	out := new(GetEpgRecordPreviewResponse)
	err := c.cc.Invoke(ctx, "/tv_service.TvService/GetEpgRecordPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TvServiceServer is the server API for TvService service.
// All implementations must embed UnimplementedTvServiceServer
// for forward compatibility
type TvServiceServer interface {
	GetChannels(context.Context, *GetChannelsRequest) (*GetChannelsResponse, error)
	OpenStream(context.Context, *OpenStreamRequest) (*OpenStreamResponse, error)
	UpdateStream(context.Context, *UpdateStreamRequest) (*UpdateStreamResponse, error)
	CloseStream(context.Context, *CloseStreamRequest) (*CloseStreamResponse, error)
	GetTariffs(context.Context, *GetTariffsRequest) (*GetTariffsResponse, error)
	GetSubscriptions(context.Context, *GetSubscriptionsRequest) (*GetSubscriptionsResponse, error)
	GetTariffsOffers(context.Context, *GetTariffsOffersRequest) (*GetTariffsOffersResponse, error)
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	GetUserChannel(context.Context, *UserChannelRequest) (*UserChannelResponse, error)
	SetUserChannel(context.Context, *SetUserChannelRequest) (*SetUserChannelResponse, error)
	GetMyVouchers(context.Context, *GetMyVouchersRequest) (*GetMyVouchersResponse, error)
	GetTvShowInfo(context.Context, *GetTvShowInfoRequest) (*GetTvShowInfoResponse, error)
	GetEpgRecordPreview(context.Context, *GetEpgRecordPreviewRequest) (*GetEpgRecordPreviewResponse, error)
	mustEmbedUnimplementedTvServiceServer()
}

// UnimplementedTvServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTvServiceServer struct {
}

func (UnimplementedTvServiceServer) GetChannels(context.Context, *GetChannelsRequest) (*GetChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannels not implemented")
}
func (UnimplementedTvServiceServer) OpenStream(context.Context, *OpenStreamRequest) (*OpenStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenStream not implemented")
}
func (UnimplementedTvServiceServer) UpdateStream(context.Context, *UpdateStreamRequest) (*UpdateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStream not implemented")
}
func (UnimplementedTvServiceServer) CloseStream(context.Context, *CloseStreamRequest) (*CloseStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseStream not implemented")
}
func (UnimplementedTvServiceServer) GetTariffs(context.Context, *GetTariffsRequest) (*GetTariffsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTariffs not implemented")
}
func (UnimplementedTvServiceServer) GetSubscriptions(context.Context, *GetSubscriptionsRequest) (*GetSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptions not implemented")
}
func (UnimplementedTvServiceServer) GetTariffsOffers(context.Context, *GetTariffsOffersRequest) (*GetTariffsOffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTariffsOffers not implemented")
}
func (UnimplementedTvServiceServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedTvServiceServer) GetUserChannel(context.Context, *UserChannelRequest) (*UserChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChannel not implemented")
}
func (UnimplementedTvServiceServer) SetUserChannel(context.Context, *SetUserChannelRequest) (*SetUserChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserChannel not implemented")
}
func (UnimplementedTvServiceServer) GetMyVouchers(context.Context, *GetMyVouchersRequest) (*GetMyVouchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyVouchers not implemented")
}
func (UnimplementedTvServiceServer) GetTvShowInfo(context.Context, *GetTvShowInfoRequest) (*GetTvShowInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTvShowInfo not implemented")
}
func (UnimplementedTvServiceServer) GetEpgRecordPreview(context.Context, *GetEpgRecordPreviewRequest) (*GetEpgRecordPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpgRecordPreview not implemented")
}
func (UnimplementedTvServiceServer) mustEmbedUnimplementedTvServiceServer() {}

// UnsafeTvServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TvServiceServer will
// result in compilation errors.
type UnsafeTvServiceServer interface {
	mustEmbedUnimplementedTvServiceServer()
}

func RegisterTvServiceServer(s grpc.ServiceRegistrar, srv TvServiceServer) {
	s.RegisterService(&TvService_ServiceDesc, srv)
}

func _TvService_GetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TvServiceServer).GetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv_service.TvService/GetChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TvServiceServer).GetChannels(ctx, req.(*GetChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TvService_OpenStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TvServiceServer).OpenStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv_service.TvService/OpenStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TvServiceServer).OpenStream(ctx, req.(*OpenStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TvService_UpdateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TvServiceServer).UpdateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv_service.TvService/UpdateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TvServiceServer).UpdateStream(ctx, req.(*UpdateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TvService_CloseStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TvServiceServer).CloseStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv_service.TvService/CloseStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TvServiceServer).CloseStream(ctx, req.(*CloseStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TvService_GetTariffs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTariffsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TvServiceServer).GetTariffs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv_service.TvService/GetTariffs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TvServiceServer).GetTariffs(ctx, req.(*GetTariffsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TvService_GetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TvServiceServer).GetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv_service.TvService/GetSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TvServiceServer).GetSubscriptions(ctx, req.(*GetSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TvService_GetTariffsOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTariffsOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TvServiceServer).GetTariffsOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv_service.TvService/GetTariffsOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TvServiceServer).GetTariffsOffers(ctx, req.(*GetTariffsOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TvService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TvServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv_service.TvService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TvServiceServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TvService_GetUserChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TvServiceServer).GetUserChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv_service.TvService/GetUserChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TvServiceServer).GetUserChannel(ctx, req.(*UserChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TvService_SetUserChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TvServiceServer).SetUserChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv_service.TvService/SetUserChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TvServiceServer).SetUserChannel(ctx, req.(*SetUserChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TvService_GetMyVouchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyVouchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TvServiceServer).GetMyVouchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv_service.TvService/GetMyVouchers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TvServiceServer).GetMyVouchers(ctx, req.(*GetMyVouchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TvService_GetTvShowInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTvShowInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TvServiceServer).GetTvShowInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv_service.TvService/GetTvShowInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TvServiceServer).GetTvShowInfo(ctx, req.(*GetTvShowInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TvService_GetEpgRecordPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpgRecordPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TvServiceServer).GetEpgRecordPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv_service.TvService/GetEpgRecordPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TvServiceServer).GetEpgRecordPreview(ctx, req.(*GetEpgRecordPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TvService_ServiceDesc is the grpc.ServiceDesc for TvService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TvService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tv_service.TvService",
	HandlerType: (*TvServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannels",
			Handler:    _TvService_GetChannels_Handler,
		},
		{
			MethodName: "OpenStream",
			Handler:    _TvService_OpenStream_Handler,
		},
		{
			MethodName: "UpdateStream",
			Handler:    _TvService_UpdateStream_Handler,
		},
		{
			MethodName: "CloseStream",
			Handler:    _TvService_CloseStream_Handler,
		},
		{
			MethodName: "GetTariffs",
			Handler:    _TvService_GetTariffs_Handler,
		},
		{
			MethodName: "GetSubscriptions",
			Handler:    _TvService_GetSubscriptions_Handler,
		},
		{
			MethodName: "GetTariffsOffers",
			Handler:    _TvService_GetTariffsOffers_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _TvService_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserChannel",
			Handler:    _TvService_GetUserChannel_Handler,
		},
		{
			MethodName: "SetUserChannel",
			Handler:    _TvService_SetUserChannel_Handler,
		},
		{
			MethodName: "GetMyVouchers",
			Handler:    _TvService_GetMyVouchers_Handler,
		},
		{
			MethodName: "GetTvShowInfo",
			Handler:    _TvService_GetTvShowInfo_Handler,
		},
		{
			MethodName: "GetEpgRecordPreview",
			Handler:    _TvService_GetEpgRecordPreview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tv_service/tv_service.proto",
}
